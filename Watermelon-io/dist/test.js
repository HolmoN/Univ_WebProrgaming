/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/matter-js/build/matter.js":
/*!************************************************!*\
  !*** ./node_modules/matter-js/build/matter.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/*!\r\n * matter-js 0.19.0 by @liabru\r\n * http://brm.io/matter-js/\r\n * License MIT\r\n * \r\n * The MIT License (MIT)\r\n * \r\n * Copyright (c) Liam Brummitt and contributors.\r\n * \r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n * \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\r\n(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(true)\r\n\t\tmodule.exports = factory();\r\n\telse {}\r\n})(this, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __nested_webpack_require_1829__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_1829__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__nested_webpack_require_1829__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__nested_webpack_require_1829__.c = installedModules;\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__nested_webpack_require_1829__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__nested_webpack_require_1829__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// define __esModule on exports\r\n/******/ \t__nested_webpack_require_1829__.r = function(exports) {\r\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\r\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\r\n/******/ \t\t}\r\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\r\n/******/ \t};\r\n/******/\r\n/******/ \t// create a fake namespace object\r\n/******/ \t// mode & 1: value is a module id, require it\r\n/******/ \t// mode & 2: merge all properties of value into the ns\r\n/******/ \t// mode & 4: return value when already ns object\r\n/******/ \t// mode & 8|1: behave like require\r\n/******/ \t__nested_webpack_require_1829__.t = function(value, mode) {\r\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_1829__(value);\r\n/******/ \t\tif(mode & 8) return value;\r\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\r\n/******/ \t\tvar ns = Object.create(null);\r\n/******/ \t\t__nested_webpack_require_1829__.r(ns);\r\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\r\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_1829__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\r\n/******/ \t\treturn ns;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__nested_webpack_require_1829__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__nested_webpack_require_1829__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__nested_webpack_require_1829__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__nested_webpack_require_1829__.p = \"\";\r\n/******/\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __nested_webpack_require_1829__(__nested_webpack_require_1829__.s = 20);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n* The `Matter.Common` module contains utility functions that are common to all modules.\r\n*\r\n* @class Common\r\n*/\r\n\r\nvar Common = {};\r\n\r\nmodule.exports = Common;\r\n\r\n(function() {\r\n\r\n    Common._baseDelta = 1000 / 60;\r\n    Common._nextId = 0;\r\n    Common._seed = 0;\r\n    Common._nowStartTime = +(new Date());\r\n    Common._warnedOnce = {};\r\n    Common._decomp = null;\r\n    \r\n    /**\r\n     * Extends the object in the first argument using the object in the second argument.\r\n     * @method extend\r\n     * @param {} obj\r\n     * @param {boolean} deep\r\n     * @return {} obj extended\r\n     */\r\n    Common.extend = function(obj, deep) {\r\n        var argsStart,\r\n            args,\r\n            deepClone;\r\n\r\n        if (typeof deep === 'boolean') {\r\n            argsStart = 2;\r\n            deepClone = deep;\r\n        } else {\r\n            argsStart = 1;\r\n            deepClone = true;\r\n        }\r\n\r\n        for (var i = argsStart; i < arguments.length; i++) {\r\n            var source = arguments[i];\r\n\r\n            if (source) {\r\n                for (var prop in source) {\r\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\r\n                        if (!obj[prop] || obj[prop].constructor === Object) {\r\n                            obj[prop] = obj[prop] || {};\r\n                            Common.extend(obj[prop], deepClone, source[prop]);\r\n                        } else {\r\n                            obj[prop] = source[prop];\r\n                        }\r\n                    } else {\r\n                        obj[prop] = source[prop];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        return obj;\r\n    };\r\n\r\n    /**\r\n     * Creates a new clone of the object, if deep is true references will also be cloned.\r\n     * @method clone\r\n     * @param {} obj\r\n     * @param {bool} deep\r\n     * @return {} obj cloned\r\n     */\r\n    Common.clone = function(obj, deep) {\r\n        return Common.extend({}, deep, obj);\r\n    };\r\n\r\n    /**\r\n     * Returns the list of keys for the given object.\r\n     * @method keys\r\n     * @param {} obj\r\n     * @return {string[]} keys\r\n     */\r\n    Common.keys = function(obj) {\r\n        if (Object.keys)\r\n            return Object.keys(obj);\r\n\r\n        // avoid hasOwnProperty for performance\r\n        var keys = [];\r\n        for (var key in obj)\r\n            keys.push(key);\r\n        return keys;\r\n    };\r\n\r\n    /**\r\n     * Returns the list of values for the given object.\r\n     * @method values\r\n     * @param {} obj\r\n     * @return {array} Array of the objects property values\r\n     */\r\n    Common.values = function(obj) {\r\n        var values = [];\r\n        \r\n        if (Object.keys) {\r\n            var keys = Object.keys(obj);\r\n            for (var i = 0; i < keys.length; i++) {\r\n                values.push(obj[keys[i]]);\r\n            }\r\n            return values;\r\n        }\r\n        \r\n        // avoid hasOwnProperty for performance\r\n        for (var key in obj)\r\n            values.push(obj[key]);\r\n        return values;\r\n    };\r\n\r\n    /**\r\n     * Gets a value from `base` relative to the `path` string.\r\n     * @method get\r\n     * @param {} obj The base object\r\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\r\n     * @param {number} [begin] Path slice begin\r\n     * @param {number} [end] Path slice end\r\n     * @return {} The object at the given path\r\n     */\r\n    Common.get = function(obj, path, begin, end) {\r\n        path = path.split('.').slice(begin, end);\r\n\r\n        for (var i = 0; i < path.length; i += 1) {\r\n            obj = obj[path[i]];\r\n        }\r\n\r\n        return obj;\r\n    };\r\n\r\n    /**\r\n     * Sets a value on `base` relative to the given `path` string.\r\n     * @method set\r\n     * @param {} obj The base object\r\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\r\n     * @param {} val The value to set\r\n     * @param {number} [begin] Path slice begin\r\n     * @param {number} [end] Path slice end\r\n     * @return {} Pass through `val` for chaining\r\n     */\r\n    Common.set = function(obj, path, val, begin, end) {\r\n        var parts = path.split('.').slice(begin, end);\r\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\r\n        return val;\r\n    };\r\n\r\n    /**\r\n     * Shuffles the given array in-place.\r\n     * The function uses a seeded random generator.\r\n     * @method shuffle\r\n     * @param {array} array\r\n     * @return {array} array shuffled randomly\r\n     */\r\n    Common.shuffle = function(array) {\r\n        for (var i = array.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Common.random() * (i + 1));\r\n            var temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n        }\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Randomly chooses a value from a list with equal probability.\r\n     * The function uses a seeded random generator.\r\n     * @method choose\r\n     * @param {array} choices\r\n     * @return {object} A random choice object from the array\r\n     */\r\n    Common.choose = function(choices) {\r\n        return choices[Math.floor(Common.random() * choices.length)];\r\n    };\r\n\r\n    /**\r\n     * Returns true if the object is a HTMLElement, otherwise false.\r\n     * @method isElement\r\n     * @param {object} obj\r\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\r\n     */\r\n    Common.isElement = function(obj) {\r\n        if (typeof HTMLElement !== 'undefined') {\r\n            return obj instanceof HTMLElement;\r\n        }\r\n\r\n        return !!(obj && obj.nodeType && obj.nodeName);\r\n    };\r\n\r\n    /**\r\n     * Returns true if the object is an array.\r\n     * @method isArray\r\n     * @param {object} obj\r\n     * @return {boolean} True if the object is an array, otherwise false\r\n     */\r\n    Common.isArray = function(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object Array]';\r\n    };\r\n\r\n    /**\r\n     * Returns true if the object is a function.\r\n     * @method isFunction\r\n     * @param {object} obj\r\n     * @return {boolean} True if the object is a function, otherwise false\r\n     */\r\n    Common.isFunction = function(obj) {\r\n        return typeof obj === \"function\";\r\n    };\r\n\r\n    /**\r\n     * Returns true if the object is a plain object.\r\n     * @method isPlainObject\r\n     * @param {object} obj\r\n     * @return {boolean} True if the object is a plain object, otherwise false\r\n     */\r\n    Common.isPlainObject = function(obj) {\r\n        return typeof obj === 'object' && obj.constructor === Object;\r\n    };\r\n\r\n    /**\r\n     * Returns true if the object is a string.\r\n     * @method isString\r\n     * @param {object} obj\r\n     * @return {boolean} True if the object is a string, otherwise false\r\n     */\r\n    Common.isString = function(obj) {\r\n        return toString.call(obj) === '[object String]';\r\n    };\r\n    \r\n    /**\r\n     * Returns the given value clamped between a minimum and maximum value.\r\n     * @method clamp\r\n     * @param {number} value\r\n     * @param {number} min\r\n     * @param {number} max\r\n     * @return {number} The value clamped between min and max inclusive\r\n     */\r\n    Common.clamp = function(value, min, max) {\r\n        if (value < min)\r\n            return min;\r\n        if (value > max)\r\n            return max;\r\n        return value;\r\n    };\r\n    \r\n    /**\r\n     * Returns the sign of the given value.\r\n     * @method sign\r\n     * @param {number} value\r\n     * @return {number} -1 if negative, +1 if 0 or positive\r\n     */\r\n    Common.sign = function(value) {\r\n        return value < 0 ? -1 : 1;\r\n    };\r\n    \r\n    /**\r\n     * Returns the current timestamp since the time origin (e.g. from page load).\r\n     * The result is in milliseconds and will use high-resolution timing if available.\r\n     * @method now\r\n     * @return {number} the current timestamp in milliseconds\r\n     */\r\n    Common.now = function() {\r\n        if (typeof window !== 'undefined' && window.performance) {\r\n            if (window.performance.now) {\r\n                return window.performance.now();\r\n            } else if (window.performance.webkitNow) {\r\n                return window.performance.webkitNow();\r\n            }\r\n        }\r\n\r\n        if (Date.now) {\r\n            return Date.now();\r\n        }\r\n\r\n        return (new Date()) - Common._nowStartTime;\r\n    };\r\n    \r\n    /**\r\n     * Returns a random value between a minimum and a maximum value inclusive.\r\n     * The function uses a seeded random generator.\r\n     * @method random\r\n     * @param {number} min\r\n     * @param {number} max\r\n     * @return {number} A random number between min and max inclusive\r\n     */\r\n    Common.random = function(min, max) {\r\n        min = (typeof min !== \"undefined\") ? min : 0;\r\n        max = (typeof max !== \"undefined\") ? max : 1;\r\n        return min + _seededRandom() * (max - min);\r\n    };\r\n\r\n    var _seededRandom = function() {\r\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\r\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\r\n        return Common._seed / 233280;\r\n    };\r\n\r\n    /**\r\n     * Converts a CSS hex colour string into an integer.\r\n     * @method colorToNumber\r\n     * @param {string} colorString\r\n     * @return {number} An integer representing the CSS hex string\r\n     */\r\n    Common.colorToNumber = function(colorString) {\r\n        colorString = colorString.replace('#','');\r\n\r\n        if (colorString.length == 3) {\r\n            colorString = colorString.charAt(0) + colorString.charAt(0)\r\n                        + colorString.charAt(1) + colorString.charAt(1)\r\n                        + colorString.charAt(2) + colorString.charAt(2);\r\n        }\r\n\r\n        return parseInt(colorString, 16);\r\n    };\r\n\r\n    /**\r\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\r\n     * The default level is 'debug' which shows all console messages.  \r\n     *\r\n     * Possible level values are:\r\n     * - 0 = None\r\n     * - 1 = Debug\r\n     * - 2 = Info\r\n     * - 3 = Warn\r\n     * - 4 = Error\r\n     * @static\r\n     * @property logLevel\r\n     * @type {Number}\r\n     * @default 1\r\n     */\r\n    Common.logLevel = 1;\r\n\r\n    /**\r\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\r\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\r\n     * @method log\r\n     * @param ...objs {} The objects to log.\r\n     */\r\n    Common.log = function() {\r\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\r\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\r\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\r\n     * @method info\r\n     * @param ...objs {} The objects to log.\r\n     */\r\n    Common.info = function() {\r\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\r\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\r\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\r\n     * @method warn\r\n     * @param ...objs {} The objects to log.\r\n     */\r\n    Common.warn = function() {\r\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\r\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Uses `Common.warn` to log the given message one time only.\r\n     * @method warnOnce\r\n     * @param ...objs {} The objects to log.\r\n     */\r\n    Common.warnOnce = function() {\r\n        var message = Array.prototype.slice.call(arguments).join(' ');\r\n\r\n        if (!Common._warnedOnce[message]) {\r\n            Common.warn(message);\r\n            Common._warnedOnce[message] = true;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Shows a deprecated console warning when the function on the given object is called.\r\n     * The target function will be replaced with a new function that first shows the warning\r\n     * and then calls the original function.\r\n     * @method deprecated\r\n     * @param {object} obj The object or module\r\n     * @param {string} name The property name of the function on obj\r\n     * @param {string} warning The one-time message to show if the function is called\r\n     */\r\n    Common.deprecated = function(obj, prop, warning) {\r\n        obj[prop] = Common.chain(function() {\r\n            Common.warnOnce('🔅 deprecated 🔅', warning);\r\n        }, obj[prop]);\r\n    };\r\n\r\n    /**\r\n     * Returns the next unique sequential ID.\r\n     * @method nextId\r\n     * @return {Number} Unique sequential ID\r\n     */\r\n    Common.nextId = function() {\r\n        return Common._nextId++;\r\n    };\r\n\r\n    /**\r\n     * A cross browser compatible indexOf implementation.\r\n     * @method indexOf\r\n     * @param {array} haystack\r\n     * @param {object} needle\r\n     * @return {number} The position of needle in haystack, otherwise -1.\r\n     */\r\n    Common.indexOf = function(haystack, needle) {\r\n        if (haystack.indexOf)\r\n            return haystack.indexOf(needle);\r\n\r\n        for (var i = 0; i < haystack.length; i++) {\r\n            if (haystack[i] === needle)\r\n                return i;\r\n        }\r\n\r\n        return -1;\r\n    };\r\n\r\n    /**\r\n     * A cross browser compatible array map implementation.\r\n     * @method map\r\n     * @param {array} list\r\n     * @param {function} func\r\n     * @return {array} Values from list transformed by func.\r\n     */\r\n    Common.map = function(list, func) {\r\n        if (list.map) {\r\n            return list.map(func);\r\n        }\r\n\r\n        var mapped = [];\r\n\r\n        for (var i = 0; i < list.length; i += 1) {\r\n            mapped.push(func(list[i]));\r\n        }\r\n\r\n        return mapped;\r\n    };\r\n\r\n    /**\r\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\r\n     * Circular dependencies are allowed.\r\n     * @method topologicalSort\r\n     * @param {object} graph\r\n     * @return {array} Partially ordered set of vertices in topological order.\r\n     */\r\n    Common.topologicalSort = function(graph) {\r\n        // https://github.com/mgechev/javascript-algorithms\r\n        // Copyright (c) Minko Gechev (MIT license)\r\n        // Modifications: tidy formatting and naming\r\n        var result = [],\r\n            visited = [],\r\n            temp = [];\r\n\r\n        for (var node in graph) {\r\n            if (!visited[node] && !temp[node]) {\r\n                Common._topologicalSort(node, visited, temp, graph, result);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\r\n        var neighbors = graph[node] || [];\r\n        temp[node] = true;\r\n\r\n        for (var i = 0; i < neighbors.length; i += 1) {\r\n            var neighbor = neighbors[i];\r\n\r\n            if (temp[neighbor]) {\r\n                // skip circular dependencies\r\n                continue;\r\n            }\r\n\r\n            if (!visited[neighbor]) {\r\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\r\n            }\r\n        }\r\n\r\n        temp[node] = false;\r\n        visited[node] = true;\r\n\r\n        result.push(node);\r\n    };\r\n\r\n    /**\r\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\r\n     * The arguments applied when calling the new function will also be applied to every function passed.\r\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\r\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\r\n     * After all passed functions have been called the new function returns the last returned value (if any).\r\n     * If any of the passed functions are a chain, then the chain will be flattened.\r\n     * @method chain\r\n     * @param ...funcs {function} The functions to chain.\r\n     * @return {function} A new function that calls the passed functions in order.\r\n     */\r\n    Common.chain = function() {\r\n        var funcs = [];\r\n\r\n        for (var i = 0; i < arguments.length; i += 1) {\r\n            var func = arguments[i];\r\n\r\n            if (func._chained) {\r\n                // flatten already chained functions\r\n                funcs.push.apply(funcs, func._chained);\r\n            } else {\r\n                funcs.push(func);\r\n            }\r\n        }\r\n\r\n        var chain = function() {\r\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\r\n            var lastResult,\r\n                args = new Array(arguments.length);\r\n\r\n            for (var i = 0, l = arguments.length; i < l; i++) {\r\n                args[i] = arguments[i];\r\n            }\r\n\r\n            for (i = 0; i < funcs.length; i += 1) {\r\n                var result = funcs[i].apply(lastResult, args);\r\n\r\n                if (typeof result !== 'undefined') {\r\n                    lastResult = result;\r\n                }\r\n            }\r\n\r\n            return lastResult;\r\n        };\r\n\r\n        chain._chained = funcs;\r\n\r\n        return chain;\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\r\n     * See also docs for `Common.chain`.\r\n     * @method chainPathBefore\r\n     * @param {} base The base object\r\n     * @param {string} path The path relative to `base`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Common.chainPathBefore = function(base, path, func) {\r\n        return Common.set(base, path, Common.chain(\r\n            func,\r\n            Common.get(base, path)\r\n        ));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\r\n     * See also docs for `Common.chain`.\r\n     * @method chainPathAfter\r\n     * @param {} base The base object\r\n     * @param {string} path The path relative to `base`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Common.chainPathAfter = function(base, path, func) {\r\n        return Common.set(base, path, Common.chain(\r\n            Common.get(base, path),\r\n            func\r\n        ));\r\n    };\r\n\r\n    /**\r\n     * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\r\n     * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\r\n     * @method setDecomp\r\n     * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\r\n     */\r\n    Common.setDecomp = function(decomp) {\r\n        Common._decomp = decomp;\r\n    };\r\n\r\n    /**\r\n     * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\r\n     * otherwise returns the global `decomp` if set.\r\n     * @method getDecomp\r\n     * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\r\n     */\r\n    Common.getDecomp = function() {\r\n        // get user provided decomp if set\r\n        var decomp = Common._decomp;\r\n\r\n        try {\r\n            // otherwise from window global\r\n            if (!decomp && typeof window !== 'undefined') {\r\n                decomp = window.decomp;\r\n            }\r\n    \r\n            // otherwise from node global\r\n            if (!decomp && typeof __webpack_require__.g !== 'undefined') {\r\n                decomp = __webpack_require__.g.decomp;\r\n            }\r\n        } catch (e) {\r\n            // decomp not available\r\n            decomp = null;\r\n        }\r\n\r\n        return decomp;\r\n    };\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\r\n*\r\n* @class Bounds\r\n*/\r\n\r\nvar Bounds = {};\r\n\r\nmodule.exports = Bounds;\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\r\n     * @method create\r\n     * @param {vertices} vertices\r\n     * @return {bounds} A new bounds object\r\n     */\r\n    Bounds.create = function(vertices) {\r\n        var bounds = { \r\n            min: { x: 0, y: 0 }, \r\n            max: { x: 0, y: 0 }\r\n        };\r\n\r\n        if (vertices)\r\n            Bounds.update(bounds, vertices);\r\n        \r\n        return bounds;\r\n    };\r\n\r\n    /**\r\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\r\n     * @method update\r\n     * @param {bounds} bounds\r\n     * @param {vertices} vertices\r\n     * @param {vector} velocity\r\n     */\r\n    Bounds.update = function(bounds, vertices, velocity) {\r\n        bounds.min.x = Infinity;\r\n        bounds.max.x = -Infinity;\r\n        bounds.min.y = Infinity;\r\n        bounds.max.y = -Infinity;\r\n\r\n        for (var i = 0; i < vertices.length; i++) {\r\n            var vertex = vertices[i];\r\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\r\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\r\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\r\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\r\n        }\r\n        \r\n        if (velocity) {\r\n            if (velocity.x > 0) {\r\n                bounds.max.x += velocity.x;\r\n            } else {\r\n                bounds.min.x += velocity.x;\r\n            }\r\n            \r\n            if (velocity.y > 0) {\r\n                bounds.max.y += velocity.y;\r\n            } else {\r\n                bounds.min.y += velocity.y;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns true if the bounds contains the given point.\r\n     * @method contains\r\n     * @param {bounds} bounds\r\n     * @param {vector} point\r\n     * @return {boolean} True if the bounds contain the point, otherwise false\r\n     */\r\n    Bounds.contains = function(bounds, point) {\r\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \r\n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\r\n    };\r\n\r\n    /**\r\n     * Returns true if the two bounds intersect.\r\n     * @method overlaps\r\n     * @param {bounds} boundsA\r\n     * @param {bounds} boundsB\r\n     * @return {boolean} True if the bounds overlap, otherwise false\r\n     */\r\n    Bounds.overlaps = function(boundsA, boundsB) {\r\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\r\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\r\n    };\r\n\r\n    /**\r\n     * Translates the bounds by the given vector.\r\n     * @method translate\r\n     * @param {bounds} bounds\r\n     * @param {vector} vector\r\n     */\r\n    Bounds.translate = function(bounds, vector) {\r\n        bounds.min.x += vector.x;\r\n        bounds.max.x += vector.x;\r\n        bounds.min.y += vector.y;\r\n        bounds.max.y += vector.y;\r\n    };\r\n\r\n    /**\r\n     * Shifts the bounds to the given position.\r\n     * @method shift\r\n     * @param {bounds} bounds\r\n     * @param {vector} position\r\n     */\r\n    Bounds.shift = function(bounds, position) {\r\n        var deltaX = bounds.max.x - bounds.min.x,\r\n            deltaY = bounds.max.y - bounds.min.y;\r\n            \r\n        bounds.min.x = position.x;\r\n        bounds.max.x = position.x + deltaX;\r\n        bounds.min.y = position.y;\r\n        bounds.max.y = position.y + deltaY;\r\n    };\r\n    \r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\r\n* Vectors are the basis of all the geometry related operations in the engine.\r\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Vector\r\n*/\r\n\r\n// TODO: consider params for reusing vector objects\r\n\r\nvar Vector = {};\r\n\r\nmodule.exports = Vector;\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new vector.\r\n     * @method create\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @return {vector} A new vector\r\n     */\r\n    Vector.create = function(x, y) {\r\n        return { x: x || 0, y: y || 0 };\r\n    };\r\n\r\n    /**\r\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\r\n     * @method clone\r\n     * @param {vector} vector\r\n     * @return {vector} A new cloned vector\r\n     */\r\n    Vector.clone = function(vector) {\r\n        return { x: vector.x, y: vector.y };\r\n    };\r\n\r\n    /**\r\n     * Returns the magnitude (length) of a vector.\r\n     * @method magnitude\r\n     * @param {vector} vector\r\n     * @return {number} The magnitude of the vector\r\n     */\r\n    Vector.magnitude = function(vector) {\r\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\r\n    };\r\n\r\n    /**\r\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\r\n     * @method magnitudeSquared\r\n     * @param {vector} vector\r\n     * @return {number} The squared magnitude of the vector\r\n     */\r\n    Vector.magnitudeSquared = function(vector) {\r\n        return (vector.x * vector.x) + (vector.y * vector.y);\r\n    };\r\n\r\n    /**\r\n     * Rotates the vector about (0, 0) by specified angle.\r\n     * @method rotate\r\n     * @param {vector} vector\r\n     * @param {number} angle\r\n     * @param {vector} [output]\r\n     * @return {vector} The vector rotated about (0, 0)\r\n     */\r\n    Vector.rotate = function(vector, angle, output) {\r\n        var cos = Math.cos(angle), sin = Math.sin(angle);\r\n        if (!output) output = {};\r\n        var x = vector.x * cos - vector.y * sin;\r\n        output.y = vector.x * sin + vector.y * cos;\r\n        output.x = x;\r\n        return output;\r\n    };\r\n\r\n    /**\r\n     * Rotates the vector about a specified point by specified angle.\r\n     * @method rotateAbout\r\n     * @param {vector} vector\r\n     * @param {number} angle\r\n     * @param {vector} point\r\n     * @param {vector} [output]\r\n     * @return {vector} A new vector rotated about the point\r\n     */\r\n    Vector.rotateAbout = function(vector, angle, point, output) {\r\n        var cos = Math.cos(angle), sin = Math.sin(angle);\r\n        if (!output) output = {};\r\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\r\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\r\n        output.x = x;\r\n        return output;\r\n    };\r\n\r\n    /**\r\n     * Normalises a vector (such that its magnitude is `1`).\r\n     * @method normalise\r\n     * @param {vector} vector\r\n     * @return {vector} A new vector normalised\r\n     */\r\n    Vector.normalise = function(vector) {\r\n        var magnitude = Vector.magnitude(vector);\r\n        if (magnitude === 0)\r\n            return { x: 0, y: 0 };\r\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\r\n    };\r\n\r\n    /**\r\n     * Returns the dot-product of two vectors.\r\n     * @method dot\r\n     * @param {vector} vectorA\r\n     * @param {vector} vectorB\r\n     * @return {number} The dot product of the two vectors\r\n     */\r\n    Vector.dot = function(vectorA, vectorB) {\r\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\r\n    };\r\n\r\n    /**\r\n     * Returns the cross-product of two vectors.\r\n     * @method cross\r\n     * @param {vector} vectorA\r\n     * @param {vector} vectorB\r\n     * @return {number} The cross product of the two vectors\r\n     */\r\n    Vector.cross = function(vectorA, vectorB) {\r\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\r\n    };\r\n\r\n    /**\r\n     * Returns the cross-product of three vectors.\r\n     * @method cross3\r\n     * @param {vector} vectorA\r\n     * @param {vector} vectorB\r\n     * @param {vector} vectorC\r\n     * @return {number} The cross product of the three vectors\r\n     */\r\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\r\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\r\n    };\r\n\r\n    /**\r\n     * Adds the two vectors.\r\n     * @method add\r\n     * @param {vector} vectorA\r\n     * @param {vector} vectorB\r\n     * @param {vector} [output]\r\n     * @return {vector} A new vector of vectorA and vectorB added\r\n     */\r\n    Vector.add = function(vectorA, vectorB, output) {\r\n        if (!output) output = {};\r\n        output.x = vectorA.x + vectorB.x;\r\n        output.y = vectorA.y + vectorB.y;\r\n        return output;\r\n    };\r\n\r\n    /**\r\n     * Subtracts the two vectors.\r\n     * @method sub\r\n     * @param {vector} vectorA\r\n     * @param {vector} vectorB\r\n     * @param {vector} [output]\r\n     * @return {vector} A new vector of vectorA and vectorB subtracted\r\n     */\r\n    Vector.sub = function(vectorA, vectorB, output) {\r\n        if (!output) output = {};\r\n        output.x = vectorA.x - vectorB.x;\r\n        output.y = vectorA.y - vectorB.y;\r\n        return output;\r\n    };\r\n\r\n    /**\r\n     * Multiplies a vector and a scalar.\r\n     * @method mult\r\n     * @param {vector} vector\r\n     * @param {number} scalar\r\n     * @return {vector} A new vector multiplied by scalar\r\n     */\r\n    Vector.mult = function(vector, scalar) {\r\n        return { x: vector.x * scalar, y: vector.y * scalar };\r\n    };\r\n\r\n    /**\r\n     * Divides a vector and a scalar.\r\n     * @method div\r\n     * @param {vector} vector\r\n     * @param {number} scalar\r\n     * @return {vector} A new vector divided by scalar\r\n     */\r\n    Vector.div = function(vector, scalar) {\r\n        return { x: vector.x / scalar, y: vector.y / scalar };\r\n    };\r\n\r\n    /**\r\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\r\n     * @method perp\r\n     * @param {vector} vector\r\n     * @param {bool} [negate=false]\r\n     * @return {vector} The perpendicular vector\r\n     */\r\n    Vector.perp = function(vector, negate) {\r\n        negate = negate === true ? -1 : 1;\r\n        return { x: negate * -vector.y, y: negate * vector.x };\r\n    };\r\n\r\n    /**\r\n     * Negates both components of a vector such that it points in the opposite direction.\r\n     * @method neg\r\n     * @param {vector} vector\r\n     * @return {vector} The negated vector\r\n     */\r\n    Vector.neg = function(vector) {\r\n        return { x: -vector.x, y: -vector.y };\r\n    };\r\n\r\n    /**\r\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\r\n     * @method angle\r\n     * @param {vector} vectorA\r\n     * @param {vector} vectorB\r\n     * @return {number} The angle in radians\r\n     */\r\n    Vector.angle = function(vectorA, vectorB) {\r\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\r\n    };\r\n\r\n    /**\r\n     * Temporary vector pool (not thread-safe).\r\n     * @property _temp\r\n     * @type {vector[]}\r\n     * @private\r\n     */\r\n    Vector._temp = [\r\n        Vector.create(), Vector.create(), \r\n        Vector.create(), Vector.create(), \r\n        Vector.create(), Vector.create()\r\n    ];\r\n\r\n})();\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports, __nested_webpack_require_36535__) {\r\n\r\n/**\r\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\r\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\r\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Vertices\r\n*/\r\n\r\nvar Vertices = {};\r\n\r\nmodule.exports = Vertices;\r\n\r\nvar Vector = __nested_webpack_require_36535__(2);\r\nvar Common = __nested_webpack_require_36535__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new set of `Matter.Body` compatible vertices.\r\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\r\n     *\r\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\r\n     *\r\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\r\n     * but with some additional references required for efficient collision detection routines.\r\n     *\r\n     * Vertices must be specified in clockwise order.\r\n     *\r\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\r\n     *\r\n     * @method create\r\n     * @param {vector[]} points\r\n     * @param {body} body\r\n     */\r\n    Vertices.create = function(points, body) {\r\n        var vertices = [];\r\n\r\n        for (var i = 0; i < points.length; i++) {\r\n            var point = points[i],\r\n                vertex = {\r\n                    x: point.x,\r\n                    y: point.y,\r\n                    index: i,\r\n                    body: body,\r\n                    isInternal: false\r\n                };\r\n\r\n            vertices.push(vertex);\r\n        }\r\n\r\n        return vertices;\r\n    };\r\n\r\n    /**\r\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \r\n     * into a `Matter.Vertices` object for the given `Matter.Body`.\r\n     * For parsing SVG paths, see `Svg.pathToVertices`.\r\n     * @method fromPath\r\n     * @param {string} path\r\n     * @param {body} body\r\n     * @return {vertices} vertices\r\n     */\r\n    Vertices.fromPath = function(path, body) {\r\n        var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\r\n            points = [];\r\n\r\n        path.replace(pathPattern, function(match, x, y) {\r\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\r\n        });\r\n\r\n        return Vertices.create(points, body);\r\n    };\r\n\r\n    /**\r\n     * Returns the centre (centroid) of the set of vertices.\r\n     * @method centre\r\n     * @param {vertices} vertices\r\n     * @return {vector} The centre point\r\n     */\r\n    Vertices.centre = function(vertices) {\r\n        var area = Vertices.area(vertices, true),\r\n            centre = { x: 0, y: 0 },\r\n            cross,\r\n            temp,\r\n            j;\r\n\r\n        for (var i = 0; i < vertices.length; i++) {\r\n            j = (i + 1) % vertices.length;\r\n            cross = Vector.cross(vertices[i], vertices[j]);\r\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\r\n            centre = Vector.add(centre, temp);\r\n        }\r\n\r\n        return Vector.div(centre, 6 * area);\r\n    };\r\n\r\n    /**\r\n     * Returns the average (mean) of the set of vertices.\r\n     * @method mean\r\n     * @param {vertices} vertices\r\n     * @return {vector} The average point\r\n     */\r\n    Vertices.mean = function(vertices) {\r\n        var average = { x: 0, y: 0 };\r\n\r\n        for (var i = 0; i < vertices.length; i++) {\r\n            average.x += vertices[i].x;\r\n            average.y += vertices[i].y;\r\n        }\r\n\r\n        return Vector.div(average, vertices.length);\r\n    };\r\n\r\n    /**\r\n     * Returns the area of the set of vertices.\r\n     * @method area\r\n     * @param {vertices} vertices\r\n     * @param {bool} signed\r\n     * @return {number} The area\r\n     */\r\n    Vertices.area = function(vertices, signed) {\r\n        var area = 0,\r\n            j = vertices.length - 1;\r\n\r\n        for (var i = 0; i < vertices.length; i++) {\r\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\r\n            j = i;\r\n        }\r\n\r\n        if (signed)\r\n            return area / 2;\r\n\r\n        return Math.abs(area) / 2;\r\n    };\r\n\r\n    /**\r\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\r\n     * @method inertia\r\n     * @param {vertices} vertices\r\n     * @param {number} mass\r\n     * @return {number} The polygon's moment of inertia\r\n     */\r\n    Vertices.inertia = function(vertices, mass) {\r\n        var numerator = 0,\r\n            denominator = 0,\r\n            v = vertices,\r\n            cross,\r\n            j;\r\n\r\n        // find the polygon's moment of inertia, using second moment of area\r\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\r\n        for (var n = 0; n < v.length; n++) {\r\n            j = (n + 1) % v.length;\r\n            cross = Math.abs(Vector.cross(v[j], v[n]));\r\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\r\n            denominator += cross;\r\n        }\r\n\r\n        return (mass / 6) * (numerator / denominator);\r\n    };\r\n\r\n    /**\r\n     * Translates the set of vertices in-place.\r\n     * @method translate\r\n     * @param {vertices} vertices\r\n     * @param {vector} vector\r\n     * @param {number} scalar\r\n     */\r\n    Vertices.translate = function(vertices, vector, scalar) {\r\n        scalar = typeof scalar !== 'undefined' ? scalar : 1;\r\n\r\n        var verticesLength = vertices.length,\r\n            translateX = vector.x * scalar,\r\n            translateY = vector.y * scalar,\r\n            i;\r\n        \r\n        for (i = 0; i < verticesLength; i++) {\r\n            vertices[i].x += translateX;\r\n            vertices[i].y += translateY;\r\n        }\r\n\r\n        return vertices;\r\n    };\r\n\r\n    /**\r\n     * Rotates the set of vertices in-place.\r\n     * @method rotate\r\n     * @param {vertices} vertices\r\n     * @param {number} angle\r\n     * @param {vector} point\r\n     */\r\n    Vertices.rotate = function(vertices, angle, point) {\r\n        if (angle === 0)\r\n            return;\r\n\r\n        var cos = Math.cos(angle),\r\n            sin = Math.sin(angle),\r\n            pointX = point.x,\r\n            pointY = point.y,\r\n            verticesLength = vertices.length,\r\n            vertex,\r\n            dx,\r\n            dy,\r\n            i;\r\n\r\n        for (i = 0; i < verticesLength; i++) {\r\n            vertex = vertices[i];\r\n            dx = vertex.x - pointX;\r\n            dy = vertex.y - pointY;\r\n            vertex.x = pointX + (dx * cos - dy * sin);\r\n            vertex.y = pointY + (dx * sin + dy * cos);\r\n        }\r\n\r\n        return vertices;\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if the `point` is inside the set of `vertices`.\r\n     * @method contains\r\n     * @param {vertices} vertices\r\n     * @param {vector} point\r\n     * @return {boolean} True if the vertices contains point, otherwise false\r\n     */\r\n    Vertices.contains = function(vertices, point) {\r\n        var pointX = point.x,\r\n            pointY = point.y,\r\n            verticesLength = vertices.length,\r\n            vertex = vertices[verticesLength - 1],\r\n            nextVertex;\r\n\r\n        for (var i = 0; i < verticesLength; i++) {\r\n            nextVertex = vertices[i];\r\n\r\n            if ((pointX - vertex.x) * (nextVertex.y - vertex.y) \r\n                + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) {\r\n                return false;\r\n            }\r\n\r\n            vertex = nextVertex;\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Scales the vertices from a point (default is centre) in-place.\r\n     * @method scale\r\n     * @param {vertices} vertices\r\n     * @param {number} scaleX\r\n     * @param {number} scaleY\r\n     * @param {vector} point\r\n     */\r\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\r\n        if (scaleX === 1 && scaleY === 1)\r\n            return vertices;\r\n\r\n        point = point || Vertices.centre(vertices);\r\n\r\n        var vertex,\r\n            delta;\r\n\r\n        for (var i = 0; i < vertices.length; i++) {\r\n            vertex = vertices[i];\r\n            delta = Vector.sub(vertex, point);\r\n            vertices[i].x = point.x + delta.x * scaleX;\r\n            vertices[i].y = point.y + delta.y * scaleY;\r\n        }\r\n\r\n        return vertices;\r\n    };\r\n\r\n    /**\r\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\r\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\r\n     * @method chamfer\r\n     * @param {vertices} vertices\r\n     * @param {number[]} radius\r\n     * @param {number} quality\r\n     * @param {number} qualityMin\r\n     * @param {number} qualityMax\r\n     */\r\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\r\n        if (typeof radius === 'number') {\r\n            radius = [radius];\r\n        } else {\r\n            radius = radius || [8];\r\n        }\r\n\r\n        // quality defaults to -1, which is auto\r\n        quality = (typeof quality !== 'undefined') ? quality : -1;\r\n        qualityMin = qualityMin || 2;\r\n        qualityMax = qualityMax || 14;\r\n\r\n        var newVertices = [];\r\n\r\n        for (var i = 0; i < vertices.length; i++) {\r\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\r\n                vertex = vertices[i],\r\n                nextVertex = vertices[(i + 1) % vertices.length],\r\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\r\n\r\n            if (currentRadius === 0) {\r\n                newVertices.push(vertex);\r\n                continue;\r\n            }\r\n\r\n            var prevNormal = Vector.normalise({ \r\n                x: vertex.y - prevVertex.y, \r\n                y: prevVertex.x - vertex.x\r\n            });\r\n\r\n            var nextNormal = Vector.normalise({ \r\n                x: nextVertex.y - vertex.y, \r\n                y: vertex.x - nextVertex.x\r\n            });\r\n\r\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\r\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\r\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\r\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\r\n\r\n            var precision = quality;\r\n\r\n            if (quality === -1) {\r\n                // automatically decide precision\r\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\r\n            }\r\n\r\n            precision = Common.clamp(precision, qualityMin, qualityMax);\r\n\r\n            // use an even value for precision, more likely to reduce axes by using symmetry\r\n            if (precision % 2 === 1)\r\n                precision += 1;\r\n\r\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\r\n                theta = alpha / precision;\r\n\r\n            for (var j = 0; j < precision; j++) {\r\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\r\n            }\r\n        }\r\n\r\n        return newVertices;\r\n    };\r\n\r\n    /**\r\n     * Sorts the input vertices into clockwise order in place.\r\n     * @method clockwiseSort\r\n     * @param {vertices} vertices\r\n     * @return {vertices} vertices\r\n     */\r\n    Vertices.clockwiseSort = function(vertices) {\r\n        var centre = Vertices.mean(vertices);\r\n\r\n        vertices.sort(function(vertexA, vertexB) {\r\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\r\n        });\r\n\r\n        return vertices;\r\n    };\r\n\r\n    /**\r\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\r\n     * @method isConvex\r\n     * @param {vertices} vertices\r\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\r\n     */\r\n    Vertices.isConvex = function(vertices) {\r\n        // http://paulbourke.net/geometry/polygonmesh/\r\n        // Copyright (c) Paul Bourke (use permitted)\r\n\r\n        var flag = 0,\r\n            n = vertices.length,\r\n            i,\r\n            j,\r\n            k,\r\n            z;\r\n\r\n        if (n < 3)\r\n            return null;\r\n\r\n        for (i = 0; i < n; i++) {\r\n            j = (i + 1) % n;\r\n            k = (i + 2) % n;\r\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\r\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\r\n\r\n            if (z < 0) {\r\n                flag |= 1;\r\n            } else if (z > 0) {\r\n                flag |= 2;\r\n            }\r\n\r\n            if (flag === 3) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (flag !== 0){\r\n            return true;\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns the convex hull of the input vertices as a new array of points.\r\n     * @method hull\r\n     * @param {vertices} vertices\r\n     * @return [vertex] vertices\r\n     */\r\n    Vertices.hull = function(vertices) {\r\n        // http://geomalgorithms.com/a10-_hull-1.html\r\n\r\n        var upper = [],\r\n            lower = [], \r\n            vertex,\r\n            i;\r\n\r\n        // sort vertices on x-axis (y-axis for ties)\r\n        vertices = vertices.slice(0);\r\n        vertices.sort(function(vertexA, vertexB) {\r\n            var dx = vertexA.x - vertexB.x;\r\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\r\n        });\r\n\r\n        // build lower hull\r\n        for (i = 0; i < vertices.length; i += 1) {\r\n            vertex = vertices[i];\r\n\r\n            while (lower.length >= 2 \r\n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\r\n                lower.pop();\r\n            }\r\n\r\n            lower.push(vertex);\r\n        }\r\n\r\n        // build upper hull\r\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\r\n            vertex = vertices[i];\r\n\r\n            while (upper.length >= 2 \r\n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\r\n                upper.pop();\r\n            }\r\n\r\n            upper.push(vertex);\r\n        }\r\n\r\n        // concatenation of the lower and upper hulls gives the convex hull\r\n        // omit last points because they are repeated at the beginning of the other list\r\n        upper.pop();\r\n        lower.pop();\r\n\r\n        return upper.concat(lower);\r\n    };\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports, __nested_webpack_require_51125__) {\r\n\r\n/**\r\n* The `Matter.Body` module contains methods for creating and manipulating rigid bodies.\r\n* For creating bodies with common configurations such as rectangles, circles and other polygons see the module `Matter.Bodies`.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n\r\n* @class Body\r\n*/\r\n\r\nvar Body = {};\r\n\r\nmodule.exports = Body;\r\n\r\nvar Vertices = __nested_webpack_require_51125__(3);\r\nvar Vector = __nested_webpack_require_51125__(2);\r\nvar Sleeping = __nested_webpack_require_51125__(7);\r\nvar Common = __nested_webpack_require_51125__(0);\r\nvar Bounds = __nested_webpack_require_51125__(1);\r\nvar Axes = __nested_webpack_require_51125__(11);\r\n\r\n(function() {\r\n\r\n    Body._timeCorrection = true;\r\n    Body._inertiaScale = 4;\r\n    Body._nextCollidingGroupId = 1;\r\n    Body._nextNonCollidingGroupId = -1;\r\n    Body._nextCategory = 0x0001;\r\n    Body._baseDelta = 1000 / 60;\r\n\r\n    /**\r\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\r\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\r\n     * Vertices must be specified in clockwise order.\r\n     * See the properties section below for detailed information on what you can pass via the `options` object.\r\n     * @method create\r\n     * @param {} options\r\n     * @return {body} body\r\n     */\r\n    Body.create = function(options) {\r\n        var defaults = {\r\n            id: Common.nextId(),\r\n            type: 'body',\r\n            label: 'Body',\r\n            parts: [],\r\n            plugin: {},\r\n            angle: 0,\r\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\r\n            position: { x: 0, y: 0 },\r\n            force: { x: 0, y: 0 },\r\n            torque: 0,\r\n            positionImpulse: { x: 0, y: 0 },\r\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\r\n            totalContacts: 0,\r\n            speed: 0,\r\n            angularSpeed: 0,\r\n            velocity: { x: 0, y: 0 },\r\n            angularVelocity: 0,\r\n            isSensor: false,\r\n            isStatic: false,\r\n            isSleeping: false,\r\n            motion: 0,\r\n            sleepThreshold: 60,\r\n            density: 0.001,\r\n            restitution: 0,\r\n            friction: 0.1,\r\n            frictionStatic: 0.5,\r\n            frictionAir: 0.01,\r\n            collisionFilter: {\r\n                category: 0x0001,\r\n                mask: 0xFFFFFFFF,\r\n                group: 0\r\n            },\r\n            slop: 0.05,\r\n            timeScale: 1,\r\n            render: {\r\n                visible: true,\r\n                opacity: 1,\r\n                strokeStyle: null,\r\n                fillStyle: null,\r\n                lineWidth: null,\r\n                sprite: {\r\n                    xScale: 1,\r\n                    yScale: 1,\r\n                    xOffset: 0,\r\n                    yOffset: 0\r\n                }\r\n            },\r\n            events: null,\r\n            bounds: null,\r\n            chamfer: null,\r\n            circleRadius: 0,\r\n            positionPrev: null,\r\n            anglePrev: 0,\r\n            parent: null,\r\n            axes: null,\r\n            area: 0,\r\n            mass: 0,\r\n            inertia: 0,\r\n            deltaTime: 1000 / 60,\r\n            _original: null\r\n        };\r\n\r\n        var body = Common.extend(defaults, options);\r\n\r\n        _initProperties(body, options);\r\n\r\n        return body;\r\n    };\r\n\r\n    /**\r\n     * Returns the next unique group index for which bodies will collide.\r\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\r\n     * See `body.collisionFilter` for more information.\r\n     * @method nextGroup\r\n     * @param {bool} [isNonColliding=false]\r\n     * @return {Number} Unique group index\r\n     */\r\n    Body.nextGroup = function(isNonColliding) {\r\n        if (isNonColliding)\r\n            return Body._nextNonCollidingGroupId--;\r\n\r\n        return Body._nextCollidingGroupId++;\r\n    };\r\n\r\n    /**\r\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\r\n     * There are 32 available. See `body.collisionFilter` for more information.\r\n     * @method nextCategory\r\n     * @return {Number} Unique category bitfield\r\n     */\r\n    Body.nextCategory = function() {\r\n        Body._nextCategory = Body._nextCategory << 1;\r\n        return Body._nextCategory;\r\n    };\r\n\r\n    /**\r\n     * Initialises body properties.\r\n     * @method _initProperties\r\n     * @private\r\n     * @param {body} body\r\n     * @param {} [options]\r\n     */\r\n    var _initProperties = function(body, options) {\r\n        options = options || {};\r\n\r\n        // init required properties (order is important)\r\n        Body.set(body, {\r\n            bounds: body.bounds || Bounds.create(body.vertices),\r\n            positionPrev: body.positionPrev || Vector.clone(body.position),\r\n            anglePrev: body.anglePrev || body.angle,\r\n            vertices: body.vertices,\r\n            parts: body.parts || [body],\r\n            isStatic: body.isStatic,\r\n            isSleeping: body.isSleeping,\r\n            parent: body.parent || body\r\n        });\r\n\r\n        Vertices.rotate(body.vertices, body.angle, body.position);\r\n        Axes.rotate(body.axes, body.angle);\r\n        Bounds.update(body.bounds, body.vertices, body.velocity);\r\n\r\n        // allow options to override the automatically calculated properties\r\n        Body.set(body, {\r\n            axes: options.axes || body.axes,\r\n            area: options.area || body.area,\r\n            mass: options.mass || body.mass,\r\n            inertia: options.inertia || body.inertia\r\n        });\r\n\r\n        // render properties\r\n        var defaultFillStyle = (body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1'])),\r\n            defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\r\n            defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\r\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\r\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\r\n        body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\r\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\r\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\r\n    };\r\n\r\n    /**\r\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\r\n     * Prefer to use the actual setter functions in performance critical situations.\r\n     * @method set\r\n     * @param {body} body\r\n     * @param {} settings A property name (or map of properties and values) to set on the body.\r\n     * @param {} value The value to set if `settings` is a single property name.\r\n     */\r\n    Body.set = function(body, settings, value) {\r\n        var property;\r\n\r\n        if (typeof settings === 'string') {\r\n            property = settings;\r\n            settings = {};\r\n            settings[property] = value;\r\n        }\r\n\r\n        for (property in settings) {\r\n            if (!Object.prototype.hasOwnProperty.call(settings, property))\r\n                continue;\r\n\r\n            value = settings[property];\r\n            switch (property) {\r\n\r\n            case 'isStatic':\r\n                Body.setStatic(body, value);\r\n                break;\r\n            case 'isSleeping':\r\n                Sleeping.set(body, value);\r\n                break;\r\n            case 'mass':\r\n                Body.setMass(body, value);\r\n                break;\r\n            case 'density':\r\n                Body.setDensity(body, value);\r\n                break;\r\n            case 'inertia':\r\n                Body.setInertia(body, value);\r\n                break;\r\n            case 'vertices':\r\n                Body.setVertices(body, value);\r\n                break;\r\n            case 'position':\r\n                Body.setPosition(body, value);\r\n                break;\r\n            case 'angle':\r\n                Body.setAngle(body, value);\r\n                break;\r\n            case 'velocity':\r\n                Body.setVelocity(body, value);\r\n                break;\r\n            case 'angularVelocity':\r\n                Body.setAngularVelocity(body, value);\r\n                break;\r\n            case 'speed':\r\n                Body.setSpeed(body, value);\r\n                break;\r\n            case 'angularSpeed':\r\n                Body.setAngularSpeed(body, value);\r\n                break;\r\n            case 'parts':\r\n                Body.setParts(body, value);\r\n                break;\r\n            case 'centre':\r\n                Body.setCentre(body, value);\r\n                break;\r\n            default:\r\n                body[property] = value;\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\r\n     * @method setStatic\r\n     * @param {body} body\r\n     * @param {bool} isStatic\r\n     */\r\n    Body.setStatic = function(body, isStatic) {\r\n        for (var i = 0; i < body.parts.length; i++) {\r\n            var part = body.parts[i];\r\n            part.isStatic = isStatic;\r\n\r\n            if (isStatic) {\r\n                part._original = {\r\n                    restitution: part.restitution,\r\n                    friction: part.friction,\r\n                    mass: part.mass,\r\n                    inertia: part.inertia,\r\n                    density: part.density,\r\n                    inverseMass: part.inverseMass,\r\n                    inverseInertia: part.inverseInertia\r\n                };\r\n\r\n                part.restitution = 0;\r\n                part.friction = 1;\r\n                part.mass = part.inertia = part.density = Infinity;\r\n                part.inverseMass = part.inverseInertia = 0;\r\n\r\n                part.positionPrev.x = part.position.x;\r\n                part.positionPrev.y = part.position.y;\r\n                part.anglePrev = part.angle;\r\n                part.angularVelocity = 0;\r\n                part.speed = 0;\r\n                part.angularSpeed = 0;\r\n                part.motion = 0;\r\n            } else if (part._original) {\r\n                part.restitution = part._original.restitution;\r\n                part.friction = part._original.friction;\r\n                part.mass = part._original.mass;\r\n                part.inertia = part._original.inertia;\r\n                part.density = part._original.density;\r\n                part.inverseMass = part._original.inverseMass;\r\n                part.inverseInertia = part._original.inverseInertia;\r\n\r\n                part._original = null;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\r\n     * @method setMass\r\n     * @param {body} body\r\n     * @param {number} mass\r\n     */\r\n    Body.setMass = function(body, mass) {\r\n        var moment = body.inertia / (body.mass / 6);\r\n        body.inertia = moment * (mass / 6);\r\n        body.inverseInertia = 1 / body.inertia;\r\n\r\n        body.mass = mass;\r\n        body.inverseMass = 1 / body.mass;\r\n        body.density = body.mass / body.area;\r\n    };\r\n\r\n    /**\r\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\r\n     * @method setDensity\r\n     * @param {body} body\r\n     * @param {number} density\r\n     */\r\n    Body.setDensity = function(body, density) {\r\n        Body.setMass(body, density * body.area);\r\n        body.density = density;\r\n    };\r\n\r\n    /**\r\n     * Sets the moment of inertia of the body. This is the second moment of area in two dimensions.\r\n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\r\n     * @method setInertia\r\n     * @param {body} body\r\n     * @param {number} inertia\r\n     */\r\n    Body.setInertia = function(body, inertia) {\r\n        body.inertia = inertia;\r\n        body.inverseInertia = 1 / body.inertia;\r\n    };\r\n\r\n    /**\r\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\r\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\r\n     * They are then automatically translated to world space based on `body.position`.\r\n     *\r\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\r\n     * Vertices must form a convex hull. Concave vertices must be decomposed into convex parts.\r\n     * \r\n     * @method setVertices\r\n     * @param {body} body\r\n     * @param {vector[]} vertices\r\n     */\r\n    Body.setVertices = function(body, vertices) {\r\n        // change vertices\r\n        if (vertices[0].body === body) {\r\n            body.vertices = vertices;\r\n        } else {\r\n            body.vertices = Vertices.create(vertices, body);\r\n        }\r\n\r\n        // update properties\r\n        body.axes = Axes.fromVertices(body.vertices);\r\n        body.area = Vertices.area(body.vertices);\r\n        Body.setMass(body, body.density * body.area);\r\n\r\n        // orient vertices around the centre of mass at origin (0, 0)\r\n        var centre = Vertices.centre(body.vertices);\r\n        Vertices.translate(body.vertices, centre, -1);\r\n\r\n        // update inertia while vertices are at origin (0, 0)\r\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\r\n\r\n        // update geometry\r\n        Vertices.translate(body.vertices, body.position);\r\n        Bounds.update(body.bounds, body.vertices, body.velocity);\r\n    };\r\n\r\n    /**\r\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\r\n     * Each part will have its parent set to `body`.\r\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\r\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\r\n     * @method setParts\r\n     * @param {body} body\r\n     * @param {body[]} parts\r\n     * @param {bool} [autoHull=true]\r\n     */\r\n    Body.setParts = function(body, parts, autoHull) {\r\n        var i;\r\n\r\n        // add all the parts, ensuring that the first part is always the parent body\r\n        parts = parts.slice(0);\r\n        body.parts.length = 0;\r\n        body.parts.push(body);\r\n        body.parent = body;\r\n\r\n        for (i = 0; i < parts.length; i++) {\r\n            var part = parts[i];\r\n            if (part !== body) {\r\n                part.parent = body;\r\n                body.parts.push(part);\r\n            }\r\n        }\r\n\r\n        if (body.parts.length === 1)\r\n            return;\r\n\r\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\r\n\r\n        // find the convex hull of all parts to set on the parent body\r\n        if (autoHull) {\r\n            var vertices = [];\r\n            for (i = 0; i < parts.length; i++) {\r\n                vertices = vertices.concat(parts[i].vertices);\r\n            }\r\n\r\n            Vertices.clockwiseSort(vertices);\r\n\r\n            var hull = Vertices.hull(vertices),\r\n                hullCentre = Vertices.centre(hull);\r\n\r\n            Body.setVertices(body, hull);\r\n            Vertices.translate(body.vertices, hullCentre);\r\n        }\r\n\r\n        // sum the properties of all compound parts of the parent body\r\n        var total = Body._totalProperties(body);\r\n\r\n        body.area = total.area;\r\n        body.parent = body;\r\n        body.position.x = total.centre.x;\r\n        body.position.y = total.centre.y;\r\n        body.positionPrev.x = total.centre.x;\r\n        body.positionPrev.y = total.centre.y;\r\n\r\n        Body.setMass(body, total.mass);\r\n        Body.setInertia(body, total.inertia);\r\n        Body.setPosition(body, total.centre);\r\n    };\r\n\r\n    /**\r\n     * Set the centre of mass of the body. \r\n     * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\r\n     * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\r\n     * This is equal to moving `body.position` but not the `body.vertices`.\r\n     * Invalid if the `centre` falls outside the body's convex hull.\r\n     * @method setCentre\r\n     * @param {body} body\r\n     * @param {vector} centre\r\n     * @param {bool} relative\r\n     */\r\n    Body.setCentre = function(body, centre, relative) {\r\n        if (!relative) {\r\n            body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\r\n            body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\r\n            body.position.x = centre.x;\r\n            body.position.y = centre.y;\r\n        } else {\r\n            body.positionPrev.x += centre.x;\r\n            body.positionPrev.y += centre.y;\r\n            body.position.x += centre.x;\r\n            body.position.y += centre.y;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Sets the position of the body. By default velocity is unchanged.\r\n     * If `updateVelocity` is `true` then velocity is inferred from the change in position.\r\n     * @method setPosition\r\n     * @param {body} body\r\n     * @param {vector} position\r\n     * @param {boolean} [updateVelocity=false]\r\n     */\r\n    Body.setPosition = function(body, position, updateVelocity) {\r\n        var delta = Vector.sub(position, body.position);\r\n\r\n        if (updateVelocity) {\r\n            body.positionPrev.x = body.position.x;\r\n            body.positionPrev.y = body.position.y;\r\n            body.velocity.x = delta.x;\r\n            body.velocity.y = delta.y;\r\n            body.speed = Vector.magnitude(delta);\r\n        } else {\r\n            body.positionPrev.x += delta.x;\r\n            body.positionPrev.y += delta.y;\r\n        }\r\n\r\n        for (var i = 0; i < body.parts.length; i++) {\r\n            var part = body.parts[i];\r\n            part.position.x += delta.x;\r\n            part.position.y += delta.y;\r\n            Vertices.translate(part.vertices, delta);\r\n            Bounds.update(part.bounds, part.vertices, body.velocity);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Sets the angle of the body. By default angular velocity is unchanged.\r\n     * If `updateVelocity` is `true` then angular velocity is inferred from the change in angle.\r\n     * @method setAngle\r\n     * @param {body} body\r\n     * @param {number} angle\r\n     * @param {boolean} [updateVelocity=false]\r\n     */\r\n    Body.setAngle = function(body, angle, updateVelocity) {\r\n        var delta = angle - body.angle;\r\n        \r\n        if (updateVelocity) {\r\n            body.anglePrev = body.angle;\r\n            body.angularVelocity = delta;\r\n            body.angularSpeed = Math.abs(delta);\r\n        } else {\r\n            body.anglePrev += delta;\r\n        }\r\n\r\n        for (var i = 0; i < body.parts.length; i++) {\r\n            var part = body.parts[i];\r\n            part.angle += delta;\r\n            Vertices.rotate(part.vertices, delta, body.position);\r\n            Axes.rotate(part.axes, delta);\r\n            Bounds.update(part.bounds, part.vertices, body.velocity);\r\n            if (i > 0) {\r\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Sets the current linear velocity of the body.  \r\n     * Affects body speed.\r\n     * @method setVelocity\r\n     * @param {body} body\r\n     * @param {vector} velocity\r\n     */\r\n    Body.setVelocity = function(body, velocity) {\r\n        var timeScale = body.deltaTime / Body._baseDelta;\r\n        body.positionPrev.x = body.position.x - velocity.x * timeScale;\r\n        body.positionPrev.y = body.position.y - velocity.y * timeScale;\r\n        body.velocity.x = (body.position.x - body.positionPrev.x) / timeScale;\r\n        body.velocity.y = (body.position.y - body.positionPrev.y) / timeScale;\r\n        body.speed = Vector.magnitude(body.velocity);\r\n    };\r\n\r\n    /**\r\n     * Gets the current linear velocity of the body.\r\n     * @method getVelocity\r\n     * @param {body} body\r\n     * @return {vector} velocity\r\n     */\r\n    Body.getVelocity = function(body) {\r\n        var timeScale = Body._baseDelta / body.deltaTime;\r\n\r\n        return {\r\n            x: (body.position.x - body.positionPrev.x) * timeScale,\r\n            y: (body.position.y - body.positionPrev.y) * timeScale\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Gets the current linear speed of the body.  \r\n     * Equivalent to the magnitude of its velocity.\r\n     * @method getSpeed\r\n     * @param {body} body\r\n     * @return {number} speed\r\n     */\r\n    Body.getSpeed = function(body) {\r\n        return Vector.magnitude(Body.getVelocity(body));\r\n    };\r\n\r\n    /**\r\n     * Sets the current linear speed of the body.  \r\n     * Direction is maintained. Affects body velocity.\r\n     * @method setSpeed\r\n     * @param {body} body\r\n     * @param {number} speed\r\n     */\r\n    Body.setSpeed = function(body, speed) {\r\n        Body.setVelocity(body, Vector.mult(Vector.normalise(Body.getVelocity(body)), speed));\r\n    };\r\n\r\n    /**\r\n     * Sets the current rotational velocity of the body.  \r\n     * Affects body angular speed.\r\n     * @method setAngularVelocity\r\n     * @param {body} body\r\n     * @param {number} velocity\r\n     */\r\n    Body.setAngularVelocity = function(body, velocity) {\r\n        var timeScale = body.deltaTime / Body._baseDelta;\r\n        body.anglePrev = body.angle - velocity * timeScale;\r\n        body.angularVelocity = (body.angle - body.anglePrev) / timeScale;\r\n        body.angularSpeed = Math.abs(body.angularVelocity);\r\n    };\r\n\r\n    /**\r\n     * Gets the current rotational velocity of the body.\r\n     * @method getAngularVelocity\r\n     * @param {body} body\r\n     * @return {number} angular velocity\r\n     */\r\n    Body.getAngularVelocity = function(body) {\r\n        return (body.angle - body.anglePrev) * Body._baseDelta / body.deltaTime;\r\n    };\r\n\r\n    /**\r\n     * Gets the current rotational speed of the body.  \r\n     * Equivalent to the magnitude of its angular velocity.\r\n     * @method getAngularSpeed\r\n     * @param {body} body\r\n     * @return {number} angular speed\r\n     */\r\n    Body.getAngularSpeed = function(body) {\r\n        return Math.abs(Body.getAngularVelocity(body));\r\n    };\r\n\r\n    /**\r\n     * Sets the current rotational speed of the body.  \r\n     * Direction is maintained. Affects body angular velocity.\r\n     * @method setAngularSpeed\r\n     * @param {body} body\r\n     * @param {number} speed\r\n     */\r\n    Body.setAngularSpeed = function(body, speed) {\r\n        Body.setAngularVelocity(body, Common.sign(Body.getAngularVelocity(body)) * speed);\r\n    };\r\n\r\n    /**\r\n     * Moves a body by a given vector relative to its current position. By default velocity is unchanged.\r\n     * If `updateVelocity` is `true` then velocity is inferred from the change in position.\r\n     * @method translate\r\n     * @param {body} body\r\n     * @param {vector} translation\r\n     * @param {boolean} [updateVelocity=false]\r\n     */\r\n    Body.translate = function(body, translation, updateVelocity) {\r\n        Body.setPosition(body, Vector.add(body.position, translation), updateVelocity);\r\n    };\r\n\r\n    /**\r\n     * Rotates a body by a given angle relative to its current angle. By default angular velocity is unchanged.\r\n     * If `updateVelocity` is `true` then angular velocity is inferred from the change in angle.\r\n     * @method rotate\r\n     * @param {body} body\r\n     * @param {number} rotation\r\n     * @param {vector} [point]\r\n     * @param {boolean} [updateVelocity=false]\r\n     */\r\n    Body.rotate = function(body, rotation, point, updateVelocity) {\r\n        if (!point) {\r\n            Body.setAngle(body, body.angle + rotation, updateVelocity);\r\n        } else {\r\n            var cos = Math.cos(rotation),\r\n                sin = Math.sin(rotation),\r\n                dx = body.position.x - point.x,\r\n                dy = body.position.y - point.y;\r\n                \r\n            Body.setPosition(body, {\r\n                x: point.x + (dx * cos - dy * sin),\r\n                y: point.y + (dx * sin + dy * cos)\r\n            }, updateVelocity);\r\n\r\n            Body.setAngle(body, body.angle + rotation, updateVelocity);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\r\n     * @method scale\r\n     * @param {body} body\r\n     * @param {number} scaleX\r\n     * @param {number} scaleY\r\n     * @param {vector} [point]\r\n     */\r\n    Body.scale = function(body, scaleX, scaleY, point) {\r\n        var totalArea = 0,\r\n            totalInertia = 0;\r\n\r\n        point = point || body.position;\r\n\r\n        for (var i = 0; i < body.parts.length; i++) {\r\n            var part = body.parts[i];\r\n\r\n            // scale vertices\r\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\r\n\r\n            // update properties\r\n            part.axes = Axes.fromVertices(part.vertices);\r\n            part.area = Vertices.area(part.vertices);\r\n            Body.setMass(part, body.density * part.area);\r\n\r\n            // update inertia (requires vertices to be at origin)\r\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\r\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\r\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\r\n\r\n            if (i > 0) {\r\n                totalArea += part.area;\r\n                totalInertia += part.inertia;\r\n            }\r\n\r\n            // scale position\r\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\r\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\r\n\r\n            // update bounds\r\n            Bounds.update(part.bounds, part.vertices, body.velocity);\r\n        }\r\n\r\n        // handle parent body\r\n        if (body.parts.length > 1) {\r\n            body.area = totalArea;\r\n\r\n            if (!body.isStatic) {\r\n                Body.setMass(body, body.density * totalArea);\r\n                Body.setInertia(body, totalInertia);\r\n            }\r\n        }\r\n\r\n        // handle circles\r\n        if (body.circleRadius) { \r\n            if (scaleX === scaleY) {\r\n                body.circleRadius *= scaleX;\r\n            } else {\r\n                // body is no longer a circle\r\n                body.circleRadius = null;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Performs an update by integrating the equations of motion on the `body`.\r\n     * This is applied every update by `Matter.Engine` automatically.\r\n     * @method update\r\n     * @param {body} body\r\n     * @param {number} [deltaTime=16.666]\r\n     */\r\n    Body.update = function(body, deltaTime) {\r\n        deltaTime = (typeof deltaTime !== 'undefined' ? deltaTime : (1000 / 60)) * body.timeScale;\r\n\r\n        var deltaTimeSquared = deltaTime * deltaTime,\r\n            correction = Body._timeCorrection ? deltaTime / (body.deltaTime || deltaTime) : 1;\r\n\r\n        // from the previous step\r\n        var frictionAir = 1 - body.frictionAir * (deltaTime / Common._baseDelta),\r\n            velocityPrevX = (body.position.x - body.positionPrev.x) * correction,\r\n            velocityPrevY = (body.position.y - body.positionPrev.y) * correction;\r\n\r\n        // update velocity with Verlet integration\r\n        body.velocity.x = (velocityPrevX * frictionAir) + (body.force.x / body.mass) * deltaTimeSquared;\r\n        body.velocity.y = (velocityPrevY * frictionAir) + (body.force.y / body.mass) * deltaTimeSquared;\r\n\r\n        body.positionPrev.x = body.position.x;\r\n        body.positionPrev.y = body.position.y;\r\n        body.position.x += body.velocity.x;\r\n        body.position.y += body.velocity.y;\r\n        body.deltaTime = deltaTime;\r\n\r\n        // update angular velocity with Verlet integration\r\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\r\n        body.anglePrev = body.angle;\r\n        body.angle += body.angularVelocity;\r\n\r\n        // transform the body geometry\r\n        for (var i = 0; i < body.parts.length; i++) {\r\n            var part = body.parts[i];\r\n\r\n            Vertices.translate(part.vertices, body.velocity);\r\n            \r\n            if (i > 0) {\r\n                part.position.x += body.velocity.x;\r\n                part.position.y += body.velocity.y;\r\n            }\r\n\r\n            if (body.angularVelocity !== 0) {\r\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\r\n                Axes.rotate(part.axes, body.angularVelocity);\r\n                if (i > 0) {\r\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\r\n                }\r\n            }\r\n\r\n            Bounds.update(part.bounds, part.vertices, body.velocity);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Updates properties `body.velocity`, `body.speed`, `body.angularVelocity` and `body.angularSpeed` which are normalised in relation to `Body._baseDelta`.\r\n     * @method updateVelocities\r\n     * @param {body} body\r\n     */\r\n    Body.updateVelocities = function(body) {\r\n        var timeScale = Body._baseDelta / body.deltaTime,\r\n            bodyVelocity = body.velocity;\r\n\r\n        bodyVelocity.x = (body.position.x - body.positionPrev.x) * timeScale;\r\n        bodyVelocity.y = (body.position.y - body.positionPrev.y) * timeScale;\r\n        body.speed = Math.sqrt((bodyVelocity.x * bodyVelocity.x) + (bodyVelocity.y * bodyVelocity.y));\r\n\r\n        body.angularVelocity = (body.angle - body.anglePrev) * timeScale;\r\n        body.angularSpeed = Math.abs(body.angularVelocity);\r\n    };\r\n\r\n    /**\r\n     * Applies the `force` to the `body` from the force origin `position` in world-space, over a single timestep, including applying any resulting angular torque.\r\n     * \r\n     * Forces are useful for effects like gravity, wind or rocket thrust, but can be difficult in practice when precise control is needed. In these cases see `Body.setVelocity` and `Body.setPosition` as an alternative.\r\n     * \r\n     * The force from this function is only applied once for the duration of a single timestep, in other words the duration depends directly on the current engine update `delta` and the rate of calls to this function.\r\n     * \r\n     * Therefore to account for time, you should apply the force constantly over as many engine updates as equivalent to the intended duration.\r\n     * \r\n     * If all or part of the force duration is some fraction of a timestep, first multiply the force by `duration / timestep`.\r\n     * \r\n     * The force origin `position` in world-space must also be specified. Passing `body.position` will result in zero angular effect as the force origin would be at the centre of mass.\r\n     * \r\n     * The `body` will take time to accelerate under a force, the resulting effect depends on duration of the force, the body mass and other forces on the body including friction combined.\r\n     * @method applyForce\r\n     * @param {body} body\r\n     * @param {vector} position The force origin in world-space. Pass `body.position` to avoid angular torque.\r\n     * @param {vector} force\r\n     */\r\n    Body.applyForce = function(body, position, force) {\r\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\r\n        body.force.x += force.x;\r\n        body.force.y += force.y;\r\n        body.torque += offset.x * force.y - offset.y * force.x;\r\n    };\r\n\r\n    /**\r\n     * Returns the sums of the properties of all compound parts of the parent body.\r\n     * @method _totalProperties\r\n     * @private\r\n     * @param {body} body\r\n     * @return {}\r\n     */\r\n    Body._totalProperties = function(body) {\r\n        // from equations at:\r\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\r\n        // http://output.to/sideway/default.asp?qno=121100087\r\n\r\n        var properties = {\r\n            mass: 0,\r\n            area: 0,\r\n            inertia: 0,\r\n            centre: { x: 0, y: 0 }\r\n        };\r\n\r\n        // sum the properties of all compound parts of the parent body\r\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\r\n            var part = body.parts[i],\r\n                mass = part.mass !== Infinity ? part.mass : 1;\r\n\r\n            properties.mass += mass;\r\n            properties.area += part.area;\r\n            properties.inertia += part.inertia;\r\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\r\n        }\r\n\r\n        properties.centre = Vector.div(properties.centre, properties.mass);\r\n\r\n        return properties;\r\n    };\r\n\r\n    /*\r\n    *\r\n    *  Events Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n    * Fired when a body starts sleeping (where `this` is the body).\r\n    *\r\n    * @event sleepStart\r\n    * @this {body} The body that has started sleeping\r\n    * @param {} event An event object\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired when a body ends sleeping (where `this` is the body).\r\n    *\r\n    * @event sleepEnd\r\n    * @this {body} The body that has ended sleeping\r\n    * @param {} event An event object\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /*\r\n    *\r\n    *  Properties Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\r\n     *\r\n     * @property id\r\n     * @type number\r\n     */\r\n\r\n    /**\r\n     * _Read only_. Set by `Body.create`.\r\n     * \r\n     * A `String` denoting the type of object.\r\n     *\r\n     * @readOnly\r\n     * @property type\r\n     * @type string\r\n     * @default \"body\"\r\n     */\r\n\r\n    /**\r\n     * An arbitrary `String` name to help the user identify and manage bodies.\r\n     *\r\n     * @property label\r\n     * @type string\r\n     * @default \"Body\"\r\n     */\r\n\r\n    /**\r\n     * _Read only_. Use `Body.setParts` to set. \r\n     * \r\n     * An array of bodies that make up this body. \r\n     * The first body in the array must always be a self reference to the current body instance.\r\n     * All bodies in the `parts` array together form a single rigid compound body.\r\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\r\n     * Parts themselves should never be added to a `World`, only the parent body should be.\r\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\r\n     *\r\n     * @readOnly\r\n     * @property parts\r\n     * @type body[]\r\n     */\r\n\r\n    /**\r\n     * An object reserved for storing plugin-specific properties.\r\n     *\r\n     * @property plugin\r\n     * @type {}\r\n     */\r\n\r\n    /**\r\n     * _Read only_. Updated by `Body.setParts`.\r\n     * \r\n     * A reference to the body that this is a part of. See `body.parts`.\r\n     * This is a self reference if the body is not a part of another body.\r\n     *\r\n     * @readOnly\r\n     * @property parent\r\n     * @type body\r\n     */\r\n\r\n    /**\r\n     * A `Number` specifying the angle of the body, in radians.\r\n     *\r\n     * @property angle\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * _Read only_. Use `Body.setVertices` or `Body.setParts` to set. See also `Bodies.fromVertices`.\r\n     * \r\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\r\n     * These should be provided about the origin `(0, 0)`. E.g.\r\n     *\r\n     * `[{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]`\r\n     * \r\n     * Vertices must always be convex, in clockwise order and must not contain any duplicate points.\r\n     * \r\n     * Concave vertices should be decomposed into convex `parts`, see `Bodies.fromVertices` and `Body.setParts`.\r\n     *\r\n     * When set the vertices are translated such that `body.position` is at the centre of mass.\r\n     * Many other body properties are automatically calculated from these vertices when set including `density`, `area` and `inertia`.\r\n     * \r\n     * The module `Matter.Vertices` contains useful methods for working with vertices.\r\n     *\r\n     * @readOnly\r\n     * @property vertices\r\n     * @type vector[]\r\n     */\r\n\r\n    /**\r\n     * _Read only_. Use `Body.setPosition` to set. \r\n     * \r\n     * A `Vector` that specifies the current world-space position of the body.\r\n     * \r\n     * @readOnly\r\n     * @property position\r\n     * @type vector\r\n     * @default { x: 0, y: 0 }\r\n     */\r\n\r\n    /**\r\n     * A `Vector` that accumulates the total force applied to the body for a single update.\r\n     * Force is zeroed after every `Engine.update`, so constant forces should be applied for every update they are needed. See also `Body.applyForce`.\r\n     * \r\n     * @property force\r\n     * @type vector\r\n     * @default { x: 0, y: 0 }\r\n     */\r\n\r\n    /**\r\n     * A `Number` that accumulates the total torque (turning force) applied to the body for a single update. See also `Body.applyForce`.\r\n     * Torque is zeroed after every `Engine.update`, so constant torques should be applied for every update they are needed.\r\n     *\r\n     * Torques result in angular acceleration on every update, which depends on body inertia and the engine update delta.\r\n     * \r\n     * @property torque\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * _Read only_. Use `Body.setSpeed` to set. \r\n     * \r\n     * See `Body.getSpeed` for details.\r\n     * \r\n     * Equivalent to the magnitude of `body.velocity` (always positive).\r\n     * \r\n     * @readOnly\r\n     * @property speed\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * _Read only_. Use `Body.setVelocity` to set. \r\n     * \r\n     * See `Body.getVelocity` for details.\r\n     * \r\n     * Equivalent to the magnitude of `body.angularVelocity` (always positive).\r\n     * \r\n     * @readOnly\r\n     * @property velocity\r\n     * @type vector\r\n     * @default { x: 0, y: 0 }\r\n     */\r\n\r\n    /**\r\n     * _Read only_. Use `Body.setAngularSpeed` to set. \r\n     * \r\n     * See `Body.getAngularSpeed` for details.\r\n     * \r\n     * \r\n     * @readOnly\r\n     * @property angularSpeed\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * _Read only_. Use `Body.setAngularVelocity` to set. \r\n     * \r\n     * See `Body.getAngularVelocity` for details.\r\n     * \r\n     *\r\n     * @readOnly\r\n     * @property angularVelocity\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * _Read only_. Use `Body.setStatic` to set. \r\n     * \r\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\r\n     *\r\n     * @readOnly\r\n     * @property isStatic\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\r\n     *\r\n     * @property isSensor\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * _Read only_. Use `Sleeping.set` to set. \r\n     * \r\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\r\n     *\r\n     * @readOnly\r\n     * @property isSleeping\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * _Read only_. Calculated during engine update only when sleeping is enabled.\r\n     * \r\n     * A `Number` that loosely measures the amount of movement a body currently has.\r\n     *\r\n     * Derived from `body.speed^2 + body.angularSpeed^2`. See `Sleeping.update`.\r\n     * \r\n     * @readOnly\r\n     * @property motion\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the length of time during which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\r\n     * \r\n     * @property sleepThreshold\r\n     * @type number\r\n     * @default 60\r\n     */\r\n\r\n    /**\r\n     * _Read only_. Use `Body.setDensity` to set. \r\n     * \r\n     * A `Number` that defines the density of the body (mass per unit area).\r\n     * \r\n     * Mass will also be updated when set.\r\n     *\r\n     * @readOnly\r\n     * @property density\r\n     * @type number\r\n     * @default 0.001\r\n     */\r\n\r\n    /**\r\n     * _Read only_. Use `Body.setMass` to set. \r\n     * \r\n     * A `Number` that defines the mass of the body.\r\n     * \r\n     * Density will also be updated when set.\r\n     * \r\n     * @readOnly\r\n     * @property mass\r\n     * @type number\r\n     */\r\n\r\n    /**\r\n     * _Read only_. Use `Body.setMass` to set. \r\n     * \r\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\r\n     *\r\n     * @readOnly\r\n     * @property inverseMass\r\n     * @type number\r\n     */\r\n\r\n    /**\r\n     * _Read only_. Automatically calculated when vertices, mass or density are set or set through `Body.setInertia`.\r\n     * \r\n     * A `Number` that defines the moment of inertia of the body. This is the second moment of area in two dimensions.\r\n     * \r\n     * Can be manually set to `Infinity` to prevent rotation of the body. See `Body.setInertia`.\r\n     * \r\n     * @readOnly\r\n     * @property inertia\r\n     * @type number\r\n     */\r\n\r\n    /**\r\n     * _Read only_. Automatically calculated when vertices, mass or density are set or calculated by `Body.setInertia`.\r\n     * \r\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\r\n     * \r\n     * @readOnly\r\n     * @property inverseInertia\r\n     * @type number\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\r\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \r\n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\r\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\r\n     *\r\n     * `Math.max(bodyA.restitution, bodyB.restitution)`\r\n     *\r\n     * @property restitution\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\r\n     * A value of `0` means that the body may slide indefinitely.\r\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\r\n     *\r\n     * The effects of the value may be non-linear. \r\n     * High values may be unstable depending on the body.\r\n     * The engine uses a Coulomb friction model including static and kinetic friction.\r\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\r\n     *\r\n     * `Math.min(bodyA.friction, bodyB.friction)`\r\n     *\r\n     * @property friction\r\n     * @type number\r\n     * @default 0.1\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \r\n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\r\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\r\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\r\n     *\r\n     * @property frictionStatic\r\n     * @type number\r\n     * @default 0.5\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the air friction of the body (air resistance). \r\n     * A value of `0` means the body will never slow as it moves through space.\r\n     * The higher the value, the faster a body slows when moving through space.\r\n     * The effects of the value are non-linear. \r\n     *\r\n     * @property frictionAir\r\n     * @type number\r\n     * @default 0.01\r\n     */\r\n\r\n    /**\r\n     * An `Object` that specifies the collision filtering properties of this body.\r\n     *\r\n     * Collisions between two bodies will obey the following rules:\r\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\r\n     *   they will always collide if the value is positive, and they will never collide\r\n     *   if the value is negative.\r\n     * - If the two bodies have different values of `collisionFilter.group` or if one\r\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\r\n     *\r\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\r\n     * value is used as a bit field and the category should have only one bit set, meaning that\r\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\r\n     * different collision categories available.\r\n     *\r\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\r\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\r\n     *\r\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\r\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\r\n     * are both true.\r\n     *\r\n     * @property collisionFilter\r\n     * @type object\r\n     */\r\n\r\n    /**\r\n     * An Integer `Number`, that specifies the collision group this body belongs to.\r\n     * See `body.collisionFilter` for more information.\r\n     *\r\n     * @property collisionFilter.group\r\n     * @type object\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * A bit field that specifies the collision category this body belongs to.\r\n     * The category value should have only one bit set, for example `0x0001`.\r\n     * This means there are up to 32 unique collision categories available.\r\n     * See `body.collisionFilter` for more information.\r\n     *\r\n     * @property collisionFilter.category\r\n     * @type object\r\n     * @default 1\r\n     */\r\n\r\n    /**\r\n     * A bit mask that specifies the collision categories this body may collide with.\r\n     * See `body.collisionFilter` for more information.\r\n     *\r\n     * @property collisionFilter.mask\r\n     * @type object\r\n     * @default -1\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies a thin boundary around the body where it is allowed to slightly sink into other bodies.\r\n     * \r\n     * This is required for proper collision response, including friction and restitution effects.\r\n     * \r\n     * The default should generally suffice in most cases. You may need to decrease this value for very small bodies that are nearing the default value in scale.\r\n     *\r\n     * @property slop\r\n     * @type number\r\n     * @default 0.05\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies per-body time scaling.\r\n     *\r\n     * @property timeScale\r\n     * @type number\r\n     * @default 1\r\n     */\r\n\r\n    /**\r\n     * _Read only_. Updated during engine update.\r\n     * \r\n     * A `Number` that records the last delta time value used to update this body.\r\n     * Used to calculate speed and velocity.\r\n     *\r\n     * @readOnly\r\n     * @property deltaTime\r\n     * @type number\r\n     * @default 1000 / 60\r\n     */\r\n\r\n    /**\r\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\r\n     *\r\n     * @property render\r\n     * @type object\r\n     */\r\n\r\n    /**\r\n     * A flag that indicates if the body should be rendered.\r\n     *\r\n     * @property render.visible\r\n     * @type boolean\r\n     * @default true\r\n     */\r\n\r\n    /**\r\n     * Sets the opacity to use when rendering.\r\n     *\r\n     * @property render.opacity\r\n     * @type number\r\n     * @default 1\r\n    */\r\n\r\n    /**\r\n     * An `Object` that defines the sprite properties to use when rendering, if any.\r\n     *\r\n     * @property render.sprite\r\n     * @type object\r\n     */\r\n\r\n    /**\r\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\r\n     *\r\n     * @property render.sprite.texture\r\n     * @type string\r\n     */\r\n     \r\n    /**\r\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\r\n     *\r\n     * @property render.sprite.xScale\r\n     * @type number\r\n     * @default 1\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\r\n     *\r\n     * @property render.sprite.yScale\r\n     * @type number\r\n     * @default 1\r\n     */\r\n\r\n    /**\r\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\r\n      *\r\n      * @property render.sprite.xOffset\r\n      * @type number\r\n      * @default 0\r\n      */\r\n\r\n    /**\r\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\r\n      *\r\n      * @property render.sprite.yOffset\r\n      * @type number\r\n      * @default 0\r\n      */\r\n\r\n    /**\r\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\r\n     * A value of `0` means no outline will be rendered.\r\n     *\r\n     * @property render.lineWidth\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\r\n     * It is the same as when using a canvas, so it accepts CSS style property values.\r\n     *\r\n     * @property render.fillStyle\r\n     * @type string\r\n     * @default a random colour\r\n     */\r\n\r\n    /**\r\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\r\n     * It is the same as when using a canvas, so it accepts CSS style property values.\r\n     *\r\n     * @property render.strokeStyle\r\n     * @type string\r\n     * @default a random colour\r\n     */\r\n\r\n    /**\r\n     * _Read only_. Calculated automatically when vertices are set.\r\n     * \r\n     * An array of unique axis vectors (edge normals) used for collision detection.\r\n     * These are automatically calculated when vertices are set.\r\n     * They are constantly updated by `Body.update` during the simulation.\r\n     *\r\n     * @readOnly\r\n     * @property axes\r\n     * @type vector[]\r\n     */\r\n     \r\n    /**\r\n     * _Read only_. Calculated automatically when vertices are set.\r\n     * \r\n     * A `Number` that measures the area of the body's convex hull.\r\n     * \r\n     * @readOnly\r\n     * @property area\r\n     * @type string\r\n     * @default \r\n     */\r\n\r\n    /**\r\n     * A `Bounds` object that defines the AABB region for the body.\r\n     * It is automatically calculated when vertices are set and constantly updated by `Body.update` during simulation.\r\n     * \r\n     * @property bounds\r\n     * @type bounds\r\n     */\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __nested_webpack_require_102079__) {\r\n\r\n/**\r\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Events\r\n*/\r\n\r\nvar Events = {};\r\n\r\nmodule.exports = Events;\r\n\r\nvar Common = __nested_webpack_require_102079__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Subscribes a callback function to the given object's `eventName`.\r\n     * @method on\r\n     * @param {} object\r\n     * @param {string} eventNames\r\n     * @param {function} callback\r\n     */\r\n    Events.on = function(object, eventNames, callback) {\r\n        var names = eventNames.split(' '),\r\n            name;\r\n\r\n        for (var i = 0; i < names.length; i++) {\r\n            name = names[i];\r\n            object.events = object.events || {};\r\n            object.events[name] = object.events[name] || [];\r\n            object.events[name].push(callback);\r\n        }\r\n\r\n        return callback;\r\n    };\r\n\r\n    /**\r\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\r\n     * @method off\r\n     * @param {} object\r\n     * @param {string} eventNames\r\n     * @param {function} callback\r\n     */\r\n    Events.off = function(object, eventNames, callback) {\r\n        if (!eventNames) {\r\n            object.events = {};\r\n            return;\r\n        }\r\n\r\n        // handle Events.off(object, callback)\r\n        if (typeof eventNames === 'function') {\r\n            callback = eventNames;\r\n            eventNames = Common.keys(object.events).join(' ');\r\n        }\r\n\r\n        var names = eventNames.split(' ');\r\n\r\n        for (var i = 0; i < names.length; i++) {\r\n            var callbacks = object.events[names[i]],\r\n                newCallbacks = [];\r\n\r\n            if (callback && callbacks) {\r\n                for (var j = 0; j < callbacks.length; j++) {\r\n                    if (callbacks[j] !== callback)\r\n                        newCallbacks.push(callbacks[j]);\r\n                }\r\n            }\r\n\r\n            object.events[names[i]] = newCallbacks;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\r\n     * @method trigger\r\n     * @param {} object\r\n     * @param {string} eventNames\r\n     * @param {} event\r\n     */\r\n    Events.trigger = function(object, eventNames, event) {\r\n        var names,\r\n            name,\r\n            callbacks,\r\n            eventClone;\r\n\r\n        var events = object.events;\r\n        \r\n        if (events && Common.keys(events).length > 0) {\r\n            if (!event)\r\n                event = {};\r\n\r\n            names = eventNames.split(' ');\r\n\r\n            for (var i = 0; i < names.length; i++) {\r\n                name = names[i];\r\n                callbacks = events[name];\r\n\r\n                if (callbacks) {\r\n                    eventClone = Common.clone(event, false);\r\n                    eventClone.name = name;\r\n                    eventClone.source = object;\r\n\r\n                    for (var j = 0; j < callbacks.length; j++) {\r\n                        callbacks[j].apply(object, [eventClone]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __nested_webpack_require_105395__) {\r\n\r\n/**\r\n* A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\r\n*\r\n* They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\r\n* A composite could contain anything from a single body all the way up to a whole world.\r\n* \r\n* When making any changes to composites, use the included functions rather than changing their properties directly.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Composite\r\n*/\r\n\r\nvar Composite = {};\r\n\r\nmodule.exports = Composite;\r\n\r\nvar Events = __nested_webpack_require_105395__(5);\r\nvar Common = __nested_webpack_require_105395__(0);\r\nvar Bounds = __nested_webpack_require_105395__(1);\r\nvar Body = __nested_webpack_require_105395__(4);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\r\n     * See the properites section below for detailed information on what you can pass via the `options` object.\r\n     * @method create\r\n     * @param {} [options]\r\n     * @return {composite} A new composite\r\n     */\r\n    Composite.create = function(options) {\r\n        return Common.extend({ \r\n            id: Common.nextId(),\r\n            type: 'composite',\r\n            parent: null,\r\n            isModified: false,\r\n            bodies: [], \r\n            constraints: [], \r\n            composites: [],\r\n            label: 'Composite',\r\n            plugin: {},\r\n            cache: {\r\n                allBodies: null,\r\n                allConstraints: null,\r\n                allComposites: null\r\n            }\r\n        }, options);\r\n    };\r\n\r\n    /**\r\n     * Sets the composite's `isModified` flag. \r\n     * If `updateParents` is true, all parents will be set (default: false).\r\n     * If `updateChildren` is true, all children will be set (default: false).\r\n     * @private\r\n     * @method setModified\r\n     * @param {composite} composite\r\n     * @param {boolean} isModified\r\n     * @param {boolean} [updateParents=false]\r\n     * @param {boolean} [updateChildren=false]\r\n     */\r\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\r\n        composite.isModified = isModified;\r\n\r\n        if (isModified && composite.cache) {\r\n            composite.cache.allBodies = null;\r\n            composite.cache.allConstraints = null;\r\n            composite.cache.allComposites = null;\r\n        }\r\n\r\n        if (updateParents && composite.parent) {\r\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\r\n        }\r\n\r\n        if (updateChildren) {\r\n            for (var i = 0; i < composite.composites.length; i++) {\r\n                var childComposite = composite.composites[i];\r\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\r\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\r\n     * @method add\r\n     * @param {composite} composite\r\n     * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\r\n     * @return {composite} The original composite with the objects added\r\n     */\r\n    Composite.add = function(composite, object) {\r\n        var objects = [].concat(object);\r\n\r\n        Events.trigger(composite, 'beforeAdd', { object: object });\r\n\r\n        for (var i = 0; i < objects.length; i++) {\r\n            var obj = objects[i];\r\n\r\n            switch (obj.type) {\r\n\r\n            case 'body':\r\n                // skip adding compound parts\r\n                if (obj.parent !== obj) {\r\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\r\n                    break;\r\n                }\r\n\r\n                Composite.addBody(composite, obj);\r\n                break;\r\n            case 'constraint':\r\n                Composite.addConstraint(composite, obj);\r\n                break;\r\n            case 'composite':\r\n                Composite.addComposite(composite, obj);\r\n                break;\r\n            case 'mouseConstraint':\r\n                Composite.addConstraint(composite, obj.constraint);\r\n                break;\r\n\r\n            }\r\n        }\r\n\r\n        Events.trigger(composite, 'afterAdd', { object: object });\r\n\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\r\n     * Optionally searching its children recursively.\r\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\r\n     * @method remove\r\n     * @param {composite} composite\r\n     * @param {object|array} object\r\n     * @param {boolean} [deep=false]\r\n     * @return {composite} The original composite with the objects removed\r\n     */\r\n    Composite.remove = function(composite, object, deep) {\r\n        var objects = [].concat(object);\r\n\r\n        Events.trigger(composite, 'beforeRemove', { object: object });\r\n\r\n        for (var i = 0; i < objects.length; i++) {\r\n            var obj = objects[i];\r\n\r\n            switch (obj.type) {\r\n\r\n            case 'body':\r\n                Composite.removeBody(composite, obj, deep);\r\n                break;\r\n            case 'constraint':\r\n                Composite.removeConstraint(composite, obj, deep);\r\n                break;\r\n            case 'composite':\r\n                Composite.removeComposite(composite, obj, deep);\r\n                break;\r\n            case 'mouseConstraint':\r\n                Composite.removeConstraint(composite, obj.constraint);\r\n                break;\r\n\r\n            }\r\n        }\r\n\r\n        Events.trigger(composite, 'afterRemove', { object: object });\r\n\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Adds a composite to the given composite.\r\n     * @private\r\n     * @method addComposite\r\n     * @param {composite} compositeA\r\n     * @param {composite} compositeB\r\n     * @return {composite} The original compositeA with the objects from compositeB added\r\n     */\r\n    Composite.addComposite = function(compositeA, compositeB) {\r\n        compositeA.composites.push(compositeB);\r\n        compositeB.parent = compositeA;\r\n        Composite.setModified(compositeA, true, true, false);\r\n        return compositeA;\r\n    };\r\n\r\n    /**\r\n     * Removes a composite from the given composite, and optionally searching its children recursively.\r\n     * @private\r\n     * @method removeComposite\r\n     * @param {composite} compositeA\r\n     * @param {composite} compositeB\r\n     * @param {boolean} [deep=false]\r\n     * @return {composite} The original compositeA with the composite removed\r\n     */\r\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\r\n        var position = Common.indexOf(compositeA.composites, compositeB);\r\n        if (position !== -1) {\r\n            Composite.removeCompositeAt(compositeA, position);\r\n        }\r\n\r\n        if (deep) {\r\n            for (var i = 0; i < compositeA.composites.length; i++){\r\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\r\n            }\r\n        }\r\n\r\n        return compositeA;\r\n    };\r\n\r\n    /**\r\n     * Removes a composite from the given composite.\r\n     * @private\r\n     * @method removeCompositeAt\r\n     * @param {composite} composite\r\n     * @param {number} position\r\n     * @return {composite} The original composite with the composite removed\r\n     */\r\n    Composite.removeCompositeAt = function(composite, position) {\r\n        composite.composites.splice(position, 1);\r\n        Composite.setModified(composite, true, true, false);\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Adds a body to the given composite.\r\n     * @private\r\n     * @method addBody\r\n     * @param {composite} composite\r\n     * @param {body} body\r\n     * @return {composite} The original composite with the body added\r\n     */\r\n    Composite.addBody = function(composite, body) {\r\n        composite.bodies.push(body);\r\n        Composite.setModified(composite, true, true, false);\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Removes a body from the given composite, and optionally searching its children recursively.\r\n     * @private\r\n     * @method removeBody\r\n     * @param {composite} composite\r\n     * @param {body} body\r\n     * @param {boolean} [deep=false]\r\n     * @return {composite} The original composite with the body removed\r\n     */\r\n    Composite.removeBody = function(composite, body, deep) {\r\n        var position = Common.indexOf(composite.bodies, body);\r\n        if (position !== -1) {\r\n            Composite.removeBodyAt(composite, position);\r\n        }\r\n\r\n        if (deep) {\r\n            for (var i = 0; i < composite.composites.length; i++){\r\n                Composite.removeBody(composite.composites[i], body, true);\r\n            }\r\n        }\r\n\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Removes a body from the given composite.\r\n     * @private\r\n     * @method removeBodyAt\r\n     * @param {composite} composite\r\n     * @param {number} position\r\n     * @return {composite} The original composite with the body removed\r\n     */\r\n    Composite.removeBodyAt = function(composite, position) {\r\n        composite.bodies.splice(position, 1);\r\n        Composite.setModified(composite, true, true, false);\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Adds a constraint to the given composite.\r\n     * @private\r\n     * @method addConstraint\r\n     * @param {composite} composite\r\n     * @param {constraint} constraint\r\n     * @return {composite} The original composite with the constraint added\r\n     */\r\n    Composite.addConstraint = function(composite, constraint) {\r\n        composite.constraints.push(constraint);\r\n        Composite.setModified(composite, true, true, false);\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\r\n     * @private\r\n     * @method removeConstraint\r\n     * @param {composite} composite\r\n     * @param {constraint} constraint\r\n     * @param {boolean} [deep=false]\r\n     * @return {composite} The original composite with the constraint removed\r\n     */\r\n    Composite.removeConstraint = function(composite, constraint, deep) {\r\n        var position = Common.indexOf(composite.constraints, constraint);\r\n        if (position !== -1) {\r\n            Composite.removeConstraintAt(composite, position);\r\n        }\r\n\r\n        if (deep) {\r\n            for (var i = 0; i < composite.composites.length; i++){\r\n                Composite.removeConstraint(composite.composites[i], constraint, true);\r\n            }\r\n        }\r\n\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Removes a body from the given composite.\r\n     * @private\r\n     * @method removeConstraintAt\r\n     * @param {composite} composite\r\n     * @param {number} position\r\n     * @return {composite} The original composite with the constraint removed\r\n     */\r\n    Composite.removeConstraintAt = function(composite, position) {\r\n        composite.constraints.splice(position, 1);\r\n        Composite.setModified(composite, true, true, false);\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Removes all bodies, constraints and composites from the given composite.\r\n     * Optionally clearing its children recursively.\r\n     * @method clear\r\n     * @param {composite} composite\r\n     * @param {boolean} keepStatic\r\n     * @param {boolean} [deep=false]\r\n     */\r\n    Composite.clear = function(composite, keepStatic, deep) {\r\n        if (deep) {\r\n            for (var i = 0; i < composite.composites.length; i++){\r\n                Composite.clear(composite.composites[i], keepStatic, true);\r\n            }\r\n        }\r\n        \r\n        if (keepStatic) {\r\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\r\n        } else {\r\n            composite.bodies.length = 0;\r\n        }\r\n\r\n        composite.constraints.length = 0;\r\n        composite.composites.length = 0;\r\n\r\n        Composite.setModified(composite, true, true, false);\r\n\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\r\n     * @method allBodies\r\n     * @param {composite} composite\r\n     * @return {body[]} All the bodies\r\n     */\r\n    Composite.allBodies = function(composite) {\r\n        if (composite.cache && composite.cache.allBodies) {\r\n            return composite.cache.allBodies;\r\n        }\r\n\r\n        var bodies = [].concat(composite.bodies);\r\n\r\n        for (var i = 0; i < composite.composites.length; i++)\r\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\r\n\r\n        if (composite.cache) {\r\n            composite.cache.allBodies = bodies;\r\n        }\r\n\r\n        return bodies;\r\n    };\r\n\r\n    /**\r\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\r\n     * @method allConstraints\r\n     * @param {composite} composite\r\n     * @return {constraint[]} All the constraints\r\n     */\r\n    Composite.allConstraints = function(composite) {\r\n        if (composite.cache && composite.cache.allConstraints) {\r\n            return composite.cache.allConstraints;\r\n        }\r\n\r\n        var constraints = [].concat(composite.constraints);\r\n\r\n        for (var i = 0; i < composite.composites.length; i++)\r\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\r\n\r\n        if (composite.cache) {\r\n            composite.cache.allConstraints = constraints;\r\n        }\r\n\r\n        return constraints;\r\n    };\r\n\r\n    /**\r\n     * Returns all composites in the given composite, including all composites in its children, recursively.\r\n     * @method allComposites\r\n     * @param {composite} composite\r\n     * @return {composite[]} All the composites\r\n     */\r\n    Composite.allComposites = function(composite) {\r\n        if (composite.cache && composite.cache.allComposites) {\r\n            return composite.cache.allComposites;\r\n        }\r\n\r\n        var composites = [].concat(composite.composites);\r\n\r\n        for (var i = 0; i < composite.composites.length; i++)\r\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\r\n\r\n        if (composite.cache) {\r\n            composite.cache.allComposites = composites;\r\n        }\r\n\r\n        return composites;\r\n    };\r\n\r\n    /**\r\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\r\n     * @method get\r\n     * @param {composite} composite\r\n     * @param {number} id\r\n     * @param {string} type\r\n     * @return {object} The requested object, if found\r\n     */\r\n    Composite.get = function(composite, id, type) {\r\n        var objects,\r\n            object;\r\n\r\n        switch (type) {\r\n        case 'body':\r\n            objects = Composite.allBodies(composite);\r\n            break;\r\n        case 'constraint':\r\n            objects = Composite.allConstraints(composite);\r\n            break;\r\n        case 'composite':\r\n            objects = Composite.allComposites(composite).concat(composite);\r\n            break;\r\n        }\r\n\r\n        if (!objects)\r\n            return null;\r\n\r\n        object = objects.filter(function(object) { \r\n            return object.id.toString() === id.toString(); \r\n        });\r\n\r\n        return object.length === 0 ? null : object[0];\r\n    };\r\n\r\n    /**\r\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\r\n     * @method move\r\n     * @param {compositeA} compositeA\r\n     * @param {object[]} objects\r\n     * @param {compositeB} compositeB\r\n     * @return {composite} Returns compositeA\r\n     */\r\n    Composite.move = function(compositeA, objects, compositeB) {\r\n        Composite.remove(compositeA, objects);\r\n        Composite.add(compositeB, objects);\r\n        return compositeA;\r\n    };\r\n\r\n    /**\r\n     * Assigns new ids for all objects in the composite, recursively.\r\n     * @method rebase\r\n     * @param {composite} composite\r\n     * @return {composite} Returns composite\r\n     */\r\n    Composite.rebase = function(composite) {\r\n        var objects = Composite.allBodies(composite)\r\n            .concat(Composite.allConstraints(composite))\r\n            .concat(Composite.allComposites(composite));\r\n\r\n        for (var i = 0; i < objects.length; i++) {\r\n            objects[i].id = Common.nextId();\r\n        }\r\n\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Translates all children in the composite by a given vector relative to their current positions, \r\n     * without imparting any velocity.\r\n     * @method translate\r\n     * @param {composite} composite\r\n     * @param {vector} translation\r\n     * @param {bool} [recursive=true]\r\n     */\r\n    Composite.translate = function(composite, translation, recursive) {\r\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\r\n\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            Body.translate(bodies[i], translation);\r\n        }\r\n\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\r\n     * @method rotate\r\n     * @param {composite} composite\r\n     * @param {number} rotation\r\n     * @param {vector} point\r\n     * @param {bool} [recursive=true]\r\n     */\r\n    Composite.rotate = function(composite, rotation, point, recursive) {\r\n        var cos = Math.cos(rotation),\r\n            sin = Math.sin(rotation),\r\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\r\n\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i],\r\n                dx = body.position.x - point.x,\r\n                dy = body.position.y - point.y;\r\n                \r\n            Body.setPosition(body, {\r\n                x: point.x + (dx * cos - dy * sin),\r\n                y: point.y + (dx * sin + dy * cos)\r\n            });\r\n\r\n            Body.rotate(body, rotation);\r\n        }\r\n\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\r\n     * @method scale\r\n     * @param {composite} composite\r\n     * @param {number} scaleX\r\n     * @param {number} scaleY\r\n     * @param {vector} point\r\n     * @param {bool} [recursive=true]\r\n     */\r\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\r\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\r\n\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i],\r\n                dx = body.position.x - point.x,\r\n                dy = body.position.y - point.y;\r\n                \r\n            Body.setPosition(body, {\r\n                x: point.x + dx * scaleX,\r\n                y: point.y + dy * scaleY\r\n            });\r\n\r\n            Body.scale(body, scaleX, scaleY);\r\n        }\r\n\r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Returns the union of the bounds of all of the composite's bodies.\r\n     * @method bounds\r\n     * @param {composite} composite The composite.\r\n     * @returns {bounds} The composite bounds.\r\n     */\r\n    Composite.bounds = function(composite) {\r\n        var bodies = Composite.allBodies(composite),\r\n            vertices = [];\r\n\r\n        for (var i = 0; i < bodies.length; i += 1) {\r\n            var body = bodies[i];\r\n            vertices.push(body.bounds.min, body.bounds.max);\r\n        }\r\n\r\n        return Bounds.create(vertices);\r\n    };\r\n\r\n    /*\r\n    *\r\n    *  Events Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n    * Fired when a call to `Composite.add` is made, before objects have been added.\r\n    *\r\n    * @event beforeAdd\r\n    * @param {} event An event object\r\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired when a call to `Composite.add` is made, after objects have been added.\r\n    *\r\n    * @event afterAdd\r\n    * @param {} event An event object\r\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\r\n    *\r\n    * @event beforeRemove\r\n    * @param {} event An event object\r\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\r\n    *\r\n    * @event afterRemove\r\n    * @param {} event An event object\r\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /*\r\n    *\r\n    *  Properties Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\r\n     *\r\n     * @property id\r\n     * @type number\r\n     */\r\n\r\n    /**\r\n     * A `String` denoting the type of object.\r\n     *\r\n     * @property type\r\n     * @type string\r\n     * @default \"composite\"\r\n     * @readOnly\r\n     */\r\n\r\n    /**\r\n     * An arbitrary `String` name to help the user identify and manage composites.\r\n     *\r\n     * @property label\r\n     * @type string\r\n     * @default \"Composite\"\r\n     */\r\n\r\n    /**\r\n     * A flag that specifies whether the composite has been modified during the current step.\r\n     * This is automatically managed when bodies, constraints or composites are added or removed.\r\n     *\r\n     * @property isModified\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\r\n     *\r\n     * @property parent\r\n     * @type composite\r\n     * @default null\r\n     */\r\n\r\n    /**\r\n     * An array of `Body` that are _direct_ children of this composite.\r\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\r\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\r\n     *\r\n     * @property bodies\r\n     * @type body[]\r\n     * @default []\r\n     */\r\n\r\n    /**\r\n     * An array of `Constraint` that are _direct_ children of this composite.\r\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\r\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\r\n     *\r\n     * @property constraints\r\n     * @type constraint[]\r\n     * @default []\r\n     */\r\n\r\n    /**\r\n     * An array of `Composite` that are _direct_ children of this composite.\r\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\r\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\r\n     *\r\n     * @property composites\r\n     * @type composite[]\r\n     * @default []\r\n     */\r\n\r\n    /**\r\n     * An object reserved for storing plugin-specific properties.\r\n     *\r\n     * @property plugin\r\n     * @type {}\r\n     */\r\n\r\n    /**\r\n     * An object used for storing cached results for performance reasons.\r\n     * This is used internally only and is automatically managed.\r\n     *\r\n     * @private\r\n     * @property cache\r\n     * @type {}\r\n     */\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __nested_webpack_require_129810__) {\r\n\r\n/**\r\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\r\n*\r\n* @class Sleeping\r\n*/\r\n\r\nvar Sleeping = {};\r\n\r\nmodule.exports = Sleeping;\r\n\r\nvar Body = __nested_webpack_require_129810__(4);\r\nvar Events = __nested_webpack_require_129810__(5);\r\nvar Common = __nested_webpack_require_129810__(0);\r\n\r\n(function() {\r\n\r\n    Sleeping._motionWakeThreshold = 0.18;\r\n    Sleeping._motionSleepThreshold = 0.08;\r\n    Sleeping._minBias = 0.9;\r\n\r\n    /**\r\n     * Puts bodies to sleep or wakes them up depending on their motion.\r\n     * @method update\r\n     * @param {body[]} bodies\r\n     * @param {number} delta\r\n     */\r\n    Sleeping.update = function(bodies, delta) {\r\n        var timeScale = delta / Common._baseDelta,\r\n            motionSleepThreshold = Sleeping._motionSleepThreshold;\r\n        \r\n        // update bodies sleeping status\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i],\r\n                speed = Body.getSpeed(body),\r\n                angularSpeed = Body.getAngularSpeed(body),\r\n                motion = speed * speed + angularSpeed * angularSpeed;\r\n\r\n            // wake up bodies if they have a force applied\r\n            if (body.force.x !== 0 || body.force.y !== 0) {\r\n                Sleeping.set(body, false);\r\n                continue;\r\n            }\r\n\r\n            var minMotion = Math.min(body.motion, motion),\r\n                maxMotion = Math.max(body.motion, motion);\r\n        \r\n            // biased average motion estimation between frames\r\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\r\n\r\n            if (body.sleepThreshold > 0 && body.motion < motionSleepThreshold) {\r\n                body.sleepCounter += 1;\r\n                \r\n                if (body.sleepCounter >= body.sleepThreshold / timeScale) {\r\n                    Sleeping.set(body, true);\r\n                }\r\n            } else if (body.sleepCounter > 0) {\r\n                body.sleepCounter -= 1;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\r\n     * @method afterCollisions\r\n     * @param {pair[]} pairs\r\n     */\r\n    Sleeping.afterCollisions = function(pairs) {\r\n        var motionSleepThreshold = Sleeping._motionSleepThreshold;\r\n\r\n        // wake up bodies involved in collisions\r\n        for (var i = 0; i < pairs.length; i++) {\r\n            var pair = pairs[i];\r\n            \r\n            // don't wake inactive pairs\r\n            if (!pair.isActive)\r\n                continue;\r\n\r\n            var collision = pair.collision,\r\n                bodyA = collision.bodyA.parent, \r\n                bodyB = collision.bodyB.parent;\r\n        \r\n            // don't wake if at least one body is static\r\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\r\n                continue;\r\n        \r\n            if (bodyA.isSleeping || bodyB.isSleeping) {\r\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\r\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\r\n\r\n                if (!sleepingBody.isStatic && movingBody.motion > motionSleepThreshold) {\r\n                    Sleeping.set(sleepingBody, false);\r\n                }\r\n            }\r\n        }\r\n    };\r\n  \r\n    /**\r\n     * Set a body as sleeping or awake.\r\n     * @method set\r\n     * @param {body} body\r\n     * @param {boolean} isSleeping\r\n     */\r\n    Sleeping.set = function(body, isSleeping) {\r\n        var wasSleeping = body.isSleeping;\r\n\r\n        if (isSleeping) {\r\n            body.isSleeping = true;\r\n            body.sleepCounter = body.sleepThreshold;\r\n\r\n            body.positionImpulse.x = 0;\r\n            body.positionImpulse.y = 0;\r\n\r\n            body.positionPrev.x = body.position.x;\r\n            body.positionPrev.y = body.position.y;\r\n\r\n            body.anglePrev = body.angle;\r\n            body.speed = 0;\r\n            body.angularSpeed = 0;\r\n            body.motion = 0;\r\n\r\n            if (!wasSleeping) {\r\n                Events.trigger(body, 'sleepStart');\r\n            }\r\n        } else {\r\n            body.isSleeping = false;\r\n            body.sleepCounter = 0;\r\n\r\n            if (wasSleeping) {\r\n                Events.trigger(body, 'sleepEnd');\r\n            }\r\n        }\r\n    };\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 8 */\r\n/***/ (function(module, exports, __nested_webpack_require_134194__) {\r\n\r\n/**\r\n* The `Matter.Collision` module contains methods for detecting collisions between a given pair of bodies.\r\n*\r\n* For efficient detection between a list of bodies, see `Matter.Detector` and `Matter.Query`.\r\n*\r\n* See `Matter.Engine` for collision events.\r\n*\r\n* @class Collision\r\n*/\r\n\r\nvar Collision = {};\r\n\r\nmodule.exports = Collision;\r\n\r\nvar Vertices = __nested_webpack_require_134194__(3);\r\nvar Pair = __nested_webpack_require_134194__(9);\r\n\r\n(function() {\r\n    var _supports = [];\r\n\r\n    var _overlapAB = {\r\n        overlap: 0,\r\n        axis: null\r\n    };\r\n\r\n    var _overlapBA = {\r\n        overlap: 0,\r\n        axis: null\r\n    };\r\n\r\n    /**\r\n     * Creates a new collision record.\r\n     * @method create\r\n     * @param {body} bodyA The first body part represented by the collision record\r\n     * @param {body} bodyB The second body part represented by the collision record\r\n     * @return {collision} A new collision record\r\n     */\r\n    Collision.create = function(bodyA, bodyB) {\r\n        return { \r\n            pair: null,\r\n            collided: false,\r\n            bodyA: bodyA,\r\n            bodyB: bodyB,\r\n            parentA: bodyA.parent,\r\n            parentB: bodyB.parent,\r\n            depth: 0,\r\n            normal: { x: 0, y: 0 },\r\n            tangent: { x: 0, y: 0 },\r\n            penetration: { x: 0, y: 0 },\r\n            supports: []\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Detect collision between two bodies.\r\n     * @method collides\r\n     * @param {body} bodyA\r\n     * @param {body} bodyB\r\n     * @param {pairs} [pairs] Optionally reuse collision records from existing pairs.\r\n     * @return {collision|null} A collision record if detected, otherwise null\r\n     */\r\n    Collision.collides = function(bodyA, bodyB, pairs) {\r\n        Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);\r\n\r\n        if (_overlapAB.overlap <= 0) {\r\n            return null;\r\n        }\r\n\r\n        Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);\r\n\r\n        if (_overlapBA.overlap <= 0) {\r\n            return null;\r\n        }\r\n\r\n        // reuse collision records for gc efficiency\r\n        var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)],\r\n            collision;\r\n\r\n        if (!pair) {\r\n            collision = Collision.create(bodyA, bodyB);\r\n            collision.collided = true;\r\n            collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\r\n            collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\r\n            collision.parentA = collision.bodyA.parent;\r\n            collision.parentB = collision.bodyB.parent;\r\n        } else {\r\n            collision = pair.collision;\r\n        }\r\n\r\n        bodyA = collision.bodyA;\r\n        bodyB = collision.bodyB;\r\n\r\n        var minOverlap;\r\n\r\n        if (_overlapAB.overlap < _overlapBA.overlap) {\r\n            minOverlap = _overlapAB;\r\n        } else {\r\n            minOverlap = _overlapBA;\r\n        }\r\n\r\n        var normal = collision.normal,\r\n            supports = collision.supports,\r\n            minAxis = minOverlap.axis,\r\n            minAxisX = minAxis.x,\r\n            minAxisY = minAxis.y;\r\n\r\n        // ensure normal is facing away from bodyA\r\n        if (minAxisX * (bodyB.position.x - bodyA.position.x) + minAxisY * (bodyB.position.y - bodyA.position.y) < 0) {\r\n            normal.x = minAxisX;\r\n            normal.y = minAxisY;\r\n        } else {\r\n            normal.x = -minAxisX;\r\n            normal.y = -minAxisY;\r\n        }\r\n        \r\n        collision.tangent.x = -normal.y;\r\n        collision.tangent.y = normal.x;\r\n\r\n        collision.depth = minOverlap.overlap;\r\n\r\n        collision.penetration.x = normal.x * collision.depth;\r\n        collision.penetration.y = normal.y * collision.depth;\r\n\r\n        // find support points, there is always either exactly one or two\r\n        var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1),\r\n            supportCount = 0;\r\n\r\n        // find the supports from bodyB that are inside bodyA\r\n        if (Vertices.contains(bodyA.vertices, supportsB[0])) {\r\n            supports[supportCount++] = supportsB[0];\r\n        }\r\n\r\n        if (Vertices.contains(bodyA.vertices, supportsB[1])) {\r\n            supports[supportCount++] = supportsB[1];\r\n        }\r\n\r\n        // find the supports from bodyA that are inside bodyB\r\n        if (supportCount < 2) {\r\n            var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);\r\n\r\n            if (Vertices.contains(bodyB.vertices, supportsA[0])) {\r\n                supports[supportCount++] = supportsA[0];\r\n            }\r\n\r\n            if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) {\r\n                supports[supportCount++] = supportsA[1];\r\n            }\r\n        }\r\n\r\n        // account for the edge case of overlapping but no vertex containment\r\n        if (supportCount === 0) {\r\n            supports[supportCount++] = supportsB[0];\r\n        }\r\n\r\n        // update supports array size\r\n        supports.length = supportCount;\r\n\r\n        return collision;\r\n    };\r\n\r\n    /**\r\n     * Find the overlap between two sets of vertices.\r\n     * @method _overlapAxes\r\n     * @private\r\n     * @param {object} result\r\n     * @param {vertices} verticesA\r\n     * @param {vertices} verticesB\r\n     * @param {axes} axes\r\n     */\r\n    Collision._overlapAxes = function(result, verticesA, verticesB, axes) {\r\n        var verticesALength = verticesA.length,\r\n            verticesBLength = verticesB.length,\r\n            verticesAX = verticesA[0].x,\r\n            verticesAY = verticesA[0].y,\r\n            verticesBX = verticesB[0].x,\r\n            verticesBY = verticesB[0].y,\r\n            axesLength = axes.length,\r\n            overlapMin = Number.MAX_VALUE,\r\n            overlapAxisNumber = 0,\r\n            overlap,\r\n            overlapAB,\r\n            overlapBA,\r\n            dot,\r\n            i,\r\n            j;\r\n\r\n        for (i = 0; i < axesLength; i++) {\r\n            var axis = axes[i],\r\n                axisX = axis.x,\r\n                axisY = axis.y,\r\n                minA = verticesAX * axisX + verticesAY * axisY,\r\n                minB = verticesBX * axisX + verticesBY * axisY,\r\n                maxA = minA,\r\n                maxB = minB;\r\n            \r\n            for (j = 1; j < verticesALength; j += 1) {\r\n                dot = verticesA[j].x * axisX + verticesA[j].y * axisY;\r\n\r\n                if (dot > maxA) { \r\n                    maxA = dot;\r\n                } else if (dot < minA) { \r\n                    minA = dot;\r\n                }\r\n            }\r\n\r\n            for (j = 1; j < verticesBLength; j += 1) {\r\n                dot = verticesB[j].x * axisX + verticesB[j].y * axisY;\r\n\r\n                if (dot > maxB) { \r\n                    maxB = dot;\r\n                } else if (dot < minB) { \r\n                    minB = dot;\r\n                }\r\n            }\r\n\r\n            overlapAB = maxA - minB;\r\n            overlapBA = maxB - minA;\r\n            overlap = overlapAB < overlapBA ? overlapAB : overlapBA;\r\n\r\n            if (overlap < overlapMin) {\r\n                overlapMin = overlap;\r\n                overlapAxisNumber = i;\r\n\r\n                if (overlap <= 0) {\r\n                    // can not be intersecting\r\n                    break;\r\n                }\r\n            } \r\n        }\r\n\r\n        result.axis = axes[overlapAxisNumber];\r\n        result.overlap = overlapMin;\r\n    };\r\n\r\n    /**\r\n     * Projects vertices on an axis and returns an interval.\r\n     * @method _projectToAxis\r\n     * @private\r\n     * @param {} projection\r\n     * @param {} vertices\r\n     * @param {} axis\r\n     */\r\n    Collision._projectToAxis = function(projection, vertices, axis) {\r\n        var min = vertices[0].x * axis.x + vertices[0].y * axis.y,\r\n            max = min;\r\n\r\n        for (var i = 1; i < vertices.length; i += 1) {\r\n            var dot = vertices[i].x * axis.x + vertices[i].y * axis.y;\r\n\r\n            if (dot > max) { \r\n                max = dot; \r\n            } else if (dot < min) { \r\n                min = dot; \r\n            }\r\n        }\r\n\r\n        projection.min = min;\r\n        projection.max = max;\r\n    };\r\n\r\n    /**\r\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\r\n     * @method _findSupports\r\n     * @private\r\n     * @param {body} bodyA\r\n     * @param {body} bodyB\r\n     * @param {vector} normal\r\n     * @param {number} direction\r\n     * @return [vector]\r\n     */\r\n    Collision._findSupports = function(bodyA, bodyB, normal, direction) {\r\n        var vertices = bodyB.vertices,\r\n            verticesLength = vertices.length,\r\n            bodyAPositionX = bodyA.position.x,\r\n            bodyAPositionY = bodyA.position.y,\r\n            normalX = normal.x * direction,\r\n            normalY = normal.y * direction,\r\n            nearestDistance = Number.MAX_VALUE,\r\n            vertexA,\r\n            vertexB,\r\n            vertexC,\r\n            distance,\r\n            j;\r\n\r\n        // find deepest vertex relative to the axis\r\n        for (j = 0; j < verticesLength; j += 1) {\r\n            vertexB = vertices[j];\r\n            distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y);\r\n\r\n            // convex hill-climbing\r\n            if (distance < nearestDistance) {\r\n                nearestDistance = distance;\r\n                vertexA = vertexB;\r\n            }\r\n        }\r\n\r\n        // measure next vertex\r\n        vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];\r\n        nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y);\r\n\r\n        // compare with previous vertex\r\n        vertexB = vertices[(vertexA.index + 1) % verticesLength];\r\n        if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {\r\n            _supports[0] = vertexA;\r\n            _supports[1] = vertexB;\r\n\r\n            return _supports;\r\n        }\r\n\r\n        _supports[0] = vertexA;\r\n        _supports[1] = vertexC;\r\n\r\n        return _supports;\r\n    };\r\n\r\n    /*\r\n    *\r\n    *  Properties Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n     * A reference to the pair using this collision record, if there is one.\r\n     *\r\n     * @property pair\r\n     * @type {pair|null}\r\n     * @default null\r\n     */\r\n\r\n    /**\r\n     * A flag that indicates if the bodies were colliding when the collision was last updated.\r\n     * \r\n     * @property collided\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * The first body part represented by the collision (see also `collision.parentA`).\r\n     * \r\n     * @property bodyA\r\n     * @type body\r\n     */\r\n\r\n    /**\r\n     * The second body part represented by the collision (see also `collision.parentB`).\r\n     * \r\n     * @property bodyB\r\n     * @type body\r\n     */\r\n\r\n    /**\r\n     * The first body represented by the collision (i.e. `collision.bodyA.parent`).\r\n     * \r\n     * @property parentA\r\n     * @type body\r\n     */\r\n\r\n    /**\r\n     * The second body represented by the collision (i.e. `collision.bodyB.parent`).\r\n     * \r\n     * @property parentB\r\n     * @type body\r\n     */\r\n\r\n    /**\r\n     * A `Number` that represents the minimum separating distance between the bodies along the collision normal.\r\n     *\r\n     * @readOnly\r\n     * @property depth\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * A normalised `Vector` that represents the direction between the bodies that provides the minimum separating distance.\r\n     *\r\n     * @property normal\r\n     * @type vector\r\n     * @default { x: 0, y: 0 }\r\n     */\r\n\r\n    /**\r\n     * A normalised `Vector` that is the tangent direction to the collision normal.\r\n     *\r\n     * @property tangent\r\n     * @type vector\r\n     * @default { x: 0, y: 0 }\r\n     */\r\n\r\n    /**\r\n     * A `Vector` that represents the direction and depth of the collision.\r\n     *\r\n     * @property penetration\r\n     * @type vector\r\n     * @default { x: 0, y: 0 }\r\n     */\r\n\r\n    /**\r\n     * An array of body vertices that represent the support points in the collision.\r\n     * These are the deepest vertices (along the collision normal) of each body that are contained by the other body's vertices.\r\n     *\r\n     * @property supports\r\n     * @type vector[]\r\n     * @default []\r\n     */\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 9 */\r\n/***/ (function(module, exports, __nested_webpack_require_146511__) {\r\n\r\n/**\r\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\r\n*\r\n* @class Pair\r\n*/\r\n\r\nvar Pair = {};\r\n\r\nmodule.exports = Pair;\r\n\r\nvar Contact = __nested_webpack_require_146511__(16);\r\n\r\n(function() {\r\n    \r\n    /**\r\n     * Creates a pair.\r\n     * @method create\r\n     * @param {collision} collision\r\n     * @param {number} timestamp\r\n     * @return {pair} A new pair\r\n     */\r\n    Pair.create = function(collision, timestamp) {\r\n        var bodyA = collision.bodyA,\r\n            bodyB = collision.bodyB;\r\n\r\n        var pair = {\r\n            id: Pair.id(bodyA, bodyB),\r\n            bodyA: bodyA,\r\n            bodyB: bodyB,\r\n            collision: collision,\r\n            contacts: [],\r\n            activeContacts: [],\r\n            separation: 0,\r\n            isActive: true,\r\n            confirmedActive: true,\r\n            isSensor: bodyA.isSensor || bodyB.isSensor,\r\n            timeCreated: timestamp,\r\n            timeUpdated: timestamp,\r\n            inverseMass: 0,\r\n            friction: 0,\r\n            frictionStatic: 0,\r\n            restitution: 0,\r\n            slop: 0\r\n        };\r\n\r\n        Pair.update(pair, collision, timestamp);\r\n\r\n        return pair;\r\n    };\r\n\r\n    /**\r\n     * Updates a pair given a collision.\r\n     * @method update\r\n     * @param {pair} pair\r\n     * @param {collision} collision\r\n     * @param {number} timestamp\r\n     */\r\n    Pair.update = function(pair, collision, timestamp) {\r\n        var contacts = pair.contacts,\r\n            supports = collision.supports,\r\n            activeContacts = pair.activeContacts,\r\n            parentA = collision.parentA,\r\n            parentB = collision.parentB,\r\n            parentAVerticesLength = parentA.vertices.length;\r\n        \r\n        pair.isActive = true;\r\n        pair.timeUpdated = timestamp;\r\n        pair.collision = collision;\r\n        pair.separation = collision.depth;\r\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\r\n        pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;\r\n        pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;\r\n        pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;\r\n        pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;\r\n\r\n        collision.pair = pair;\r\n        activeContacts.length = 0;\r\n        \r\n        for (var i = 0; i < supports.length; i++) {\r\n            var support = supports[i],\r\n                contactId = support.body === parentA ? support.index : parentAVerticesLength + support.index,\r\n                contact = contacts[contactId];\r\n\r\n            if (contact) {\r\n                activeContacts.push(contact);\r\n            } else {\r\n                activeContacts.push(contacts[contactId] = Contact.create(support));\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Set a pair as active or inactive.\r\n     * @method setActive\r\n     * @param {pair} pair\r\n     * @param {bool} isActive\r\n     * @param {number} timestamp\r\n     */\r\n    Pair.setActive = function(pair, isActive, timestamp) {\r\n        if (isActive) {\r\n            pair.isActive = true;\r\n            pair.timeUpdated = timestamp;\r\n        } else {\r\n            pair.isActive = false;\r\n            pair.activeContacts.length = 0;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the id for the given pair.\r\n     * @method id\r\n     * @param {body} bodyA\r\n     * @param {body} bodyB\r\n     * @return {string} Unique pairId\r\n     */\r\n    Pair.id = function(bodyA, bodyB) {\r\n        if (bodyA.id < bodyB.id) {\r\n            return 'A' + bodyA.id + 'B' + bodyB.id;\r\n        } else {\r\n            return 'A' + bodyB.id + 'B' + bodyA.id;\r\n        }\r\n    };\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 10 */\r\n/***/ (function(module, exports, __nested_webpack_require_150385__) {\r\n\r\n/**\r\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\r\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\r\n* The stiffness of constraints can be modified to create springs or elastic.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Constraint\r\n*/\r\n\r\nvar Constraint = {};\r\n\r\nmodule.exports = Constraint;\r\n\r\nvar Vertices = __nested_webpack_require_150385__(3);\r\nvar Vector = __nested_webpack_require_150385__(2);\r\nvar Sleeping = __nested_webpack_require_150385__(7);\r\nvar Bounds = __nested_webpack_require_150385__(1);\r\nvar Axes = __nested_webpack_require_150385__(11);\r\nvar Common = __nested_webpack_require_150385__(0);\r\n\r\n(function() {\r\n\r\n    Constraint._warming = 0.4;\r\n    Constraint._torqueDampen = 1;\r\n    Constraint._minLength = 0.000001;\r\n\r\n    /**\r\n     * Creates a new constraint.\r\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\r\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\r\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\r\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\r\n     * See the properties section below for detailed information on what you can pass via the `options` object.\r\n     * @method create\r\n     * @param {} options\r\n     * @return {constraint} constraint\r\n     */\r\n    Constraint.create = function(options) {\r\n        var constraint = options;\r\n\r\n        // if bodies defined but no points, use body centre\r\n        if (constraint.bodyA && !constraint.pointA)\r\n            constraint.pointA = { x: 0, y: 0 };\r\n        if (constraint.bodyB && !constraint.pointB)\r\n            constraint.pointB = { x: 0, y: 0 };\r\n\r\n        // calculate static length using initial world space points\r\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\r\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\r\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\r\n    \r\n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\r\n\r\n        // option defaults\r\n        constraint.id = constraint.id || Common.nextId();\r\n        constraint.label = constraint.label || 'Constraint';\r\n        constraint.type = 'constraint';\r\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\r\n        constraint.damping = constraint.damping || 0;\r\n        constraint.angularStiffness = constraint.angularStiffness || 0;\r\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\r\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\r\n        constraint.plugin = {};\r\n\r\n        // render\r\n        var render = {\r\n            visible: true,\r\n            lineWidth: 2,\r\n            strokeStyle: '#ffffff',\r\n            type: 'line',\r\n            anchors: true\r\n        };\r\n\r\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\r\n            render.type = 'pin';\r\n            render.anchors = false;\r\n        } else if (constraint.stiffness < 0.9) {\r\n            render.type = 'spring';\r\n        }\r\n\r\n        constraint.render = Common.extend(render, constraint.render);\r\n\r\n        return constraint;\r\n    };\r\n\r\n    /**\r\n     * Prepares for solving by constraint warming.\r\n     * @private\r\n     * @method preSolveAll\r\n     * @param {body[]} bodies\r\n     */\r\n    Constraint.preSolveAll = function(bodies) {\r\n        for (var i = 0; i < bodies.length; i += 1) {\r\n            var body = bodies[i],\r\n                impulse = body.constraintImpulse;\r\n\r\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\r\n                continue;\r\n            }\r\n\r\n            body.position.x += impulse.x;\r\n            body.position.y += impulse.y;\r\n            body.angle += impulse.angle;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Solves all constraints in a list of collisions.\r\n     * @private\r\n     * @method solveAll\r\n     * @param {constraint[]} constraints\r\n     * @param {number} delta\r\n     */\r\n    Constraint.solveAll = function(constraints, delta) {\r\n        var timeScale = Common.clamp(delta / Common._baseDelta, 0, 1);\r\n\r\n        // Solve fixed constraints first.\r\n        for (var i = 0; i < constraints.length; i += 1) {\r\n            var constraint = constraints[i],\r\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\r\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\r\n\r\n            if (fixedA || fixedB) {\r\n                Constraint.solve(constraints[i], timeScale);\r\n            }\r\n        }\r\n\r\n        // Solve free constraints last.\r\n        for (i = 0; i < constraints.length; i += 1) {\r\n            constraint = constraints[i];\r\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\r\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\r\n\r\n            if (!fixedA && !fixedB) {\r\n                Constraint.solve(constraints[i], timeScale);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Solves a distance constraint with Gauss-Siedel method.\r\n     * @private\r\n     * @method solve\r\n     * @param {constraint} constraint\r\n     * @param {number} timeScale\r\n     */\r\n    Constraint.solve = function(constraint, timeScale) {\r\n        var bodyA = constraint.bodyA,\r\n            bodyB = constraint.bodyB,\r\n            pointA = constraint.pointA,\r\n            pointB = constraint.pointB;\r\n\r\n        if (!bodyA && !bodyB)\r\n            return;\r\n\r\n        // update reference angle\r\n        if (bodyA && !bodyA.isStatic) {\r\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\r\n            constraint.angleA = bodyA.angle;\r\n        }\r\n        \r\n        // update reference angle\r\n        if (bodyB && !bodyB.isStatic) {\r\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\r\n            constraint.angleB = bodyB.angle;\r\n        }\r\n\r\n        var pointAWorld = pointA,\r\n            pointBWorld = pointB;\r\n\r\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\r\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\r\n\r\n        if (!pointAWorld || !pointBWorld)\r\n            return;\r\n\r\n        var delta = Vector.sub(pointAWorld, pointBWorld),\r\n            currentLength = Vector.magnitude(delta);\r\n\r\n        // prevent singularity\r\n        if (currentLength < Constraint._minLength) {\r\n            currentLength = Constraint._minLength;\r\n        }\r\n\r\n        // solve distance constraint with Gauss-Siedel method\r\n        var difference = (currentLength - constraint.length) / currentLength,\r\n            isRigid = constraint.stiffness >= 1 || constraint.length === 0,\r\n            stiffness = isRigid ? constraint.stiffness * timeScale \r\n                : constraint.stiffness * timeScale * timeScale,\r\n            damping = constraint.damping * timeScale,\r\n            force = Vector.mult(delta, difference * stiffness),\r\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\r\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\r\n            resistanceTotal = massTotal + inertiaTotal,\r\n            torque,\r\n            share,\r\n            normal,\r\n            normalVelocity,\r\n            relativeVelocity;\r\n    \r\n        if (damping > 0) {\r\n            var zero = Vector.create();\r\n            normal = Vector.div(delta, currentLength);\r\n\r\n            relativeVelocity = Vector.sub(\r\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\r\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\r\n            );\r\n\r\n            normalVelocity = Vector.dot(normal, relativeVelocity);\r\n        }\r\n\r\n        if (bodyA && !bodyA.isStatic) {\r\n            share = bodyA.inverseMass / massTotal;\r\n\r\n            // keep track of applied impulses for post solving\r\n            bodyA.constraintImpulse.x -= force.x * share;\r\n            bodyA.constraintImpulse.y -= force.y * share;\r\n\r\n            // apply forces\r\n            bodyA.position.x -= force.x * share;\r\n            bodyA.position.y -= force.y * share;\r\n\r\n            // apply damping\r\n            if (damping > 0) {\r\n                bodyA.positionPrev.x -= damping * normal.x * normalVelocity * share;\r\n                bodyA.positionPrev.y -= damping * normal.y * normalVelocity * share;\r\n            }\r\n\r\n            // apply torque\r\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\r\n            bodyA.constraintImpulse.angle -= torque;\r\n            bodyA.angle -= torque;\r\n        }\r\n\r\n        if (bodyB && !bodyB.isStatic) {\r\n            share = bodyB.inverseMass / massTotal;\r\n\r\n            // keep track of applied impulses for post solving\r\n            bodyB.constraintImpulse.x += force.x * share;\r\n            bodyB.constraintImpulse.y += force.y * share;\r\n            \r\n            // apply forces\r\n            bodyB.position.x += force.x * share;\r\n            bodyB.position.y += force.y * share;\r\n\r\n            // apply damping\r\n            if (damping > 0) {\r\n                bodyB.positionPrev.x += damping * normal.x * normalVelocity * share;\r\n                bodyB.positionPrev.y += damping * normal.y * normalVelocity * share;\r\n            }\r\n\r\n            // apply torque\r\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\r\n            bodyB.constraintImpulse.angle += torque;\r\n            bodyB.angle += torque;\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Performs body updates required after solving constraints.\r\n     * @private\r\n     * @method postSolveAll\r\n     * @param {body[]} bodies\r\n     */\r\n    Constraint.postSolveAll = function(bodies) {\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i],\r\n                impulse = body.constraintImpulse;\r\n\r\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\r\n                continue;\r\n            }\r\n\r\n            Sleeping.set(body, false);\r\n\r\n            // update geometry and reset\r\n            for (var j = 0; j < body.parts.length; j++) {\r\n                var part = body.parts[j];\r\n                \r\n                Vertices.translate(part.vertices, impulse);\r\n\r\n                if (j > 0) {\r\n                    part.position.x += impulse.x;\r\n                    part.position.y += impulse.y;\r\n                }\r\n\r\n                if (impulse.angle !== 0) {\r\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\r\n                    Axes.rotate(part.axes, impulse.angle);\r\n                    if (j > 0) {\r\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\r\n                    }\r\n                }\r\n\r\n                Bounds.update(part.bounds, part.vertices, body.velocity);\r\n            }\r\n\r\n            // dampen the cached impulse for warming next step\r\n            impulse.angle *= Constraint._warming;\r\n            impulse.x *= Constraint._warming;\r\n            impulse.y *= Constraint._warming;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\r\n     * @method pointAWorld\r\n     * @param {constraint} constraint\r\n     * @returns {vector} the world-space position\r\n     */\r\n    Constraint.pointAWorld = function(constraint) {\r\n        return {\r\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) \r\n                + (constraint.pointA ? constraint.pointA.x : 0),\r\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) \r\n                + (constraint.pointA ? constraint.pointA.y : 0)\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\r\n     * @method pointBWorld\r\n     * @param {constraint} constraint\r\n     * @returns {vector} the world-space position\r\n     */\r\n    Constraint.pointBWorld = function(constraint) {\r\n        return {\r\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) \r\n                + (constraint.pointB ? constraint.pointB.x : 0),\r\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) \r\n                + (constraint.pointB ? constraint.pointB.y : 0)\r\n        };\r\n    };\r\n\r\n    /*\r\n    *\r\n    *  Properties Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\r\n     *\r\n     * @property id\r\n     * @type number\r\n     */\r\n\r\n    /**\r\n     * A `String` denoting the type of object.\r\n     *\r\n     * @property type\r\n     * @type string\r\n     * @default \"constraint\"\r\n     * @readOnly\r\n     */\r\n\r\n    /**\r\n     * An arbitrary `String` name to help the user identify and manage bodies.\r\n     *\r\n     * @property label\r\n     * @type string\r\n     * @default \"Constraint\"\r\n     */\r\n\r\n    /**\r\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\r\n     *\r\n     * @property render\r\n     * @type object\r\n     */\r\n\r\n    /**\r\n     * A flag that indicates if the constraint should be rendered.\r\n     *\r\n     * @property render.visible\r\n     * @type boolean\r\n     * @default true\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the line width to use when rendering the constraint outline.\r\n     * A value of `0` means no outline will be rendered.\r\n     *\r\n     * @property render.lineWidth\r\n     * @type number\r\n     * @default 2\r\n     */\r\n\r\n    /**\r\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\r\n     * It is the same as when using a canvas, so it accepts CSS style property values.\r\n     *\r\n     * @property render.strokeStyle\r\n     * @type string\r\n     * @default a random colour\r\n     */\r\n\r\n    /**\r\n     * A `String` that defines the constraint rendering type. \r\n     * The possible values are 'line', 'pin', 'spring'.\r\n     * An appropriate render type will be automatically chosen unless one is given in options.\r\n     *\r\n     * @property render.type\r\n     * @type string\r\n     * @default 'line'\r\n     */\r\n\r\n    /**\r\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\r\n     *\r\n     * @property render.anchors\r\n     * @type boolean\r\n     * @default true\r\n     */\r\n\r\n    /**\r\n     * The first possible `Body` that this constraint is attached to.\r\n     *\r\n     * @property bodyA\r\n     * @type body\r\n     * @default null\r\n     */\r\n\r\n    /**\r\n     * The second possible `Body` that this constraint is attached to.\r\n     *\r\n     * @property bodyB\r\n     * @type body\r\n     * @default null\r\n     */\r\n\r\n    /**\r\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\r\n     *\r\n     * @property pointA\r\n     * @type vector\r\n     * @default { x: 0, y: 0 }\r\n     */\r\n\r\n    /**\r\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\r\n     *\r\n     * @property pointB\r\n     * @type vector\r\n     * @default { x: 0, y: 0 }\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\r\n     * A value of `1` means the constraint should be very stiff.\r\n     * A value of `0.2` means the constraint acts like a soft spring.\r\n     *\r\n     * @property stiffness\r\n     * @type number\r\n     * @default 1\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies the damping of the constraint, \r\n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\r\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\r\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\r\n     * A value of `0` means the constraint will apply no damping.\r\n     *\r\n     * @property damping\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies the target resting length of the constraint. \r\n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\r\n     *\r\n     * @property length\r\n     * @type number\r\n     */\r\n\r\n    /**\r\n     * An object reserved for storing plugin-specific properties.\r\n     *\r\n     * @property plugin\r\n     * @type {}\r\n     */\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 11 */\r\n/***/ (function(module, exports, __nested_webpack_require_167626__) {\r\n\r\n/**\r\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\r\n*\r\n* @class Axes\r\n*/\r\n\r\nvar Axes = {};\r\n\r\nmodule.exports = Axes;\r\n\r\nvar Vector = __nested_webpack_require_167626__(2);\r\nvar Common = __nested_webpack_require_167626__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new set of axes from the given vertices.\r\n     * @method fromVertices\r\n     * @param {vertices} vertices\r\n     * @return {axes} A new axes from the given vertices\r\n     */\r\n    Axes.fromVertices = function(vertices) {\r\n        var axes = {};\r\n\r\n        // find the unique axes, using edge normal gradients\r\n        for (var i = 0; i < vertices.length; i++) {\r\n            var j = (i + 1) % vertices.length, \r\n                normal = Vector.normalise({ \r\n                    x: vertices[j].y - vertices[i].y, \r\n                    y: vertices[i].x - vertices[j].x\r\n                }),\r\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\r\n            \r\n            // limit precision\r\n            gradient = gradient.toFixed(3).toString();\r\n            axes[gradient] = normal;\r\n        }\r\n\r\n        return Common.values(axes);\r\n    };\r\n\r\n    /**\r\n     * Rotates a set of axes by the given angle.\r\n     * @method rotate\r\n     * @param {axes} axes\r\n     * @param {number} angle\r\n     */\r\n    Axes.rotate = function(axes, angle) {\r\n        if (angle === 0)\r\n            return;\r\n        \r\n        var cos = Math.cos(angle),\r\n            sin = Math.sin(angle);\r\n\r\n        for (var i = 0; i < axes.length; i++) {\r\n            var axis = axes[i],\r\n                xx;\r\n            xx = axis.x * cos - axis.y * sin;\r\n            axis.y = axis.x * sin + axis.y * cos;\r\n            axis.x = xx;\r\n        }\r\n    };\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 12 */\r\n/***/ (function(module, exports, __nested_webpack_require_169437__) {\r\n\r\n/**\r\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \r\n* with commonly used body configurations (such as rectangles, circles and other polygons).\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Bodies\r\n*/\r\n\r\n// TODO: true circle bodies\r\n\r\nvar Bodies = {};\r\n\r\nmodule.exports = Bodies;\r\n\r\nvar Vertices = __nested_webpack_require_169437__(3);\r\nvar Common = __nested_webpack_require_169437__(0);\r\nvar Body = __nested_webpack_require_169437__(4);\r\nvar Bounds = __nested_webpack_require_169437__(1);\r\nvar Vector = __nested_webpack_require_169437__(2);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new rigid body model with a rectangle hull. \r\n     * The options parameter is an object that specifies any properties you wish to override the defaults.\r\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\r\n     * @method rectangle\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} width\r\n     * @param {number} height\r\n     * @param {object} [options]\r\n     * @return {body} A new rectangle body\r\n     */\r\n    Bodies.rectangle = function(x, y, width, height, options) {\r\n        options = options || {};\r\n\r\n        var rectangle = { \r\n            label: 'Rectangle Body',\r\n            position: { x: x, y: y },\r\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\r\n        };\r\n\r\n        if (options.chamfer) {\r\n            var chamfer = options.chamfer;\r\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \r\n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\r\n            delete options.chamfer;\r\n        }\r\n\r\n        return Body.create(Common.extend({}, rectangle, options));\r\n    };\r\n    \r\n    /**\r\n     * Creates a new rigid body model with a trapezoid hull. \r\n     * The options parameter is an object that specifies any properties you wish to override the defaults.\r\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\r\n     * @method trapezoid\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} width\r\n     * @param {number} height\r\n     * @param {number} slope\r\n     * @param {object} [options]\r\n     * @return {body} A new trapezoid body\r\n     */\r\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\r\n        options = options || {};\r\n\r\n        slope *= 0.5;\r\n        var roof = (1 - (slope * 2)) * width;\r\n        \r\n        var x1 = width * slope,\r\n            x2 = x1 + roof,\r\n            x3 = x2 + x1,\r\n            verticesPath;\r\n\r\n        if (slope < 0.5) {\r\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\r\n        } else {\r\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\r\n        }\r\n\r\n        var trapezoid = { \r\n            label: 'Trapezoid Body',\r\n            position: { x: x, y: y },\r\n            vertices: Vertices.fromPath(verticesPath)\r\n        };\r\n\r\n        if (options.chamfer) {\r\n            var chamfer = options.chamfer;\r\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \r\n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\r\n            delete options.chamfer;\r\n        }\r\n\r\n        return Body.create(Common.extend({}, trapezoid, options));\r\n    };\r\n\r\n    /**\r\n     * Creates a new rigid body model with a circle hull. \r\n     * The options parameter is an object that specifies any properties you wish to override the defaults.\r\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\r\n     * @method circle\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} radius\r\n     * @param {object} [options]\r\n     * @param {number} [maxSides]\r\n     * @return {body} A new circle body\r\n     */\r\n    Bodies.circle = function(x, y, radius, options, maxSides) {\r\n        options = options || {};\r\n\r\n        var circle = {\r\n            label: 'Circle Body',\r\n            circleRadius: radius\r\n        };\r\n        \r\n        // approximate circles with polygons until true circles implemented in SAT\r\n        maxSides = maxSides || 25;\r\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\r\n\r\n        // optimisation: always use even number of sides (half the number of unique axes)\r\n        if (sides % 2 === 1)\r\n            sides += 1;\r\n\r\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\r\n    };\r\n\r\n    /**\r\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \r\n     * The options parameter is an object that specifies any properties you wish to override the defaults.\r\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\r\n     * @method polygon\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} sides\r\n     * @param {number} radius\r\n     * @param {object} [options]\r\n     * @return {body} A new regular polygon body\r\n     */\r\n    Bodies.polygon = function(x, y, sides, radius, options) {\r\n        options = options || {};\r\n\r\n        if (sides < 3)\r\n            return Bodies.circle(x, y, radius, options);\r\n\r\n        var theta = 2 * Math.PI / sides,\r\n            path = '',\r\n            offset = theta * 0.5;\r\n\r\n        for (var i = 0; i < sides; i += 1) {\r\n            var angle = offset + (i * theta),\r\n                xx = Math.cos(angle) * radius,\r\n                yy = Math.sin(angle) * radius;\r\n\r\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\r\n        }\r\n\r\n        var polygon = { \r\n            label: 'Polygon Body',\r\n            position: { x: x, y: y },\r\n            vertices: Vertices.fromPath(path)\r\n        };\r\n\r\n        if (options.chamfer) {\r\n            var chamfer = options.chamfer;\r\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \r\n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\r\n            delete options.chamfer;\r\n        }\r\n\r\n        return Body.create(Common.extend({}, polygon, options));\r\n    };\r\n\r\n    /**\r\n     * Utility to create a compound body based on set(s) of vertices.\r\n     * \r\n     * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \r\n     * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\r\n     * \r\n     * The resulting vertices are reorientated about their centre of mass,\r\n     * and offset such that `body.position` corresponds to this point.\r\n     * \r\n     * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\r\n     * To later move the centre of mass see `Body.setCentre`.\r\n     * \r\n     * Note that automatic conconcave decomposition results are not always optimal. \r\n     * For best results, simplify the input vertices as much as possible first.\r\n     * By default this function applies some addtional simplification to help.\r\n     * \r\n     * Some outputs may also require further manual processing afterwards to be robust.\r\n     * In particular some parts may need to be overlapped to avoid collision gaps.\r\n     * Thin parts and sharp points should be avoided or removed where possible.\r\n     *\r\n     * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\r\n     * \r\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\r\n     * @method fromVertices\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\r\n     * @param {object} [options] The body options.\r\n     * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\r\n     * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\r\n     * @param {number} [minimumArea=10] Threshold when removing small parts.\r\n     * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\r\n     * @return {body}\r\n     */\r\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\r\n        var decomp = Common.getDecomp(),\r\n            canDecomp,\r\n            body,\r\n            parts,\r\n            isConvex,\r\n            isConcave,\r\n            vertices,\r\n            i,\r\n            j,\r\n            k,\r\n            v,\r\n            z;\r\n\r\n        // check decomp is as expected\r\n        canDecomp = Boolean(decomp && decomp.quickDecomp);\r\n\r\n        options = options || {};\r\n        parts = [];\r\n\r\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\r\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\r\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\r\n        removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01;\r\n\r\n        // ensure vertexSets is an array of arrays\r\n        if (!Common.isArray(vertexSets[0])) {\r\n            vertexSets = [vertexSets];\r\n        }\r\n\r\n        for (v = 0; v < vertexSets.length; v += 1) {\r\n            vertices = vertexSets[v];\r\n            isConvex = Vertices.isConvex(vertices);\r\n            isConcave = !isConvex;\r\n\r\n            if (isConcave && !canDecomp) {\r\n                Common.warnOnce(\r\n                    'Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.'\r\n                );\r\n            }\r\n\r\n            if (isConvex || !canDecomp) {\r\n                if (isConvex) {\r\n                    vertices = Vertices.clockwiseSort(vertices);\r\n                } else {\r\n                    // fallback to convex hull when decomposition is not possible\r\n                    vertices = Vertices.hull(vertices);\r\n                }\r\n\r\n                parts.push({\r\n                    position: { x: x, y: y },\r\n                    vertices: vertices\r\n                });\r\n            } else {\r\n                // initialise a decomposition\r\n                var concave = vertices.map(function(vertex) {\r\n                    return [vertex.x, vertex.y];\r\n                });\r\n\r\n                // vertices are concave and simple, we can decompose into parts\r\n                decomp.makeCCW(concave);\r\n                if (removeCollinear !== false)\r\n                    decomp.removeCollinearPoints(concave, removeCollinear);\r\n                if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints)\r\n                    decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\r\n\r\n                // use the quick decomposition algorithm (Bayazit)\r\n                var decomposed = decomp.quickDecomp(concave);\r\n\r\n                // for each decomposed chunk\r\n                for (i = 0; i < decomposed.length; i++) {\r\n                    var chunk = decomposed[i];\r\n\r\n                    // convert vertices into the correct structure\r\n                    var chunkVertices = chunk.map(function(vertices) {\r\n                        return {\r\n                            x: vertices[0],\r\n                            y: vertices[1]\r\n                        };\r\n                    });\r\n\r\n                    // skip small chunks\r\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\r\n                        continue;\r\n\r\n                    // create a compound part\r\n                    parts.push({\r\n                        position: Vertices.centre(chunkVertices),\r\n                        vertices: chunkVertices\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        // create body parts\r\n        for (i = 0; i < parts.length; i++) {\r\n            parts[i] = Body.create(Common.extend(parts[i], options));\r\n        }\r\n\r\n        // flag internal edges (coincident part edges)\r\n        if (flagInternal) {\r\n            var coincident_max_dist = 5;\r\n\r\n            for (i = 0; i < parts.length; i++) {\r\n                var partA = parts[i];\r\n\r\n                for (j = i + 1; j < parts.length; j++) {\r\n                    var partB = parts[j];\r\n\r\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\r\n                        var pav = partA.vertices,\r\n                            pbv = partB.vertices;\r\n\r\n                        // iterate vertices of both parts\r\n                        for (k = 0; k < partA.vertices.length; k++) {\r\n                            for (z = 0; z < partB.vertices.length; z++) {\r\n                                // find distances between the vertices\r\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\r\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\r\n\r\n                                // if both vertices are very close, consider the edge concident (internal)\r\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\r\n                                    pav[k].isInternal = true;\r\n                                    pbv[z].isInternal = true;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (parts.length > 1) {\r\n            // create the parent body to be returned, that contains generated compound parts\r\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\r\n\r\n            // offset such that body.position is at the centre off mass\r\n            Body.setPosition(body, { x: x, y: y });\r\n\r\n            return body;\r\n        } else {\r\n            return parts[0];\r\n        }\r\n    };\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 13 */\r\n/***/ (function(module, exports, __nested_webpack_require_183801__) {\r\n\r\n/**\r\n* The `Matter.Detector` module contains methods for efficiently detecting collisions between a list of bodies using a broadphase algorithm.\r\n*\r\n* @class Detector\r\n*/\r\n\r\nvar Detector = {};\r\n\r\nmodule.exports = Detector;\r\n\r\nvar Common = __nested_webpack_require_183801__(0);\r\nvar Collision = __nested_webpack_require_183801__(8);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new collision detector.\r\n     * @method create\r\n     * @param {} options\r\n     * @return {detector} A new collision detector\r\n     */\r\n    Detector.create = function(options) {\r\n        var defaults = {\r\n            bodies: [],\r\n            pairs: null\r\n        };\r\n\r\n        return Common.extend(defaults, options);\r\n    };\r\n\r\n    /**\r\n     * Sets the list of bodies in the detector.\r\n     * @method setBodies\r\n     * @param {detector} detector\r\n     * @param {body[]} bodies\r\n     */\r\n    Detector.setBodies = function(detector, bodies) {\r\n        detector.bodies = bodies.slice(0);\r\n    };\r\n\r\n    /**\r\n     * Clears the detector including its list of bodies.\r\n     * @method clear\r\n     * @param {detector} detector\r\n     */\r\n    Detector.clear = function(detector) {\r\n        detector.bodies = [];\r\n    };\r\n\r\n    /**\r\n     * Efficiently finds all collisions among all the bodies in `detector.bodies` using a broadphase algorithm.\r\n     * \r\n     * _Note:_ The specific ordering of collisions returned is not guaranteed between releases and may change for performance reasons.\r\n     * If a specific ordering is required then apply a sort to the resulting array.\r\n     * @method collisions\r\n     * @param {detector} detector\r\n     * @return {collision[]} collisions\r\n     */\r\n    Detector.collisions = function(detector) {\r\n        var collisions = [],\r\n            pairs = detector.pairs,\r\n            bodies = detector.bodies,\r\n            bodiesLength = bodies.length,\r\n            canCollide = Detector.canCollide,\r\n            collides = Collision.collides,\r\n            i,\r\n            j;\r\n\r\n        bodies.sort(Detector._compareBoundsX);\r\n\r\n        for (i = 0; i < bodiesLength; i++) {\r\n            var bodyA = bodies[i],\r\n                boundsA = bodyA.bounds,\r\n                boundXMax = bodyA.bounds.max.x,\r\n                boundYMax = bodyA.bounds.max.y,\r\n                boundYMin = bodyA.bounds.min.y,\r\n                bodyAStatic = bodyA.isStatic || bodyA.isSleeping,\r\n                partsALength = bodyA.parts.length,\r\n                partsASingle = partsALength === 1;\r\n\r\n            for (j = i + 1; j < bodiesLength; j++) {\r\n                var bodyB = bodies[j],\r\n                    boundsB = bodyB.bounds;\r\n\r\n                if (boundsB.min.x > boundXMax) {\r\n                    break;\r\n                }\r\n\r\n                if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) {\r\n                    continue;\r\n                }\r\n\r\n                if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) {\r\n                    continue;\r\n                }\r\n\r\n                if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) {\r\n                    continue;\r\n                }\r\n\r\n                var partsBLength = bodyB.parts.length;\r\n\r\n                if (partsASingle && partsBLength === 1) {\r\n                    var collision = collides(bodyA, bodyB, pairs);\r\n\r\n                    if (collision) {\r\n                        collisions.push(collision);\r\n                    }\r\n                } else {\r\n                    var partsAStart = partsALength > 1 ? 1 : 0,\r\n                        partsBStart = partsBLength > 1 ? 1 : 0;\r\n                    \r\n                    for (var k = partsAStart; k < partsALength; k++) {\r\n                        var partA = bodyA.parts[k],\r\n                            boundsA = partA.bounds;\r\n\r\n                        for (var z = partsBStart; z < partsBLength; z++) {\r\n                            var partB = bodyB.parts[z],\r\n                                boundsB = partB.bounds;\r\n\r\n                            if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x\r\n                                || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) {\r\n                                continue;\r\n                            }\r\n\r\n                            var collision = collides(partA, partB, pairs);\r\n\r\n                            if (collision) {\r\n                                collisions.push(collision);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return collisions;\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\r\n     * See `body.collisionFilter` for more information.\r\n     * @method canCollide\r\n     * @param {} filterA\r\n     * @param {} filterB\r\n     * @return {bool} `true` if collision can occur\r\n     */\r\n    Detector.canCollide = function(filterA, filterB) {\r\n        if (filterA.group === filterB.group && filterA.group !== 0)\r\n            return filterA.group > 0;\r\n\r\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\r\n    };\r\n\r\n    /**\r\n     * The comparison function used in the broadphase algorithm.\r\n     * Returns the signed delta of the bodies bounds on the x-axis.\r\n     * @private\r\n     * @method _sortCompare\r\n     * @param {body} bodyA\r\n     * @param {body} bodyB\r\n     * @return {number} The signed delta used for sorting\r\n     */\r\n    Detector._compareBoundsX = function(bodyA, bodyB) {\r\n        return bodyA.bounds.min.x - bodyB.bounds.min.x;\r\n    };\r\n\r\n    /*\r\n    *\r\n    *  Properties Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n     * The array of `Matter.Body` between which the detector finds collisions.\r\n     * \r\n     * _Note:_ The order of bodies in this array _is not fixed_ and will be continually managed by the detector.\r\n     * @property bodies\r\n     * @type body[]\r\n     * @default []\r\n     */\r\n\r\n    /**\r\n     * Optional. A `Matter.Pairs` object from which previous collision objects may be reused. Intended for internal `Matter.Engine` usage.\r\n     * @property pairs\r\n     * @type {pairs|null}\r\n     * @default null\r\n     */\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 14 */\r\n/***/ (function(module, exports, __nested_webpack_require_190042__) {\r\n\r\n/**\r\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\r\n*\r\n* @class Mouse\r\n*/\r\n\r\nvar Mouse = {};\r\n\r\nmodule.exports = Mouse;\r\n\r\nvar Common = __nested_webpack_require_190042__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a mouse input.\r\n     * @method create\r\n     * @param {HTMLElement} element\r\n     * @return {mouse} A new mouse\r\n     */\r\n    Mouse.create = function(element) {\r\n        var mouse = {};\r\n\r\n        if (!element) {\r\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\r\n        }\r\n        \r\n        mouse.element = element || document.body;\r\n        mouse.absolute = { x: 0, y: 0 };\r\n        mouse.position = { x: 0, y: 0 };\r\n        mouse.mousedownPosition = { x: 0, y: 0 };\r\n        mouse.mouseupPosition = { x: 0, y: 0 };\r\n        mouse.offset = { x: 0, y: 0 };\r\n        mouse.scale = { x: 1, y: 1 };\r\n        mouse.wheelDelta = 0;\r\n        mouse.button = -1;\r\n        mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\r\n\r\n        mouse.sourceEvents = {\r\n            mousemove: null,\r\n            mousedown: null,\r\n            mouseup: null,\r\n            mousewheel: null\r\n        };\r\n        \r\n        mouse.mousemove = function(event) { \r\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\r\n                touches = event.changedTouches;\r\n\r\n            if (touches) {\r\n                mouse.button = 0;\r\n                event.preventDefault();\r\n            }\r\n\r\n            mouse.absolute.x = position.x;\r\n            mouse.absolute.y = position.y;\r\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\r\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\r\n            mouse.sourceEvents.mousemove = event;\r\n        };\r\n        \r\n        mouse.mousedown = function(event) {\r\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\r\n                touches = event.changedTouches;\r\n\r\n            if (touches) {\r\n                mouse.button = 0;\r\n                event.preventDefault();\r\n            } else {\r\n                mouse.button = event.button;\r\n            }\r\n\r\n            mouse.absolute.x = position.x;\r\n            mouse.absolute.y = position.y;\r\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\r\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\r\n            mouse.mousedownPosition.x = mouse.position.x;\r\n            mouse.mousedownPosition.y = mouse.position.y;\r\n            mouse.sourceEvents.mousedown = event;\r\n        };\r\n        \r\n        mouse.mouseup = function(event) {\r\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\r\n                touches = event.changedTouches;\r\n\r\n            if (touches) {\r\n                event.preventDefault();\r\n            }\r\n            \r\n            mouse.button = -1;\r\n            mouse.absolute.x = position.x;\r\n            mouse.absolute.y = position.y;\r\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\r\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\r\n            mouse.mouseupPosition.x = mouse.position.x;\r\n            mouse.mouseupPosition.y = mouse.position.y;\r\n            mouse.sourceEvents.mouseup = event;\r\n        };\r\n\r\n        mouse.mousewheel = function(event) {\r\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\r\n            event.preventDefault();\r\n        };\r\n\r\n        Mouse.setElement(mouse, mouse.element);\r\n\r\n        return mouse;\r\n    };\r\n\r\n    /**\r\n     * Sets the element the mouse is bound to (and relative to).\r\n     * @method setElement\r\n     * @param {mouse} mouse\r\n     * @param {HTMLElement} element\r\n     */\r\n    Mouse.setElement = function(mouse, element) {\r\n        mouse.element = element;\r\n\r\n        element.addEventListener('mousemove', mouse.mousemove);\r\n        element.addEventListener('mousedown', mouse.mousedown);\r\n        element.addEventListener('mouseup', mouse.mouseup);\r\n        \r\n        element.addEventListener('mousewheel', mouse.mousewheel);\r\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\r\n\r\n        element.addEventListener('touchmove', mouse.mousemove);\r\n        element.addEventListener('touchstart', mouse.mousedown);\r\n        element.addEventListener('touchend', mouse.mouseup);\r\n    };\r\n\r\n    /**\r\n     * Clears all captured source events.\r\n     * @method clearSourceEvents\r\n     * @param {mouse} mouse\r\n     */\r\n    Mouse.clearSourceEvents = function(mouse) {\r\n        mouse.sourceEvents.mousemove = null;\r\n        mouse.sourceEvents.mousedown = null;\r\n        mouse.sourceEvents.mouseup = null;\r\n        mouse.sourceEvents.mousewheel = null;\r\n        mouse.wheelDelta = 0;\r\n    };\r\n\r\n    /**\r\n     * Sets the mouse position offset.\r\n     * @method setOffset\r\n     * @param {mouse} mouse\r\n     * @param {vector} offset\r\n     */\r\n    Mouse.setOffset = function(mouse, offset) {\r\n        mouse.offset.x = offset.x;\r\n        mouse.offset.y = offset.y;\r\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\r\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\r\n    };\r\n\r\n    /**\r\n     * Sets the mouse position scale.\r\n     * @method setScale\r\n     * @param {mouse} mouse\r\n     * @param {vector} scale\r\n     */\r\n    Mouse.setScale = function(mouse, scale) {\r\n        mouse.scale.x = scale.x;\r\n        mouse.scale.y = scale.y;\r\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\r\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\r\n    };\r\n    \r\n    /**\r\n     * Gets the mouse position relative to an element given a screen pixel ratio.\r\n     * @method _getRelativeMousePosition\r\n     * @private\r\n     * @param {} event\r\n     * @param {} element\r\n     * @param {number} pixelRatio\r\n     * @return {}\r\n     */\r\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\r\n        var elementBounds = element.getBoundingClientRect(),\r\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\r\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\r\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\r\n            touches = event.changedTouches,\r\n            x, y;\r\n        \r\n        if (touches) {\r\n            x = touches[0].pageX - elementBounds.left - scrollX;\r\n            y = touches[0].pageY - elementBounds.top - scrollY;\r\n        } else {\r\n            x = event.pageX - elementBounds.left - scrollX;\r\n            y = event.pageY - elementBounds.top - scrollY;\r\n        }\r\n\r\n        return { \r\n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\r\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\r\n        };\r\n    };\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 15 */\r\n/***/ (function(module, exports, __nested_webpack_require_197253__) {\r\n\r\n/**\r\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\r\n*\r\n* @class Plugin\r\n*/\r\n\r\nvar Plugin = {};\r\n\r\nmodule.exports = Plugin;\r\n\r\nvar Common = __nested_webpack_require_197253__(0);\r\n\r\n(function() {\r\n\r\n    Plugin._registry = {};\r\n\r\n    /**\r\n     * Registers a plugin object so it can be resolved later by name.\r\n     * @method register\r\n     * @param plugin {} The plugin to register.\r\n     * @return {object} The plugin.\r\n     */\r\n    Plugin.register = function(plugin) {\r\n        if (!Plugin.isPlugin(plugin)) {\r\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\r\n        }\r\n\r\n        if (plugin.name in Plugin._registry) {\r\n            var registered = Plugin._registry[plugin.name],\r\n                pluginVersion = Plugin.versionParse(plugin.version).number,\r\n                registeredVersion = Plugin.versionParse(registered.version).number;\r\n\r\n            if (pluginVersion > registeredVersion) {\r\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\r\n                Plugin._registry[plugin.name] = plugin;\r\n            } else if (pluginVersion < registeredVersion) {\r\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\r\n            } else if (plugin !== registered) {\r\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\r\n            }\r\n        } else {\r\n            Plugin._registry[plugin.name] = plugin;\r\n        }\r\n\r\n        return plugin;\r\n    };\r\n\r\n    /**\r\n     * Resolves a dependency to a plugin object from the registry if it exists. \r\n     * The `dependency` may contain a version, but only the name matters when resolving.\r\n     * @method resolve\r\n     * @param dependency {string} The dependency.\r\n     * @return {object} The plugin if resolved, otherwise `undefined`.\r\n     */\r\n    Plugin.resolve = function(dependency) {\r\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\r\n    };\r\n\r\n    /**\r\n     * Returns a pretty printed plugin name and version.\r\n     * @method toString\r\n     * @param plugin {} The plugin.\r\n     * @return {string} Pretty printed plugin name and version.\r\n     */\r\n    Plugin.toString = function(plugin) {\r\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\r\n     * This means it must define the following properties:\r\n     * - `name`\r\n     * - `version`\r\n     * - `install`\r\n     * @method isPlugin\r\n     * @param obj {} The obj to test.\r\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\r\n     */\r\n    Plugin.isPlugin = function(obj) {\r\n        return obj && obj.name && obj.version && obj.install;\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\r\n     * @method isUsed\r\n     * @param module {} The module.\r\n     * @param name {string} The plugin name.\r\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\r\n     */\r\n    Plugin.isUsed = function(module, name) {\r\n        return module.used.indexOf(name) > -1;\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\r\n     * If `plugin.for` is not specified then it is assumed to be applicable.\r\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\r\n     * @method isFor\r\n     * @param plugin {} The plugin.\r\n     * @param module {} The module.\r\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\r\n     */\r\n    Plugin.isFor = function(plugin, module) {\r\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\r\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\r\n    };\r\n\r\n    /**\r\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\r\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\r\n     * Plugins may be specified either by their name or a reference to the plugin object.\r\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\r\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\r\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\r\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\r\n     * - A green tick ✅ indicates a dependency was resolved and installed.\r\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\r\n     * - A red cross ❌ indicates a dependency could not be resolved.\r\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param module {} The module install plugins on.\r\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\r\n     */\r\n    Plugin.use = function(module, plugins) {\r\n        module.uses = (module.uses || []).concat(plugins || []);\r\n\r\n        if (module.uses.length === 0) {\r\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\r\n            return;\r\n        }\r\n\r\n        var dependencies = Plugin.dependencies(module),\r\n            sortedDependencies = Common.topologicalSort(dependencies),\r\n            status = [];\r\n\r\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\r\n            if (sortedDependencies[i] === module.name) {\r\n                continue;\r\n            }\r\n\r\n            var plugin = Plugin.resolve(sortedDependencies[i]);\r\n\r\n            if (!plugin) {\r\n                status.push('❌ ' + sortedDependencies[i]);\r\n                continue;\r\n            }\r\n\r\n            if (Plugin.isUsed(module, plugin.name)) {\r\n                continue;\r\n            }\r\n\r\n            if (!Plugin.isFor(plugin, module)) {\r\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\r\n                plugin._warned = true;\r\n            }\r\n\r\n            if (plugin.install) {\r\n                plugin.install(module);\r\n            } else {\r\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\r\n                plugin._warned = true;\r\n            }\r\n\r\n            if (plugin._warned) {\r\n                status.push('🔶 ' + Plugin.toString(plugin));\r\n                delete plugin._warned;\r\n            } else {\r\n                status.push('✅ ' + Plugin.toString(plugin));\r\n            }\r\n\r\n            module.used.push(plugin.name);\r\n        }\r\n\r\n        if (status.length > 0) {\r\n            Common.info(status.join('  '));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\r\n     * @method dependencies\r\n     * @param module {} The module.\r\n     * @return {object} A dependency graph.\r\n     */\r\n    Plugin.dependencies = function(module, tracked) {\r\n        var parsedBase = Plugin.dependencyParse(module),\r\n            name = parsedBase.name;\r\n\r\n        tracked = tracked || {};\r\n\r\n        if (name in tracked) {\r\n            return;\r\n        }\r\n\r\n        module = Plugin.resolve(module) || module;\r\n\r\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\r\n            if (Plugin.isPlugin(dependency)) {\r\n                Plugin.register(dependency);\r\n            }\r\n\r\n            var parsed = Plugin.dependencyParse(dependency),\r\n                resolved = Plugin.resolve(dependency);\r\n\r\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\r\n                Common.warn(\r\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\r\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\r\n                );\r\n\r\n                resolved._warned = true;\r\n                module._warned = true;\r\n            } else if (!resolved) {\r\n                Common.warn(\r\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\r\n                    Plugin.toString(parsedBase), 'could not be resolved.'\r\n                );\r\n\r\n                module._warned = true;\r\n            }\r\n\r\n            return parsed.name;\r\n        });\r\n\r\n        for (var i = 0; i < tracked[name].length; i += 1) {\r\n            Plugin.dependencies(tracked[name][i], tracked);\r\n        }\r\n\r\n        return tracked;\r\n    };\r\n\r\n    /**\r\n     * Parses a dependency string into its components.\r\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\r\n     * See documentation for `Plugin.versionParse` for a description of the format.\r\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\r\n     * @method dependencyParse\r\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\r\n     * @return {object} The dependency parsed into its components.\r\n     */\r\n    Plugin.dependencyParse = function(dependency) {\r\n        if (Common.isString(dependency)) {\r\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-+]+)?))?$/;\r\n\r\n            if (!pattern.test(dependency)) {\r\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\r\n            }\r\n\r\n            return {\r\n                name: dependency.split('@')[0],\r\n                range: dependency.split('@')[1] || '*'\r\n            };\r\n        }\r\n\r\n        return {\r\n            name: dependency.name,\r\n            range: dependency.range || dependency.version\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Parses a version string into its components.  \r\n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\r\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\r\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\r\n     * Only the following range types are supported:\r\n     * - Tilde ranges e.g. `~1.2.3`\r\n     * - Caret ranges e.g. `^1.2.3`\r\n     * - Greater than ranges e.g. `>1.2.3`\r\n     * - Greater than or equal ranges e.g. `>=1.2.3`\r\n     * - Exact version e.g. `1.2.3`\r\n     * - Any version `*`\r\n     * @method versionParse\r\n     * @param range {string} The version string.\r\n     * @return {object} The version range parsed into its components.\r\n     */\r\n    Plugin.versionParse = function(range) {\r\n        var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-+]+)?$/;\r\n\r\n        if (!pattern.test(range)) {\r\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\r\n        }\r\n\r\n        var parts = pattern.exec(range);\r\n        var major = Number(parts[4]);\r\n        var minor = Number(parts[5]);\r\n        var patch = Number(parts[6]);\r\n\r\n        return {\r\n            isRange: Boolean(parts[1] || parts[2]),\r\n            version: parts[3],\r\n            range: range,\r\n            operator: parts[1] || parts[2] || '',\r\n            major: major,\r\n            minor: minor,\r\n            patch: patch,\r\n            parts: [major, minor, patch],\r\n            prerelease: parts[7],\r\n            number: major * 1e8 + minor * 1e4 + patch\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if `version` satisfies the given `range`.\r\n     * See documentation for `Plugin.versionParse` for a description of the format.\r\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\r\n     * @method versionSatisfies\r\n     * @param version {string} The version string.\r\n     * @param range {string} The range string.\r\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\r\n     */\r\n    Plugin.versionSatisfies = function(version, range) {\r\n        range = range || '*';\r\n\r\n        var r = Plugin.versionParse(range),\r\n            v = Plugin.versionParse(version);\r\n\r\n        if (r.isRange) {\r\n            if (r.operator === '*' || version === '*') {\r\n                return true;\r\n            }\r\n\r\n            if (r.operator === '>') {\r\n                return v.number > r.number;\r\n            }\r\n\r\n            if (r.operator === '>=') {\r\n                return v.number >= r.number;\r\n            }\r\n\r\n            if (r.operator === '~') {\r\n                return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\r\n            }\r\n\r\n            if (r.operator === '^') {\r\n                if (r.major > 0) {\r\n                    return v.major === r.major && v.number >= r.number;\r\n                }\r\n\r\n                if (r.minor > 0) {\r\n                    return v.minor === r.minor && v.patch >= r.patch;\r\n                }\r\n\r\n                return v.patch === r.patch;\r\n            }\r\n        }\r\n\r\n        return version === range || version === '*';\r\n    };\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 16 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\r\n*\r\n* @class Contact\r\n*/\r\n\r\nvar Contact = {};\r\n\r\nmodule.exports = Contact;\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new contact.\r\n     * @method create\r\n     * @param {vertex} vertex\r\n     * @return {contact} A new contact\r\n     */\r\n    Contact.create = function(vertex) {\r\n        return {\r\n            vertex: vertex,\r\n            normalImpulse: 0,\r\n            tangentImpulse: 0\r\n        };\r\n    };\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 17 */\r\n/***/ (function(module, exports, __nested_webpack_require_211547__) {\r\n\r\n/**\r\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\r\n* An engine is a controller that manages updating the simulation of the world.\r\n* See `Matter.Runner` for an optional game loop utility.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Engine\r\n*/\r\n\r\nvar Engine = {};\r\n\r\nmodule.exports = Engine;\r\n\r\nvar Sleeping = __nested_webpack_require_211547__(7);\r\nvar Resolver = __nested_webpack_require_211547__(18);\r\nvar Detector = __nested_webpack_require_211547__(13);\r\nvar Pairs = __nested_webpack_require_211547__(19);\r\nvar Events = __nested_webpack_require_211547__(5);\r\nvar Composite = __nested_webpack_require_211547__(6);\r\nvar Constraint = __nested_webpack_require_211547__(10);\r\nvar Common = __nested_webpack_require_211547__(0);\r\nvar Body = __nested_webpack_require_211547__(4);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\r\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\r\n     * See the properties section below for detailed information on what you can pass via the `options` object.\r\n     * @method create\r\n     * @param {object} [options]\r\n     * @return {engine} engine\r\n     */\r\n    Engine.create = function(options) {\r\n        options = options || {};\r\n\r\n        var defaults = {\r\n            positionIterations: 6,\r\n            velocityIterations: 4,\r\n            constraintIterations: 2,\r\n            enableSleeping: false,\r\n            events: [],\r\n            plugin: {},\r\n            gravity: {\r\n                x: 0,\r\n                y: 1,\r\n                scale: 0.001\r\n            },\r\n            timing: {\r\n                timestamp: 0,\r\n                timeScale: 1,\r\n                lastDelta: 0,\r\n                lastElapsed: 0\r\n            }\r\n        };\r\n\r\n        var engine = Common.extend(defaults, options);\r\n\r\n        engine.world = options.world || Composite.create({ label: 'World' });\r\n        engine.pairs = options.pairs || Pairs.create();\r\n        engine.detector = options.detector || Detector.create();\r\n\r\n        // for temporary back compatibility only\r\n        engine.grid = { buckets: [] };\r\n        engine.world.gravity = engine.gravity;\r\n        engine.broadphase = engine.grid;\r\n        engine.metrics = {};\r\n        \r\n        return engine;\r\n    };\r\n\r\n    /**\r\n     * Moves the simulation forward in time by `delta` milliseconds.\r\n     * Triggers `beforeUpdate` and `afterUpdate` events.\r\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\r\n     * @method update\r\n     * @param {engine} engine\r\n     * @param {number} [delta=16.666]\r\n     */\r\n    Engine.update = function(engine, delta) {\r\n        var startTime = Common.now();\r\n\r\n        var world = engine.world,\r\n            detector = engine.detector,\r\n            pairs = engine.pairs,\r\n            timing = engine.timing,\r\n            timestamp = timing.timestamp,\r\n            i;\r\n\r\n        delta = typeof delta !== 'undefined' ? delta : Common._baseDelta;\r\n        delta *= timing.timeScale;\r\n\r\n        // increment timestamp\r\n        timing.timestamp += delta;\r\n        timing.lastDelta = delta;\r\n\r\n        // create an event object\r\n        var event = {\r\n            timestamp: timing.timestamp,\r\n            delta: delta\r\n        };\r\n\r\n        Events.trigger(engine, 'beforeUpdate', event);\r\n\r\n        // get all bodies and all constraints in the world\r\n        var allBodies = Composite.allBodies(world),\r\n            allConstraints = Composite.allConstraints(world);\r\n\r\n        // if the world has changed\r\n        if (world.isModified) {\r\n            // update the detector bodies\r\n            Detector.setBodies(detector, allBodies);\r\n\r\n            // reset all composite modified flags\r\n            Composite.setModified(world, false, false, true);\r\n        }\r\n\r\n        // update sleeping if enabled\r\n        if (engine.enableSleeping)\r\n            Sleeping.update(allBodies, delta);\r\n\r\n        // apply gravity to all bodies\r\n        Engine._bodiesApplyGravity(allBodies, engine.gravity);\r\n\r\n        // update all body position and rotation by integration\r\n        if (delta > 0) {\r\n            Engine._bodiesUpdate(allBodies, delta);\r\n        }\r\n\r\n        // update all constraints (first pass)\r\n        Constraint.preSolveAll(allBodies);\r\n        for (i = 0; i < engine.constraintIterations; i++) {\r\n            Constraint.solveAll(allConstraints, delta);\r\n        }\r\n        Constraint.postSolveAll(allBodies);\r\n\r\n        // find all collisions\r\n        detector.pairs = engine.pairs;\r\n        var collisions = Detector.collisions(detector);\r\n\r\n        // update collision pairs\r\n        Pairs.update(pairs, collisions, timestamp);\r\n\r\n        // wake up bodies involved in collisions\r\n        if (engine.enableSleeping)\r\n            Sleeping.afterCollisions(pairs.list);\r\n\r\n        // trigger collision events\r\n        if (pairs.collisionStart.length > 0)\r\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\r\n\r\n        // iteratively resolve position between collisions\r\n        var positionDamping = Common.clamp(20 / engine.positionIterations, 0, 1);\r\n        \r\n        Resolver.preSolvePosition(pairs.list);\r\n        for (i = 0; i < engine.positionIterations; i++) {\r\n            Resolver.solvePosition(pairs.list, delta, positionDamping);\r\n        }\r\n        Resolver.postSolvePosition(allBodies);\r\n\r\n        // update all constraints (second pass)\r\n        Constraint.preSolveAll(allBodies);\r\n        for (i = 0; i < engine.constraintIterations; i++) {\r\n            Constraint.solveAll(allConstraints, delta);\r\n        }\r\n        Constraint.postSolveAll(allBodies);\r\n\r\n        // iteratively resolve velocity between collisions\r\n        Resolver.preSolveVelocity(pairs.list);\r\n        for (i = 0; i < engine.velocityIterations; i++) {\r\n            Resolver.solveVelocity(pairs.list, delta);\r\n        }\r\n\r\n        // update body speed and velocity properties\r\n        Engine._bodiesUpdateVelocities(allBodies);\r\n\r\n        // trigger collision events\r\n        if (pairs.collisionActive.length > 0)\r\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\r\n\r\n        if (pairs.collisionEnd.length > 0)\r\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\r\n\r\n        // clear force buffers\r\n        Engine._bodiesClearForces(allBodies);\r\n\r\n        Events.trigger(engine, 'afterUpdate', event);\r\n\r\n        // log the time elapsed computing this update\r\n        engine.timing.lastElapsed = Common.now() - startTime;\r\n\r\n        return engine;\r\n    };\r\n    \r\n    /**\r\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\r\n     * @method merge\r\n     * @param {engine} engineA\r\n     * @param {engine} engineB\r\n     */\r\n    Engine.merge = function(engineA, engineB) {\r\n        Common.extend(engineA, engineB);\r\n        \r\n        if (engineB.world) {\r\n            engineA.world = engineB.world;\r\n\r\n            Engine.clear(engineA);\r\n\r\n            var bodies = Composite.allBodies(engineA.world);\r\n\r\n            for (var i = 0; i < bodies.length; i++) {\r\n                var body = bodies[i];\r\n                Sleeping.set(body, false);\r\n                body.id = Common.nextId();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Clears the engine pairs and detector.\r\n     * @method clear\r\n     * @param {engine} engine\r\n     */\r\n    Engine.clear = function(engine) {\r\n        Pairs.clear(engine.pairs);\r\n        Detector.clear(engine.detector);\r\n    };\r\n\r\n    /**\r\n     * Zeroes the `body.force` and `body.torque` force buffers.\r\n     * @method _bodiesClearForces\r\n     * @private\r\n     * @param {body[]} bodies\r\n     */\r\n    Engine._bodiesClearForces = function(bodies) {\r\n        var bodiesLength = bodies.length;\r\n\r\n        for (var i = 0; i < bodiesLength; i++) {\r\n            var body = bodies[i];\r\n\r\n            // reset force buffers\r\n            body.force.x = 0;\r\n            body.force.y = 0;\r\n            body.torque = 0;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Applies gravitational acceleration to all `bodies`.\r\n     * This models a [uniform gravitational field](https://en.wikipedia.org/wiki/Gravity_of_Earth), similar to near the surface of a planet.\r\n     * \r\n     * @method _bodiesApplyGravity\r\n     * @private\r\n     * @param {body[]} bodies\r\n     * @param {vector} gravity\r\n     */\r\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\r\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001,\r\n            bodiesLength = bodies.length;\r\n\r\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\r\n            return;\r\n        }\r\n        \r\n        for (var i = 0; i < bodiesLength; i++) {\r\n            var body = bodies[i];\r\n\r\n            if (body.isStatic || body.isSleeping)\r\n                continue;\r\n\r\n            // add the resultant force of gravity\r\n            body.force.y += body.mass * gravity.y * gravityScale;\r\n            body.force.x += body.mass * gravity.x * gravityScale;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Applies `Body.update` to all given `bodies`.\r\n     * @method _bodiesUpdate\r\n     * @private\r\n     * @param {body[]} bodies\r\n     * @param {number} delta The amount of time elapsed between updates\r\n     */\r\n    Engine._bodiesUpdate = function(bodies, delta) {\r\n        var bodiesLength = bodies.length;\r\n\r\n        for (var i = 0; i < bodiesLength; i++) {\r\n            var body = bodies[i];\r\n\r\n            if (body.isStatic || body.isSleeping)\r\n                continue;\r\n\r\n            Body.update(body, delta);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Applies `Body.updateVelocities` to all given `bodies`.\r\n     * @method _bodiesUpdateVelocities\r\n     * @private\r\n     * @param {body[]} bodies\r\n     */\r\n    Engine._bodiesUpdateVelocities = function(bodies) {\r\n        var bodiesLength = bodies.length;\r\n\r\n        for (var i = 0; i < bodiesLength; i++) {\r\n            Body.updateVelocities(bodies[i]);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\r\n     * @deprecated use Matter.Runner.run(engine) instead\r\n     * @method run\r\n     * @param {engine} engine\r\n     */\r\n\r\n    /**\r\n    * Fired just before an update\r\n    *\r\n    * @event beforeUpdate\r\n    * @param {object} event An event object\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {number} event.delta The delta time in milliseconds value used in the update\r\n    * @param {engine} event.source The source object of the event\r\n    * @param {string} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired after engine update and all collision events\r\n    *\r\n    * @event afterUpdate\r\n    * @param {object} event An event object\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {number} event.delta The delta time in milliseconds value used in the update\r\n    * @param {engine} event.source The source object of the event\r\n    * @param {string} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\r\n    *\r\n    * @event collisionStart\r\n    * @param {object} event An event object\r\n    * @param {pair[]} event.pairs List of affected pairs\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {number} event.delta The delta time in milliseconds value used in the update\r\n    * @param {engine} event.source The source object of the event\r\n    * @param {string} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\r\n    *\r\n    * @event collisionActive\r\n    * @param {object} event An event object\r\n    * @param {pair[]} event.pairs List of affected pairs\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {number} event.delta The delta time in milliseconds value used in the update\r\n    * @param {engine} event.source The source object of the event\r\n    * @param {string} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\r\n    *\r\n    * @event collisionEnd\r\n    * @param {object} event An event object\r\n    * @param {pair[]} event.pairs List of affected pairs\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {number} event.delta The delta time in milliseconds value used in the update\r\n    * @param {engine} event.source The source object of the event\r\n    * @param {string} event.name The name of the event\r\n    */\r\n\r\n    /*\r\n    *\r\n    *  Properties Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n     * An integer `Number` that specifies the number of position iterations to perform each update.\r\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\r\n     *\r\n     * @property positionIterations\r\n     * @type number\r\n     * @default 6\r\n     */\r\n\r\n    /**\r\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\r\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\r\n     *\r\n     * @property velocityIterations\r\n     * @type number\r\n     * @default 4\r\n     */\r\n\r\n    /**\r\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\r\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\r\n     * The default value of `2` is usually very adequate.\r\n     *\r\n     * @property constraintIterations\r\n     * @type number\r\n     * @default 2\r\n     */\r\n\r\n    /**\r\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\r\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\r\n     *\r\n     * @property enableSleeping\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * An `Object` containing properties regarding the timing systems of the engine. \r\n     *\r\n     * @property timing\r\n     * @type object\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies the global scaling factor of time for all bodies.\r\n     * A value of `0` freezes the simulation.\r\n     * A value of `0.1` gives a slow-motion effect.\r\n     * A value of `1.2` gives a speed-up effect.\r\n     *\r\n     * @property timing.timeScale\r\n     * @type number\r\n     * @default 1\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \r\n     * It is incremented on every `Engine.update` by the given `delta` argument. \r\n     * \r\n     * @property timing.timestamp\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\r\n     * It is updated by timing from the start of the last `Engine.update` call until it ends.\r\n     *\r\n     * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\r\n     * \r\n     * @property timing.lastElapsed\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * A `Number` that represents the `delta` value used in the last engine update.\r\n     * \r\n     * @property timing.lastDelta\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * A `Matter.Detector` instance.\r\n     *\r\n     * @property detector\r\n     * @type detector\r\n     * @default a Matter.Detector instance\r\n     */\r\n\r\n    /**\r\n     * A `Matter.Grid` instance.\r\n     *\r\n     * @deprecated replaced by `engine.detector`\r\n     * @property grid\r\n     * @type grid\r\n     * @default a Matter.Grid instance\r\n     */\r\n\r\n    /**\r\n     * Replaced by and now alias for `engine.grid`.\r\n     *\r\n     * @deprecated replaced by `engine.detector`\r\n     * @property broadphase\r\n     * @type grid\r\n     * @default a Matter.Grid instance\r\n     */\r\n\r\n    /**\r\n     * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\r\n     *\r\n     * @property world\r\n     * @type composite\r\n     * @default a Matter.Composite instance\r\n     */\r\n\r\n    /**\r\n     * An object reserved for storing plugin-specific properties.\r\n     *\r\n     * @property plugin\r\n     * @type {}\r\n     */\r\n\r\n    /**\r\n     * An optional gravitational acceleration applied to all bodies in `engine.world` on every update.\r\n     * \r\n     * This models a [uniform gravitational field](https://en.wikipedia.org/wiki/Gravity_of_Earth), similar to near the surface of a planet. For gravity in other contexts, disable this and apply forces as needed.\r\n     * \r\n     * To disable set the `scale` component to `0`.\r\n     * \r\n     * This is split into three components for ease of use:  \r\n     * a normalised direction (`x` and `y`) and magnitude (`scale`).\r\n     *\r\n     * @property gravity\r\n     * @type object\r\n     */\r\n\r\n    /**\r\n     * The gravitational direction normal `x` component, to be multiplied by `gravity.scale`.\r\n     * \r\n     * @property gravity.x\r\n     * @type object\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * The gravitational direction normal `y` component, to be multiplied by `gravity.scale`.\r\n     *\r\n     * @property gravity.y\r\n     * @type object\r\n     * @default 1\r\n     */\r\n\r\n    /**\r\n     * The magnitude of the gravitational acceleration.\r\n     * \r\n     * @property gravity.scale\r\n     * @type object\r\n     * @default 0.001\r\n     */\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 18 */\r\n/***/ (function(module, exports, __nested_webpack_require_229485__) {\r\n\r\n/**\r\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\r\n*\r\n* @class Resolver\r\n*/\r\n\r\nvar Resolver = {};\r\n\r\nmodule.exports = Resolver;\r\n\r\nvar Vertices = __nested_webpack_require_229485__(3);\r\nvar Common = __nested_webpack_require_229485__(0);\r\nvar Bounds = __nested_webpack_require_229485__(1);\r\n\r\n(function() {\r\n\r\n    Resolver._restingThresh = 2;\r\n    Resolver._restingThreshTangent = Math.sqrt(6);\r\n    Resolver._positionDampen = 0.9;\r\n    Resolver._positionWarming = 0.8;\r\n    Resolver._frictionNormalMultiplier = 5;\r\n    Resolver._frictionMaxStatic = Number.MAX_VALUE;\r\n\r\n    /**\r\n     * Prepare pairs for position solving.\r\n     * @method preSolvePosition\r\n     * @param {pair[]} pairs\r\n     */\r\n    Resolver.preSolvePosition = function(pairs) {\r\n        var i,\r\n            pair,\r\n            activeCount,\r\n            pairsLength = pairs.length;\r\n\r\n        // find total contacts on each body\r\n        for (i = 0; i < pairsLength; i++) {\r\n            pair = pairs[i];\r\n            \r\n            if (!pair.isActive)\r\n                continue;\r\n            \r\n            activeCount = pair.activeContacts.length;\r\n            pair.collision.parentA.totalContacts += activeCount;\r\n            pair.collision.parentB.totalContacts += activeCount;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Find a solution for pair positions.\r\n     * @method solvePosition\r\n     * @param {pair[]} pairs\r\n     * @param {number} delta\r\n     * @param {number} [damping=1]\r\n     */\r\n    Resolver.solvePosition = function(pairs, delta, damping) {\r\n        var i,\r\n            pair,\r\n            collision,\r\n            bodyA,\r\n            bodyB,\r\n            normal,\r\n            contactShare,\r\n            positionImpulse,\r\n            positionDampen = Resolver._positionDampen * (damping || 1),\r\n            slopDampen = Common.clamp(delta / Common._baseDelta, 0, 1),\r\n            pairsLength = pairs.length;\r\n\r\n        // find impulses required to resolve penetration\r\n        for (i = 0; i < pairsLength; i++) {\r\n            pair = pairs[i];\r\n            \r\n            if (!pair.isActive || pair.isSensor)\r\n                continue;\r\n\r\n            collision = pair.collision;\r\n            bodyA = collision.parentA;\r\n            bodyB = collision.parentB;\r\n            normal = collision.normal;\r\n\r\n            // get current separation between body edges involved in collision\r\n            pair.separation = \r\n                normal.x * (bodyB.positionImpulse.x + collision.penetration.x - bodyA.positionImpulse.x)\r\n                + normal.y * (bodyB.positionImpulse.y + collision.penetration.y - bodyA.positionImpulse.y);\r\n        }\r\n        \r\n        for (i = 0; i < pairsLength; i++) {\r\n            pair = pairs[i];\r\n\r\n            if (!pair.isActive || pair.isSensor)\r\n                continue;\r\n            \r\n            collision = pair.collision;\r\n            bodyA = collision.parentA;\r\n            bodyB = collision.parentB;\r\n            normal = collision.normal;\r\n            positionImpulse = pair.separation - pair.slop * slopDampen;\r\n\r\n            if (bodyA.isStatic || bodyB.isStatic)\r\n                positionImpulse *= 2;\r\n            \r\n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\r\n                contactShare = positionDampen / bodyA.totalContacts;\r\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\r\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\r\n            }\r\n\r\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\r\n                contactShare = positionDampen / bodyB.totalContacts;\r\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\r\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Apply position resolution.\r\n     * @method postSolvePosition\r\n     * @param {body[]} bodies\r\n     */\r\n    Resolver.postSolvePosition = function(bodies) {\r\n        var positionWarming = Resolver._positionWarming,\r\n            bodiesLength = bodies.length,\r\n            verticesTranslate = Vertices.translate,\r\n            boundsUpdate = Bounds.update;\r\n\r\n        for (var i = 0; i < bodiesLength; i++) {\r\n            var body = bodies[i],\r\n                positionImpulse = body.positionImpulse,\r\n                positionImpulseX = positionImpulse.x,\r\n                positionImpulseY = positionImpulse.y,\r\n                velocity = body.velocity;\r\n\r\n            // reset contact count\r\n            body.totalContacts = 0;\r\n\r\n            if (positionImpulseX !== 0 || positionImpulseY !== 0) {\r\n                // update body geometry\r\n                for (var j = 0; j < body.parts.length; j++) {\r\n                    var part = body.parts[j];\r\n                    verticesTranslate(part.vertices, positionImpulse);\r\n                    boundsUpdate(part.bounds, part.vertices, velocity);\r\n                    part.position.x += positionImpulseX;\r\n                    part.position.y += positionImpulseY;\r\n                }\r\n\r\n                // move the body without changing velocity\r\n                body.positionPrev.x += positionImpulseX;\r\n                body.positionPrev.y += positionImpulseY;\r\n\r\n                if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {\r\n                    // reset cached impulse if the body has velocity along it\r\n                    positionImpulse.x = 0;\r\n                    positionImpulse.y = 0;\r\n                } else {\r\n                    // warm the next iteration\r\n                    positionImpulse.x *= positionWarming;\r\n                    positionImpulse.y *= positionWarming;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Prepare pairs for velocity solving.\r\n     * @method preSolveVelocity\r\n     * @param {pair[]} pairs\r\n     */\r\n    Resolver.preSolveVelocity = function(pairs) {\r\n        var pairsLength = pairs.length,\r\n            i,\r\n            j;\r\n        \r\n        for (i = 0; i < pairsLength; i++) {\r\n            var pair = pairs[i];\r\n            \r\n            if (!pair.isActive || pair.isSensor)\r\n                continue;\r\n            \r\n            var contacts = pair.activeContacts,\r\n                contactsLength = contacts.length,\r\n                collision = pair.collision,\r\n                bodyA = collision.parentA,\r\n                bodyB = collision.parentB,\r\n                normal = collision.normal,\r\n                tangent = collision.tangent;\r\n    \r\n            // resolve each contact\r\n            for (j = 0; j < contactsLength; j++) {\r\n                var contact = contacts[j],\r\n                    contactVertex = contact.vertex,\r\n                    normalImpulse = contact.normalImpulse,\r\n                    tangentImpulse = contact.tangentImpulse;\r\n    \r\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\r\n                    // total impulse from contact\r\n                    var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse,\r\n                        impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse;\r\n                    \r\n                    // apply impulse from contact\r\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\r\n                        bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\r\n                        bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\r\n                        bodyA.anglePrev += bodyA.inverseInertia * (\r\n                            (contactVertex.x - bodyA.position.x) * impulseY\r\n                            - (contactVertex.y - bodyA.position.y) * impulseX\r\n                        );\r\n                    }\r\n    \r\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\r\n                        bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\r\n                        bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\r\n                        bodyB.anglePrev -= bodyB.inverseInertia * (\r\n                            (contactVertex.x - bodyB.position.x) * impulseY \r\n                            - (contactVertex.y - bodyB.position.y) * impulseX\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Find a solution for pair velocities.\r\n     * @method solveVelocity\r\n     * @param {pair[]} pairs\r\n     * @param {number} delta\r\n     */\r\n    Resolver.solveVelocity = function(pairs, delta) {\r\n        var timeScale = delta / Common._baseDelta,\r\n            timeScaleSquared = timeScale * timeScale,\r\n            timeScaleCubed = timeScaleSquared * timeScale,\r\n            restingThresh = -Resolver._restingThresh * timeScale,\r\n            restingThreshTangent = Resolver._restingThreshTangent,\r\n            frictionNormalMultiplier = Resolver._frictionNormalMultiplier * timeScale,\r\n            frictionMaxStatic = Resolver._frictionMaxStatic,\r\n            pairsLength = pairs.length,\r\n            tangentImpulse,\r\n            maxFriction,\r\n            i,\r\n            j;\r\n\r\n        for (i = 0; i < pairsLength; i++) {\r\n            var pair = pairs[i];\r\n            \r\n            if (!pair.isActive || pair.isSensor)\r\n                continue;\r\n            \r\n            var collision = pair.collision,\r\n                bodyA = collision.parentA,\r\n                bodyB = collision.parentB,\r\n                bodyAVelocity = bodyA.velocity,\r\n                bodyBVelocity = bodyB.velocity,\r\n                normalX = collision.normal.x,\r\n                normalY = collision.normal.y,\r\n                tangentX = collision.tangent.x,\r\n                tangentY = collision.tangent.y,\r\n                contacts = pair.activeContacts,\r\n                contactsLength = contacts.length,\r\n                contactShare = 1 / contactsLength,\r\n                inverseMassTotal = bodyA.inverseMass + bodyB.inverseMass,\r\n                friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier;\r\n\r\n            // update body velocities\r\n            bodyAVelocity.x = bodyA.position.x - bodyA.positionPrev.x;\r\n            bodyAVelocity.y = bodyA.position.y - bodyA.positionPrev.y;\r\n            bodyBVelocity.x = bodyB.position.x - bodyB.positionPrev.x;\r\n            bodyBVelocity.y = bodyB.position.y - bodyB.positionPrev.y;\r\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\r\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\r\n\r\n            // resolve each contact\r\n            for (j = 0; j < contactsLength; j++) {\r\n                var contact = contacts[j],\r\n                    contactVertex = contact.vertex;\r\n\r\n                var offsetAX = contactVertex.x - bodyA.position.x,\r\n                    offsetAY = contactVertex.y - bodyA.position.y,\r\n                    offsetBX = contactVertex.x - bodyB.position.x,\r\n                    offsetBY = contactVertex.y - bodyB.position.y;\r\n \r\n                var velocityPointAX = bodyAVelocity.x - offsetAY * bodyA.angularVelocity,\r\n                    velocityPointAY = bodyAVelocity.y + offsetAX * bodyA.angularVelocity,\r\n                    velocityPointBX = bodyBVelocity.x - offsetBY * bodyB.angularVelocity,\r\n                    velocityPointBY = bodyBVelocity.y + offsetBX * bodyB.angularVelocity;\r\n\r\n                var relativeVelocityX = velocityPointAX - velocityPointBX,\r\n                    relativeVelocityY = velocityPointAY - velocityPointBY;\r\n\r\n                var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY,\r\n                    tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY;\r\n\r\n                // coulomb friction\r\n                var normalOverlap = pair.separation + normalVelocity;\r\n                var normalForce = Math.min(normalOverlap, 1);\r\n                normalForce = normalOverlap < 0 ? 0 : normalForce;\r\n\r\n                var frictionLimit = normalForce * friction;\r\n\r\n                if (tangentVelocity < -frictionLimit || tangentVelocity > frictionLimit) {\r\n                    maxFriction = (tangentVelocity > 0 ? tangentVelocity : -tangentVelocity);\r\n                    tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleCubed;\r\n                    \r\n                    if (tangentImpulse < -maxFriction) {\r\n                        tangentImpulse = -maxFriction;\r\n                    } else if (tangentImpulse > maxFriction) {\r\n                        tangentImpulse = maxFriction;\r\n                    }\r\n                } else {\r\n                    tangentImpulse = tangentVelocity;\r\n                    maxFriction = frictionMaxStatic;\r\n                }\r\n\r\n                // account for mass, inertia and contact offset\r\n                var oAcN = offsetAX * normalY - offsetAY * normalX,\r\n                    oBcN = offsetBX * normalY - offsetBY * normalX,\r\n                    share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\r\n\r\n                // raw impulses\r\n                var normalImpulse = (1 + pair.restitution) * normalVelocity * share;\r\n                tangentImpulse *= share;\r\n\r\n                // handle high velocity and resting collisions separately\r\n                if (normalVelocity < restingThresh) {\r\n                    // high normal velocity so clear cached contact normal impulse\r\n                    contact.normalImpulse = 0;\r\n                } else {\r\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\r\n                    // impulse constraint tends to 0\r\n                    var contactNormalImpulse = contact.normalImpulse;\r\n                    contact.normalImpulse += normalImpulse;\r\n                    if (contact.normalImpulse > 0) contact.normalImpulse = 0;\r\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\r\n                }\r\n\r\n                // handle high velocity and resting collisions separately\r\n                if (tangentVelocity < -restingThreshTangent || tangentVelocity > restingThreshTangent) {\r\n                    // high tangent velocity so clear cached contact tangent impulse\r\n                    contact.tangentImpulse = 0;\r\n                } else {\r\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\r\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\r\n                    var contactTangentImpulse = contact.tangentImpulse;\r\n                    contact.tangentImpulse += tangentImpulse;\r\n                    if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;\r\n                    if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;\r\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\r\n                }\r\n\r\n                // total impulse from contact\r\n                var impulseX = normalX * normalImpulse + tangentX * tangentImpulse,\r\n                    impulseY = normalY * normalImpulse + tangentY * tangentImpulse;\r\n                \r\n                // apply impulse from contact\r\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\r\n                    bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\r\n                    bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\r\n                    bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;\r\n                }\r\n\r\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\r\n                    bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\r\n                    bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\r\n                    bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 19 */\r\n/***/ (function(module, exports, __nested_webpack_require_245412__) {\r\n\r\n/**\r\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\r\n*\r\n* @class Pairs\r\n*/\r\n\r\nvar Pairs = {};\r\n\r\nmodule.exports = Pairs;\r\n\r\nvar Pair = __nested_webpack_require_245412__(9);\r\nvar Common = __nested_webpack_require_245412__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new pairs structure.\r\n     * @method create\r\n     * @param {object} options\r\n     * @return {pairs} A new pairs structure\r\n     */\r\n    Pairs.create = function(options) {\r\n        return Common.extend({ \r\n            table: {},\r\n            list: [],\r\n            collisionStart: [],\r\n            collisionActive: [],\r\n            collisionEnd: []\r\n        }, options);\r\n    };\r\n\r\n    /**\r\n     * Updates pairs given a list of collisions.\r\n     * @method update\r\n     * @param {object} pairs\r\n     * @param {collision[]} collisions\r\n     * @param {number} timestamp\r\n     */\r\n    Pairs.update = function(pairs, collisions, timestamp) {\r\n        var pairsList = pairs.list,\r\n            pairsListLength = pairsList.length,\r\n            pairsTable = pairs.table,\r\n            collisionsLength = collisions.length,\r\n            collisionStart = pairs.collisionStart,\r\n            collisionEnd = pairs.collisionEnd,\r\n            collisionActive = pairs.collisionActive,\r\n            collision,\r\n            pairIndex,\r\n            pair,\r\n            i;\r\n\r\n        // clear collision state arrays, but maintain old reference\r\n        collisionStart.length = 0;\r\n        collisionEnd.length = 0;\r\n        collisionActive.length = 0;\r\n\r\n        for (i = 0; i < pairsListLength; i++) {\r\n            pairsList[i].confirmedActive = false;\r\n        }\r\n\r\n        for (i = 0; i < collisionsLength; i++) {\r\n            collision = collisions[i];\r\n            pair = collision.pair;\r\n\r\n            if (pair) {\r\n                // pair already exists (but may or may not be active)\r\n                if (pair.isActive) {\r\n                    // pair exists and is active\r\n                    collisionActive.push(pair);\r\n                } else {\r\n                    // pair exists but was inactive, so a collision has just started again\r\n                    collisionStart.push(pair);\r\n                }\r\n\r\n                // update the pair\r\n                Pair.update(pair, collision, timestamp);\r\n                pair.confirmedActive = true;\r\n            } else {\r\n                // pair did not exist, create a new pair\r\n                pair = Pair.create(collision, timestamp);\r\n                pairsTable[pair.id] = pair;\r\n\r\n                // push the new pair\r\n                collisionStart.push(pair);\r\n                pairsList.push(pair);\r\n            }\r\n        }\r\n\r\n        // find pairs that are no longer active\r\n        var removePairIndex = [];\r\n        pairsListLength = pairsList.length;\r\n\r\n        for (i = 0; i < pairsListLength; i++) {\r\n            pair = pairsList[i];\r\n            \r\n            if (!pair.confirmedActive) {\r\n                Pair.setActive(pair, false, timestamp);\r\n                collisionEnd.push(pair);\r\n\r\n                if (!pair.collision.bodyA.isSleeping && !pair.collision.bodyB.isSleeping) {\r\n                    removePairIndex.push(i);\r\n                }\r\n            }\r\n        }\r\n\r\n        // remove inactive pairs\r\n        for (i = 0; i < removePairIndex.length; i++) {\r\n            pairIndex = removePairIndex[i] - i;\r\n            pair = pairsList[pairIndex];\r\n            pairsList.splice(pairIndex, 1);\r\n            delete pairsTable[pair.id];\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Clears the given pairs structure.\r\n     * @method clear\r\n     * @param {pairs} pairs\r\n     * @return {pairs} pairs\r\n     */\r\n    Pairs.clear = function(pairs) {\r\n        pairs.table = {};\r\n        pairs.list.length = 0;\r\n        pairs.collisionStart.length = 0;\r\n        pairs.collisionActive.length = 0;\r\n        pairs.collisionEnd.length = 0;\r\n        return pairs;\r\n    };\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 20 */\r\n/***/ (function(module, exports, __nested_webpack_require_249401__) {\r\n\r\nvar Matter = module.exports = __nested_webpack_require_249401__(21);\r\n\r\nMatter.Axes = __nested_webpack_require_249401__(11);\r\nMatter.Bodies = __nested_webpack_require_249401__(12);\r\nMatter.Body = __nested_webpack_require_249401__(4);\r\nMatter.Bounds = __nested_webpack_require_249401__(1);\r\nMatter.Collision = __nested_webpack_require_249401__(8);\r\nMatter.Common = __nested_webpack_require_249401__(0);\r\nMatter.Composite = __nested_webpack_require_249401__(6);\r\nMatter.Composites = __nested_webpack_require_249401__(22);\r\nMatter.Constraint = __nested_webpack_require_249401__(10);\r\nMatter.Contact = __nested_webpack_require_249401__(16);\r\nMatter.Detector = __nested_webpack_require_249401__(13);\r\nMatter.Engine = __nested_webpack_require_249401__(17);\r\nMatter.Events = __nested_webpack_require_249401__(5);\r\nMatter.Grid = __nested_webpack_require_249401__(23);\r\nMatter.Mouse = __nested_webpack_require_249401__(14);\r\nMatter.MouseConstraint = __nested_webpack_require_249401__(24);\r\nMatter.Pair = __nested_webpack_require_249401__(9);\r\nMatter.Pairs = __nested_webpack_require_249401__(19);\r\nMatter.Plugin = __nested_webpack_require_249401__(15);\r\nMatter.Query = __nested_webpack_require_249401__(25);\r\nMatter.Render = __nested_webpack_require_249401__(26);\r\nMatter.Resolver = __nested_webpack_require_249401__(18);\r\nMatter.Runner = __nested_webpack_require_249401__(27);\r\nMatter.SAT = __nested_webpack_require_249401__(28);\r\nMatter.Sleeping = __nested_webpack_require_249401__(7);\r\nMatter.Svg = __nested_webpack_require_249401__(29);\r\nMatter.Vector = __nested_webpack_require_249401__(2);\r\nMatter.Vertices = __nested_webpack_require_249401__(3);\r\nMatter.World = __nested_webpack_require_249401__(30);\r\n\r\n// temporary back compatibility\r\nMatter.Engine.run = Matter.Runner.run;\r\nMatter.Common.deprecated(Matter.Engine, 'run', 'Engine.run ➤ use Matter.Runner.run(engine) instead');\r\n\r\n\r\n/***/ }),\r\n/* 21 */\r\n/***/ (function(module, exports, __nested_webpack_require_250943__) {\r\n\r\n/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\r\n\r\nvar Matter = {};\r\n\r\nmodule.exports = Matter;\r\n\r\nvar Plugin = __nested_webpack_require_250943__(15);\r\nvar Common = __nested_webpack_require_250943__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.name = 'matter-js';\r\n\r\n    /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.version =   true ? \"0.19.0\" : 0;\r\n\r\n    /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */\r\n    Matter.uses = [];\r\n\r\n    /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */\r\n    Matter.used = [];\r\n\r\n    /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */\r\n    Matter.use = function() {\r\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.before = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathBefore(Matter, path, func);\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.after = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathAfter(Matter, path, func);\r\n    };\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 22 */\r\n/***/ (function(module, exports, __nested_webpack_require_253857__) {\r\n\r\n/**\r\n* The `Matter.Composites` module contains factory methods for creating composite bodies\r\n* with commonly used configurations (such as stacks and chains).\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Composites\r\n*/\r\n\r\nvar Composites = {};\r\n\r\nmodule.exports = Composites;\r\n\r\nvar Composite = __nested_webpack_require_253857__(6);\r\nvar Constraint = __nested_webpack_require_253857__(10);\r\nvar Common = __nested_webpack_require_253857__(0);\r\nvar Body = __nested_webpack_require_253857__(4);\r\nvar Bodies = __nested_webpack_require_253857__(12);\r\nvar deprecated = Common.deprecated;\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\r\n     * This function uses the body's bounds to prevent overlaps.\r\n     * @method stack\r\n     * @param {number} xx\r\n     * @param {number} yy\r\n     * @param {number} columns\r\n     * @param {number} rows\r\n     * @param {number} columnGap\r\n     * @param {number} rowGap\r\n     * @param {function} callback\r\n     * @return {composite} A new composite containing objects created in the callback\r\n     */\r\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\r\n        var stack = Composite.create({ label: 'Stack' }),\r\n            x = xx,\r\n            y = yy,\r\n            lastBody,\r\n            i = 0;\r\n\r\n        for (var row = 0; row < rows; row++) {\r\n            var maxHeight = 0;\r\n            \r\n            for (var column = 0; column < columns; column++) {\r\n                var body = callback(x, y, column, row, lastBody, i);\r\n                    \r\n                if (body) {\r\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\r\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \r\n\r\n                    if (bodyHeight > maxHeight)\r\n                        maxHeight = bodyHeight;\r\n                    \r\n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\r\n\r\n                    x = body.bounds.max.x + columnGap;\r\n\r\n                    Composite.addBody(stack, body);\r\n                    \r\n                    lastBody = body;\r\n                    i += 1;\r\n                } else {\r\n                    x += columnGap;\r\n                }\r\n            }\r\n            \r\n            y += maxHeight + rowGap;\r\n            x = xx;\r\n        }\r\n\r\n        return stack;\r\n    };\r\n    \r\n    /**\r\n     * Chains all bodies in the given composite together using constraints.\r\n     * @method chain\r\n     * @param {composite} composite\r\n     * @param {number} xOffsetA\r\n     * @param {number} yOffsetA\r\n     * @param {number} xOffsetB\r\n     * @param {number} yOffsetB\r\n     * @param {object} options\r\n     * @return {composite} A new composite containing objects chained together with constraints\r\n     */\r\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\r\n        var bodies = composite.bodies;\r\n        \r\n        for (var i = 1; i < bodies.length; i++) {\r\n            var bodyA = bodies[i - 1],\r\n                bodyB = bodies[i],\r\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\r\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \r\n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\r\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\r\n        \r\n            var defaults = {\r\n                bodyA: bodyA,\r\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\r\n                bodyB: bodyB,\r\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\r\n            };\r\n            \r\n            var constraint = Common.extend(defaults, options);\r\n        \r\n            Composite.addConstraint(composite, Constraint.create(constraint));\r\n        }\r\n\r\n        composite.label += ' Chain';\r\n        \r\n        return composite;\r\n    };\r\n\r\n    /**\r\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\r\n     * @method mesh\r\n     * @param {composite} composite\r\n     * @param {number} columns\r\n     * @param {number} rows\r\n     * @param {boolean} crossBrace\r\n     * @param {object} options\r\n     * @return {composite} The composite containing objects meshed together with constraints\r\n     */\r\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\r\n        var bodies = composite.bodies,\r\n            row,\r\n            col,\r\n            bodyA,\r\n            bodyB,\r\n            bodyC;\r\n        \r\n        for (row = 0; row < rows; row++) {\r\n            for (col = 1; col < columns; col++) {\r\n                bodyA = bodies[(col - 1) + (row * columns)];\r\n                bodyB = bodies[col + (row * columns)];\r\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\r\n            }\r\n\r\n            if (row > 0) {\r\n                for (col = 0; col < columns; col++) {\r\n                    bodyA = bodies[col + ((row - 1) * columns)];\r\n                    bodyB = bodies[col + (row * columns)];\r\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\r\n\r\n                    if (crossBrace && col > 0) {\r\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\r\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\r\n                    }\r\n\r\n                    if (crossBrace && col < columns - 1) {\r\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\r\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        composite.label += ' Mesh';\r\n        \r\n        return composite;\r\n    };\r\n    \r\n    /**\r\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\r\n     * This function uses the body's bounds to prevent overlaps.\r\n     * @method pyramid\r\n     * @param {number} xx\r\n     * @param {number} yy\r\n     * @param {number} columns\r\n     * @param {number} rows\r\n     * @param {number} columnGap\r\n     * @param {number} rowGap\r\n     * @param {function} callback\r\n     * @return {composite} A new composite containing objects created in the callback\r\n     */\r\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\r\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\r\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\r\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\r\n            \r\n            if (row > actualRows)\r\n                return;\r\n            \r\n            // reverse row order\r\n            row = actualRows - row;\r\n            \r\n            var start = row,\r\n                end = columns - 1 - row;\r\n\r\n            if (column < start || column > end)\r\n                return;\r\n            \r\n            // retroactively fix the first body's position, since width was unknown\r\n            if (i === 1) {\r\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\r\n            }\r\n\r\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\r\n            \r\n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\r\n     * @deprecated moved to newtonsCradle example\r\n     * @method newtonsCradle\r\n     * @param {number} xx\r\n     * @param {number} yy\r\n     * @param {number} number\r\n     * @param {number} size\r\n     * @param {number} length\r\n     * @return {composite} A new composite newtonsCradle body\r\n     */\r\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\r\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\r\n\r\n        for (var i = 0; i < number; i++) {\r\n            var separation = 1.9,\r\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \r\n                    { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\r\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\r\n\r\n            Composite.addBody(newtonsCradle, circle);\r\n            Composite.addConstraint(newtonsCradle, constraint);\r\n        }\r\n\r\n        return newtonsCradle;\r\n    };\r\n\r\n    deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle ➤ moved to newtonsCradle example');\r\n    \r\n    /**\r\n     * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\r\n     * @deprecated moved to car example\r\n     * @method car\r\n     * @param {number} xx\r\n     * @param {number} yy\r\n     * @param {number} width\r\n     * @param {number} height\r\n     * @param {number} wheelSize\r\n     * @return {composite} A new composite car body\r\n     */\r\n    Composites.car = function(xx, yy, width, height, wheelSize) {\r\n        var group = Body.nextGroup(true),\r\n            wheelBase = 20,\r\n            wheelAOffset = -width * 0.5 + wheelBase,\r\n            wheelBOffset = width * 0.5 - wheelBase,\r\n            wheelYOffset = 0;\r\n    \r\n        var car = Composite.create({ label: 'Car' }),\r\n            body = Bodies.rectangle(xx, yy, width, height, { \r\n                collisionFilter: {\r\n                    group: group\r\n                },\r\n                chamfer: {\r\n                    radius: height * 0.5\r\n                },\r\n                density: 0.0002\r\n            });\r\n    \r\n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \r\n            collisionFilter: {\r\n                group: group\r\n            },\r\n            friction: 0.8\r\n        });\r\n                    \r\n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \r\n            collisionFilter: {\r\n                group: group\r\n            },\r\n            friction: 0.8\r\n        });\r\n                    \r\n        var axelA = Constraint.create({\r\n            bodyB: body,\r\n            pointB: { x: wheelAOffset, y: wheelYOffset },\r\n            bodyA: wheelA,\r\n            stiffness: 1,\r\n            length: 0\r\n        });\r\n                        \r\n        var axelB = Constraint.create({\r\n            bodyB: body,\r\n            pointB: { x: wheelBOffset, y: wheelYOffset },\r\n            bodyA: wheelB,\r\n            stiffness: 1,\r\n            length: 0\r\n        });\r\n        \r\n        Composite.addBody(car, body);\r\n        Composite.addBody(car, wheelA);\r\n        Composite.addBody(car, wheelB);\r\n        Composite.addConstraint(car, axelA);\r\n        Composite.addConstraint(car, axelB);\r\n\r\n        return car;\r\n    };\r\n\r\n    deprecated(Composites, 'car', 'Composites.car ➤ moved to car example');\r\n\r\n    /**\r\n     * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\r\n     * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\r\n     * @deprecated moved to softBody and cloth examples\r\n     * @method softBody\r\n     * @param {number} xx\r\n     * @param {number} yy\r\n     * @param {number} columns\r\n     * @param {number} rows\r\n     * @param {number} columnGap\r\n     * @param {number} rowGap\r\n     * @param {boolean} crossBrace\r\n     * @param {number} particleRadius\r\n     * @param {} particleOptions\r\n     * @param {} constraintOptions\r\n     * @return {composite} A new composite softBody\r\n     */\r\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\r\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\r\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\r\n\r\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\r\n            return Bodies.circle(x, y, particleRadius, particleOptions);\r\n        });\r\n\r\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\r\n\r\n        softBody.label = 'Soft Body';\r\n\r\n        return softBody;\r\n    };\r\n\r\n    deprecated(Composites, 'softBody', 'Composites.softBody ➤ moved to softBody and cloth examples');\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 23 */\r\n/***/ (function(module, exports, __nested_webpack_require_266810__) {\r\n\r\n/**\r\n* This module has now been replaced by `Matter.Detector`.\r\n*\r\n* All usage should be migrated to `Matter.Detector` or another alternative.\r\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\r\n*\r\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\r\n*\r\n* @class Grid\r\n* @deprecated\r\n*/\r\n\r\nvar Grid = {};\r\n\r\nmodule.exports = Grid;\r\n\r\nvar Pair = __nested_webpack_require_266810__(9);\r\nvar Common = __nested_webpack_require_266810__(0);\r\nvar deprecated = Common.deprecated;\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new grid.\r\n     * @deprecated replaced by Matter.Detector\r\n     * @method create\r\n     * @param {} options\r\n     * @return {grid} A new grid\r\n     */\r\n    Grid.create = function(options) {\r\n        var defaults = {\r\n            buckets: {},\r\n            pairs: {},\r\n            pairsList: [],\r\n            bucketWidth: 48,\r\n            bucketHeight: 48\r\n        };\r\n\r\n        return Common.extend(defaults, options);\r\n    };\r\n\r\n    /**\r\n     * The width of a single grid bucket.\r\n     *\r\n     * @property bucketWidth\r\n     * @type number\r\n     * @default 48\r\n     */\r\n\r\n    /**\r\n     * The height of a single grid bucket.\r\n     *\r\n     * @property bucketHeight\r\n     * @type number\r\n     * @default 48\r\n     */\r\n\r\n    /**\r\n     * Updates the grid.\r\n     * @deprecated replaced by Matter.Detector\r\n     * @method update\r\n     * @param {grid} grid\r\n     * @param {body[]} bodies\r\n     * @param {engine} engine\r\n     * @param {boolean} forceUpdate\r\n     */\r\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\r\n        var i, col, row,\r\n            world = engine.world,\r\n            buckets = grid.buckets,\r\n            bucket,\r\n            bucketId,\r\n            gridChanged = false;\r\n\r\n        for (i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i];\r\n\r\n            if (body.isSleeping && !forceUpdate)\r\n                continue;\r\n\r\n            // temporary back compatibility bounds check\r\n            if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\r\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y))\r\n                continue;\r\n\r\n            var newRegion = Grid._getRegion(grid, body);\r\n\r\n            // if the body has changed grid region\r\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\r\n\r\n                if (!body.region || forceUpdate)\r\n                    body.region = newRegion;\r\n\r\n                var union = Grid._regionUnion(newRegion, body.region);\r\n\r\n                // update grid buckets affected by region change\r\n                // iterate over the union of both regions\r\n                for (col = union.startCol; col <= union.endCol; col++) {\r\n                    for (row = union.startRow; row <= union.endRow; row++) {\r\n                        bucketId = Grid._getBucketId(col, row);\r\n                        bucket = buckets[bucketId];\r\n\r\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\r\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\r\n\r\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\r\n                                                && row >= body.region.startRow && row <= body.region.endRow);\r\n\r\n                        // remove from old region buckets\r\n                        if (!isInsideNewRegion && isInsideOldRegion) {\r\n                            if (isInsideOldRegion) {\r\n                                if (bucket)\r\n                                    Grid._bucketRemoveBody(grid, bucket, body);\r\n                            }\r\n                        }\r\n\r\n                        // add to new region buckets\r\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\r\n                            if (!bucket)\r\n                                bucket = Grid._createBucket(buckets, bucketId);\r\n                            Grid._bucketAddBody(grid, bucket, body);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // set the new region\r\n                body.region = newRegion;\r\n\r\n                // flag changes so we can update pairs\r\n                gridChanged = true;\r\n            }\r\n        }\r\n\r\n        // update pairs list only if pairs changed (i.e. a body changed region)\r\n        if (gridChanged)\r\n            grid.pairsList = Grid._createActivePairsList(grid);\r\n    };\r\n\r\n    deprecated(Grid, 'update', 'Grid.update ➤ replaced by Matter.Detector');\r\n\r\n    /**\r\n     * Clears the grid.\r\n     * @deprecated replaced by Matter.Detector\r\n     * @method clear\r\n     * @param {grid} grid\r\n     */\r\n    Grid.clear = function(grid) {\r\n        grid.buckets = {};\r\n        grid.pairs = {};\r\n        grid.pairsList = [];\r\n    };\r\n\r\n    deprecated(Grid, 'clear', 'Grid.clear ➤ replaced by Matter.Detector');\r\n\r\n    /**\r\n     * Finds the union of two regions.\r\n     * @method _regionUnion\r\n     * @deprecated replaced by Matter.Detector\r\n     * @private\r\n     * @param {} regionA\r\n     * @param {} regionB\r\n     * @return {} region\r\n     */\r\n    Grid._regionUnion = function(regionA, regionB) {\r\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\r\n            endCol = Math.max(regionA.endCol, regionB.endCol),\r\n            startRow = Math.min(regionA.startRow, regionB.startRow),\r\n            endRow = Math.max(regionA.endRow, regionB.endRow);\r\n\r\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\r\n    };\r\n\r\n    /**\r\n     * Gets the region a given body falls in for a given grid.\r\n     * @method _getRegion\r\n     * @deprecated replaced by Matter.Detector\r\n     * @private\r\n     * @param {} grid\r\n     * @param {} body\r\n     * @return {} region\r\n     */\r\n    Grid._getRegion = function(grid, body) {\r\n        var bounds = body.bounds,\r\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\r\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\r\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\r\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\r\n\r\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\r\n    };\r\n\r\n    /**\r\n     * Creates a region.\r\n     * @method _createRegion\r\n     * @deprecated replaced by Matter.Detector\r\n     * @private\r\n     * @param {} startCol\r\n     * @param {} endCol\r\n     * @param {} startRow\r\n     * @param {} endRow\r\n     * @return {} region\r\n     */\r\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\r\n        return { \r\n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\r\n            startCol: startCol, \r\n            endCol: endCol, \r\n            startRow: startRow, \r\n            endRow: endRow \r\n        };\r\n    };\r\n\r\n    /**\r\n     * Gets the bucket id at the given position.\r\n     * @method _getBucketId\r\n     * @deprecated replaced by Matter.Detector\r\n     * @private\r\n     * @param {} column\r\n     * @param {} row\r\n     * @return {string} bucket id\r\n     */\r\n    Grid._getBucketId = function(column, row) {\r\n        return 'C' + column + 'R' + row;\r\n    };\r\n\r\n    /**\r\n     * Creates a bucket.\r\n     * @method _createBucket\r\n     * @deprecated replaced by Matter.Detector\r\n     * @private\r\n     * @param {} buckets\r\n     * @param {} bucketId\r\n     * @return {} bucket\r\n     */\r\n    Grid._createBucket = function(buckets, bucketId) {\r\n        var bucket = buckets[bucketId] = [];\r\n        return bucket;\r\n    };\r\n\r\n    /**\r\n     * Adds a body to a bucket.\r\n     * @method _bucketAddBody\r\n     * @deprecated replaced by Matter.Detector\r\n     * @private\r\n     * @param {} grid\r\n     * @param {} bucket\r\n     * @param {} body\r\n     */\r\n    Grid._bucketAddBody = function(grid, bucket, body) {\r\n        var gridPairs = grid.pairs,\r\n            pairId = Pair.id,\r\n            bucketLength = bucket.length,\r\n            i;\r\n\r\n        // add new pairs\r\n        for (i = 0; i < bucketLength; i++) {\r\n            var bodyB = bucket[i];\r\n\r\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\r\n                continue;\r\n\r\n            // keep track of the number of buckets the pair exists in\r\n            // important for Grid.update to work\r\n            var id = pairId(body, bodyB),\r\n                pair = gridPairs[id];\r\n\r\n            if (pair) {\r\n                pair[2] += 1;\r\n            } else {\r\n                gridPairs[id] = [body, bodyB, 1];\r\n            }\r\n        }\r\n\r\n        // add to bodies (after pairs, otherwise pairs with self)\r\n        bucket.push(body);\r\n    };\r\n\r\n    /**\r\n     * Removes a body from a bucket.\r\n     * @method _bucketRemoveBody\r\n     * @deprecated replaced by Matter.Detector\r\n     * @private\r\n     * @param {} grid\r\n     * @param {} bucket\r\n     * @param {} body\r\n     */\r\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\r\n        var gridPairs = grid.pairs,\r\n            pairId = Pair.id,\r\n            i;\r\n\r\n        // remove from bucket\r\n        bucket.splice(Common.indexOf(bucket, body), 1);\r\n\r\n        var bucketLength = bucket.length;\r\n\r\n        // update pair counts\r\n        for (i = 0; i < bucketLength; i++) {\r\n            // keep track of the number of buckets the pair exists in\r\n            // important for _createActivePairsList to work\r\n            var pair = gridPairs[pairId(body, bucket[i])];\r\n\r\n            if (pair)\r\n                pair[2] -= 1;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Generates a list of the active pairs in the grid.\r\n     * @method _createActivePairsList\r\n     * @deprecated replaced by Matter.Detector\r\n     * @private\r\n     * @param {} grid\r\n     * @return [] pairs\r\n     */\r\n    Grid._createActivePairsList = function(grid) {\r\n        var pair,\r\n            gridPairs = grid.pairs,\r\n            pairKeys = Common.keys(gridPairs),\r\n            pairKeysLength = pairKeys.length,\r\n            pairs = [],\r\n            k;\r\n\r\n        // iterate over grid.pairs\r\n        for (k = 0; k < pairKeysLength; k++) {\r\n            pair = gridPairs[pairKeys[k]];\r\n\r\n            // if pair exists in at least one bucket\r\n            // it is a pair that needs further collision testing so push it\r\n            if (pair[2] > 0) {\r\n                pairs.push(pair);\r\n            } else {\r\n                delete gridPairs[pairKeys[k]];\r\n            }\r\n        }\r\n\r\n        return pairs;\r\n    };\r\n    \r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 24 */\r\n/***/ (function(module, exports, __nested_webpack_require_277486__) {\r\n\r\n/**\r\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\r\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class MouseConstraint\r\n*/\r\n\r\nvar MouseConstraint = {};\r\n\r\nmodule.exports = MouseConstraint;\r\n\r\nvar Vertices = __nested_webpack_require_277486__(3);\r\nvar Sleeping = __nested_webpack_require_277486__(7);\r\nvar Mouse = __nested_webpack_require_277486__(14);\r\nvar Events = __nested_webpack_require_277486__(5);\r\nvar Detector = __nested_webpack_require_277486__(13);\r\nvar Constraint = __nested_webpack_require_277486__(10);\r\nvar Composite = __nested_webpack_require_277486__(6);\r\nvar Common = __nested_webpack_require_277486__(0);\r\nvar Bounds = __nested_webpack_require_277486__(1);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new mouse constraint.\r\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\r\n     * See the properties section below for detailed information on what you can pass via the `options` object.\r\n     * @method create\r\n     * @param {engine} engine\r\n     * @param {} options\r\n     * @return {MouseConstraint} A new MouseConstraint\r\n     */\r\n    MouseConstraint.create = function(engine, options) {\r\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\r\n\r\n        if (!mouse) {\r\n            if (engine && engine.render && engine.render.canvas) {\r\n                mouse = Mouse.create(engine.render.canvas);\r\n            } else if (options && options.element) {\r\n                mouse = Mouse.create(options.element);\r\n            } else {\r\n                mouse = Mouse.create();\r\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\r\n            }\r\n        }\r\n\r\n        var constraint = Constraint.create({ \r\n            label: 'Mouse Constraint',\r\n            pointA: mouse.position,\r\n            pointB: { x: 0, y: 0 },\r\n            length: 0.01, \r\n            stiffness: 0.1,\r\n            angularStiffness: 1,\r\n            render: {\r\n                strokeStyle: '#90EE90',\r\n                lineWidth: 3\r\n            }\r\n        });\r\n\r\n        var defaults = {\r\n            type: 'mouseConstraint',\r\n            mouse: mouse,\r\n            element: null,\r\n            body: null,\r\n            constraint: constraint,\r\n            collisionFilter: {\r\n                category: 0x0001,\r\n                mask: 0xFFFFFFFF,\r\n                group: 0\r\n            }\r\n        };\r\n\r\n        var mouseConstraint = Common.extend(defaults, options);\r\n\r\n        Events.on(engine, 'beforeUpdate', function() {\r\n            var allBodies = Composite.allBodies(engine.world);\r\n            MouseConstraint.update(mouseConstraint, allBodies);\r\n            MouseConstraint._triggerEvents(mouseConstraint);\r\n        });\r\n\r\n        return mouseConstraint;\r\n    };\r\n\r\n    /**\r\n     * Updates the given mouse constraint.\r\n     * @private\r\n     * @method update\r\n     * @param {MouseConstraint} mouseConstraint\r\n     * @param {body[]} bodies\r\n     */\r\n    MouseConstraint.update = function(mouseConstraint, bodies) {\r\n        var mouse = mouseConstraint.mouse,\r\n            constraint = mouseConstraint.constraint,\r\n            body = mouseConstraint.body;\r\n\r\n        if (mouse.button === 0) {\r\n            if (!constraint.bodyB) {\r\n                for (var i = 0; i < bodies.length; i++) {\r\n                    body = bodies[i];\r\n                    if (Bounds.contains(body.bounds, mouse.position) \r\n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\r\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\r\n                            var part = body.parts[j];\r\n                            if (Vertices.contains(part.vertices, mouse.position)) {\r\n                                constraint.pointA = mouse.position;\r\n                                constraint.bodyB = mouseConstraint.body = body;\r\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\r\n                                constraint.angleB = body.angle;\r\n\r\n                                Sleeping.set(body, false);\r\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\r\n\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Sleeping.set(constraint.bodyB, false);\r\n                constraint.pointA = mouse.position;\r\n            }\r\n        } else {\r\n            constraint.bodyB = mouseConstraint.body = null;\r\n            constraint.pointB = null;\r\n\r\n            if (body)\r\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Triggers mouse constraint events.\r\n     * @method _triggerEvents\r\n     * @private\r\n     * @param {mouse} mouseConstraint\r\n     */\r\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\r\n        var mouse = mouseConstraint.mouse,\r\n            mouseEvents = mouse.sourceEvents;\r\n\r\n        if (mouseEvents.mousemove)\r\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\r\n\r\n        if (mouseEvents.mousedown)\r\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\r\n\r\n        if (mouseEvents.mouseup)\r\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\r\n\r\n        // reset the mouse state ready for the next step\r\n        Mouse.clearSourceEvents(mouse);\r\n    };\r\n\r\n    /*\r\n    *\r\n    *  Events Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n    * Fired when the mouse has moved (or a touch moves) during the last step\r\n    *\r\n    * @event mousemove\r\n    * @param {} event An event object\r\n    * @param {mouse} event.mouse The engine's mouse instance\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired when the mouse is down (or a touch has started) during the last step\r\n    *\r\n    * @event mousedown\r\n    * @param {} event An event object\r\n    * @param {mouse} event.mouse The engine's mouse instance\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired when the mouse is up (or a touch has ended) during the last step\r\n    *\r\n    * @event mouseup\r\n    * @param {} event An event object\r\n    * @param {mouse} event.mouse The engine's mouse instance\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired when the user starts dragging a body\r\n    *\r\n    * @event startdrag\r\n    * @param {} event An event object\r\n    * @param {mouse} event.mouse The engine's mouse instance\r\n    * @param {body} event.body The body being dragged\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired when the user ends dragging a body\r\n    *\r\n    * @event enddrag\r\n    * @param {} event An event object\r\n    * @param {mouse} event.mouse The engine's mouse instance\r\n    * @param {body} event.body The body that has stopped being dragged\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /*\r\n    *\r\n    *  Properties Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n     * A `String` denoting the type of object.\r\n     *\r\n     * @property type\r\n     * @type string\r\n     * @default \"constraint\"\r\n     * @readOnly\r\n     */\r\n\r\n    /**\r\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\r\n     *\r\n     * @property mouse\r\n     * @type mouse\r\n     * @default mouse\r\n     */\r\n\r\n    /**\r\n     * The `Body` that is currently being moved by the user, or `null` if no body.\r\n     *\r\n     * @property body\r\n     * @type body\r\n     * @default null\r\n     */\r\n\r\n    /**\r\n     * The `Constraint` object that is used to move the body during interaction.\r\n     *\r\n     * @property constraint\r\n     * @type constraint\r\n     */\r\n\r\n    /**\r\n     * An `Object` that specifies the collision filter properties.\r\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\r\n     * See `body.collisionFilter` for more information.\r\n     *\r\n     * @property collisionFilter\r\n     * @type object\r\n     */\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 25 */\r\n/***/ (function(module, exports, __nested_webpack_require_286248__) {\r\n\r\n/**\r\n* The `Matter.Query` module contains methods for performing collision queries.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Query\r\n*/\r\n\r\nvar Query = {};\r\n\r\nmodule.exports = Query;\r\n\r\nvar Vector = __nested_webpack_require_286248__(2);\r\nvar Collision = __nested_webpack_require_286248__(8);\r\nvar Bounds = __nested_webpack_require_286248__(1);\r\nvar Bodies = __nested_webpack_require_286248__(12);\r\nvar Vertices = __nested_webpack_require_286248__(3);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Returns a list of collisions between `body` and `bodies`.\r\n     * @method collides\r\n     * @param {body} body\r\n     * @param {body[]} bodies\r\n     * @return {collision[]} Collisions\r\n     */\r\n    Query.collides = function(body, bodies) {\r\n        var collisions = [],\r\n            bodiesLength = bodies.length,\r\n            bounds = body.bounds,\r\n            collides = Collision.collides,\r\n            overlaps = Bounds.overlaps;\r\n\r\n        for (var i = 0; i < bodiesLength; i++) {\r\n            var bodyA = bodies[i],\r\n                partsALength = bodyA.parts.length,\r\n                partsAStart = partsALength === 1 ? 0 : 1;\r\n            \r\n            if (overlaps(bodyA.bounds, bounds)) {\r\n                for (var j = partsAStart; j < partsALength; j++) {\r\n                    var part = bodyA.parts[j];\r\n\r\n                    if (overlaps(part.bounds, bounds)) {\r\n                        var collision = collides(part, body);\r\n\r\n                        if (collision) {\r\n                            collisions.push(collision);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return collisions;\r\n    };\r\n\r\n    /**\r\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\r\n     * @method ray\r\n     * @param {body[]} bodies\r\n     * @param {vector} startPoint\r\n     * @param {vector} endPoint\r\n     * @param {number} [rayWidth]\r\n     * @return {collision[]} Collisions\r\n     */\r\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\r\n        rayWidth = rayWidth || 1e-100;\r\n\r\n        var rayAngle = Vector.angle(startPoint, endPoint),\r\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\r\n            rayX = (endPoint.x + startPoint.x) * 0.5,\r\n            rayY = (endPoint.y + startPoint.y) * 0.5,\r\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\r\n            collisions = Query.collides(ray, bodies);\r\n\r\n        for (var i = 0; i < collisions.length; i += 1) {\r\n            var collision = collisions[i];\r\n            collision.body = collision.bodyB = collision.bodyA;            \r\n        }\r\n\r\n        return collisions;\r\n    };\r\n\r\n    /**\r\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\r\n     * @method region\r\n     * @param {body[]} bodies\r\n     * @param {bounds} bounds\r\n     * @param {bool} [outside=false]\r\n     * @return {body[]} The bodies matching the query\r\n     */\r\n    Query.region = function(bodies, bounds, outside) {\r\n        var result = [];\r\n\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i],\r\n                overlaps = Bounds.overlaps(body.bounds, bounds);\r\n            if ((overlaps && !outside) || (!overlaps && outside))\r\n                result.push(body);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\r\n     * @method point\r\n     * @param {body[]} bodies\r\n     * @param {vector} point\r\n     * @return {body[]} The bodies matching the query\r\n     */\r\n    Query.point = function(bodies, point) {\r\n        var result = [];\r\n\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i];\r\n            \r\n            if (Bounds.contains(body.bounds, point)) {\r\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\r\n                    var part = body.parts[j];\r\n\r\n                    if (Bounds.contains(part.bounds, point)\r\n                        && Vertices.contains(part.vertices, point)) {\r\n                        result.push(body);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 26 */\r\n/***/ (function(module, exports, __nested_webpack_require_290765__) {\r\n\r\n/**\r\n* The `Matter.Render` module is a simple canvas based renderer for visualising instances of `Matter.Engine`.\r\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\r\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\r\n*\r\n* @class Render\r\n*/\r\n\r\nvar Render = {};\r\n\r\nmodule.exports = Render;\r\n\r\nvar Body = __nested_webpack_require_290765__(4);\r\nvar Common = __nested_webpack_require_290765__(0);\r\nvar Composite = __nested_webpack_require_290765__(6);\r\nvar Bounds = __nested_webpack_require_290765__(1);\r\nvar Events = __nested_webpack_require_290765__(5);\r\nvar Vector = __nested_webpack_require_290765__(2);\r\nvar Mouse = __nested_webpack_require_290765__(14);\r\n\r\n(function() {\r\n\r\n    var _requestAnimationFrame,\r\n        _cancelAnimationFrame;\r\n\r\n    if (typeof window !== 'undefined') {\r\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\r\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\r\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\r\n\r\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\r\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\r\n    }\r\n\r\n    Render._goodFps = 30;\r\n    Render._goodDelta = 1000 / 60;\r\n\r\n    /**\r\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\r\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\r\n     * See the properties section below for detailed information on what you can pass via the `options` object.\r\n     * @method create\r\n     * @param {object} [options]\r\n     * @return {render} A new renderer\r\n     */\r\n    Render.create = function(options) {\r\n        var defaults = {\r\n            engine: null,\r\n            element: null,\r\n            canvas: null,\r\n            mouse: null,\r\n            frameRequestId: null,\r\n            timing: {\r\n                historySize: 60,\r\n                delta: 0,\r\n                deltaHistory: [],\r\n                lastTime: 0,\r\n                lastTimestamp: 0,\r\n                lastElapsed: 0,\r\n                timestampElapsed: 0,\r\n                timestampElapsedHistory: [],\r\n                engineDeltaHistory: [],\r\n                engineElapsedHistory: [],\r\n                elapsedHistory: []\r\n            },\r\n            options: {\r\n                width: 800,\r\n                height: 600,\r\n                pixelRatio: 1,\r\n                background: '#14151f',\r\n                wireframeBackground: '#14151f',\r\n                hasBounds: !!options.bounds,\r\n                enabled: true,\r\n                wireframes: true,\r\n                showSleeping: true,\r\n                showDebug: false,\r\n                showStats: false,\r\n                showPerformance: false,\r\n                showBounds: false,\r\n                showVelocity: false,\r\n                showCollisions: false,\r\n                showSeparations: false,\r\n                showAxes: false,\r\n                showPositions: false,\r\n                showAngleIndicator: false,\r\n                showIds: false,\r\n                showVertexNumbers: false,\r\n                showConvexHulls: false,\r\n                showInternalEdges: false,\r\n                showMousePosition: false\r\n            }\r\n        };\r\n\r\n        var render = Common.extend(defaults, options);\r\n\r\n        if (render.canvas) {\r\n            render.canvas.width = render.options.width || render.canvas.width;\r\n            render.canvas.height = render.options.height || render.canvas.height;\r\n        }\r\n\r\n        render.mouse = options.mouse;\r\n        render.engine = options.engine;\r\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\r\n        render.context = render.canvas.getContext('2d');\r\n        render.textures = {};\r\n\r\n        render.bounds = render.bounds || {\r\n            min: {\r\n                x: 0,\r\n                y: 0\r\n            },\r\n            max: {\r\n                x: render.canvas.width,\r\n                y: render.canvas.height\r\n            }\r\n        };\r\n\r\n        // for temporary back compatibility only\r\n        render.controller = Render;\r\n        render.options.showBroadphase = false;\r\n\r\n        if (render.options.pixelRatio !== 1) {\r\n            Render.setPixelRatio(render, render.options.pixelRatio);\r\n        }\r\n\r\n        if (Common.isElement(render.element)) {\r\n            render.element.appendChild(render.canvas);\r\n        }\r\n\r\n        return render;\r\n    };\r\n\r\n    /**\r\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\r\n     * @method run\r\n     * @param {render} render\r\n     */\r\n    Render.run = function(render) {\r\n        (function loop(time){\r\n            render.frameRequestId = _requestAnimationFrame(loop);\r\n            \r\n            _updateTiming(render, time);\r\n\r\n            Render.world(render, time);\r\n\r\n            if (render.options.showStats || render.options.showDebug) {\r\n                Render.stats(render, render.context, time);\r\n            }\r\n\r\n            if (render.options.showPerformance || render.options.showDebug) {\r\n                Render.performance(render, render.context, time);\r\n            }\r\n        })();\r\n    };\r\n\r\n    /**\r\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\r\n     * @method stop\r\n     * @param {render} render\r\n     */\r\n    Render.stop = function(render) {\r\n        _cancelAnimationFrame(render.frameRequestId);\r\n    };\r\n\r\n    /**\r\n     * Sets the pixel ratio of the renderer and updates the canvas.\r\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\r\n     * @method setPixelRatio\r\n     * @param {render} render\r\n     * @param {number} pixelRatio\r\n     */\r\n    Render.setPixelRatio = function(render, pixelRatio) {\r\n        var options = render.options,\r\n            canvas = render.canvas;\r\n\r\n        if (pixelRatio === 'auto') {\r\n            pixelRatio = _getPixelRatio(canvas);\r\n        }\r\n\r\n        options.pixelRatio = pixelRatio;\r\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\r\n        canvas.width = options.width * pixelRatio;\r\n        canvas.height = options.height * pixelRatio;\r\n        canvas.style.width = options.width + 'px';\r\n        canvas.style.height = options.height + 'px';\r\n    };\r\n\r\n    /**\r\n     * Positions and sizes the viewport around the given object bounds.\r\n     * Objects must have at least one of the following properties:\r\n     * - `object.bounds`\r\n     * - `object.position`\r\n     * - `object.min` and `object.max`\r\n     * - `object.x` and `object.y`\r\n     * @method lookAt\r\n     * @param {render} render\r\n     * @param {object[]} objects\r\n     * @param {vector} [padding]\r\n     * @param {bool} [center=true]\r\n     */\r\n    Render.lookAt = function(render, objects, padding, center) {\r\n        center = typeof center !== 'undefined' ? center : true;\r\n        objects = Common.isArray(objects) ? objects : [objects];\r\n        padding = padding || {\r\n            x: 0,\r\n            y: 0\r\n        };\r\n\r\n        // find bounds of all objects\r\n        var bounds = {\r\n            min: { x: Infinity, y: Infinity },\r\n            max: { x: -Infinity, y: -Infinity }\r\n        };\r\n\r\n        for (var i = 0; i < objects.length; i += 1) {\r\n            var object = objects[i],\r\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\r\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\r\n\r\n            if (min && max) {\r\n                if (min.x < bounds.min.x)\r\n                    bounds.min.x = min.x;\r\n\r\n                if (max.x > bounds.max.x)\r\n                    bounds.max.x = max.x;\r\n\r\n                if (min.y < bounds.min.y)\r\n                    bounds.min.y = min.y;\r\n\r\n                if (max.y > bounds.max.y)\r\n                    bounds.max.y = max.y;\r\n            }\r\n        }\r\n\r\n        // find ratios\r\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\r\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\r\n            viewHeight = render.canvas.height,\r\n            viewWidth = render.canvas.width,\r\n            outerRatio = viewWidth / viewHeight,\r\n            innerRatio = width / height,\r\n            scaleX = 1,\r\n            scaleY = 1;\r\n\r\n        // find scale factor\r\n        if (innerRatio > outerRatio) {\r\n            scaleY = innerRatio / outerRatio;\r\n        } else {\r\n            scaleX = outerRatio / innerRatio;\r\n        }\r\n\r\n        // enable bounds\r\n        render.options.hasBounds = true;\r\n\r\n        // position and size\r\n        render.bounds.min.x = bounds.min.x;\r\n        render.bounds.max.x = bounds.min.x + width * scaleX;\r\n        render.bounds.min.y = bounds.min.y;\r\n        render.bounds.max.y = bounds.min.y + height * scaleY;\r\n\r\n        // center\r\n        if (center) {\r\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\r\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\r\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\r\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\r\n        }\r\n\r\n        // padding\r\n        render.bounds.min.x -= padding.x;\r\n        render.bounds.max.x -= padding.x;\r\n        render.bounds.min.y -= padding.y;\r\n        render.bounds.max.y -= padding.y;\r\n\r\n        // update mouse\r\n        if (render.mouse) {\r\n            Mouse.setScale(render.mouse, {\r\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\r\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\r\n            });\r\n\r\n            Mouse.setOffset(render.mouse, render.bounds.min);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Applies viewport transforms based on `render.bounds` to a render context.\r\n     * @method startViewTransform\r\n     * @param {render} render\r\n     */\r\n    Render.startViewTransform = function(render) {\r\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\r\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\r\n            boundsScaleX = boundsWidth / render.options.width,\r\n            boundsScaleY = boundsHeight / render.options.height;\r\n\r\n        render.context.setTransform(\r\n            render.options.pixelRatio / boundsScaleX, 0, 0, \r\n            render.options.pixelRatio / boundsScaleY, 0, 0\r\n        );\r\n        \r\n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\r\n    };\r\n\r\n    /**\r\n     * Resets all transforms on the render context.\r\n     * @method endViewTransform\r\n     * @param {render} render\r\n     */\r\n    Render.endViewTransform = function(render) {\r\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\r\n    };\r\n\r\n    /**\r\n     * Renders the given `engine`'s `Matter.World` object.\r\n     * This is the entry point for all rendering and should be called every time the scene changes.\r\n     * @method world\r\n     * @param {render} render\r\n     */\r\n    Render.world = function(render, time) {\r\n        var startTime = Common.now(),\r\n            engine = render.engine,\r\n            world = engine.world,\r\n            canvas = render.canvas,\r\n            context = render.context,\r\n            options = render.options,\r\n            timing = render.timing;\r\n\r\n        var allBodies = Composite.allBodies(world),\r\n            allConstraints = Composite.allConstraints(world),\r\n            background = options.wireframes ? options.wireframeBackground : options.background,\r\n            bodies = [],\r\n            constraints = [],\r\n            i;\r\n\r\n        var event = {\r\n            timestamp: engine.timing.timestamp\r\n        };\r\n\r\n        Events.trigger(render, 'beforeRender', event);\r\n\r\n        // apply background if it has changed\r\n        if (render.currentBackground !== background)\r\n            _applyBackground(render, background);\r\n\r\n        // clear the canvas with a transparent fill, to allow the canvas background to show\r\n        context.globalCompositeOperation = 'source-in';\r\n        context.fillStyle = \"transparent\";\r\n        context.fillRect(0, 0, canvas.width, canvas.height);\r\n        context.globalCompositeOperation = 'source-over';\r\n\r\n        // handle bounds\r\n        if (options.hasBounds) {\r\n            // filter out bodies that are not in view\r\n            for (i = 0; i < allBodies.length; i++) {\r\n                var body = allBodies[i];\r\n                if (Bounds.overlaps(body.bounds, render.bounds))\r\n                    bodies.push(body);\r\n            }\r\n\r\n            // filter out constraints that are not in view\r\n            for (i = 0; i < allConstraints.length; i++) {\r\n                var constraint = allConstraints[i],\r\n                    bodyA = constraint.bodyA,\r\n                    bodyB = constraint.bodyB,\r\n                    pointAWorld = constraint.pointA,\r\n                    pointBWorld = constraint.pointB;\r\n\r\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\r\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\r\n\r\n                if (!pointAWorld || !pointBWorld)\r\n                    continue;\r\n\r\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\r\n                    constraints.push(constraint);\r\n            }\r\n\r\n            // transform the view\r\n            Render.startViewTransform(render);\r\n\r\n            // update mouse\r\n            if (render.mouse) {\r\n                Mouse.setScale(render.mouse, {\r\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\r\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\r\n                });\r\n\r\n                Mouse.setOffset(render.mouse, render.bounds.min);\r\n            }\r\n        } else {\r\n            constraints = allConstraints;\r\n            bodies = allBodies;\r\n\r\n            if (render.options.pixelRatio !== 1) {\r\n                render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\r\n            }\r\n        }\r\n\r\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\r\n            // fully featured rendering of bodies\r\n            Render.bodies(render, bodies, context);\r\n        } else {\r\n            if (options.showConvexHulls)\r\n                Render.bodyConvexHulls(render, bodies, context);\r\n\r\n            // optimised method for wireframes only\r\n            Render.bodyWireframes(render, bodies, context);\r\n        }\r\n\r\n        if (options.showBounds)\r\n            Render.bodyBounds(render, bodies, context);\r\n\r\n        if (options.showAxes || options.showAngleIndicator)\r\n            Render.bodyAxes(render, bodies, context);\r\n\r\n        if (options.showPositions)\r\n            Render.bodyPositions(render, bodies, context);\r\n\r\n        if (options.showVelocity)\r\n            Render.bodyVelocity(render, bodies, context);\r\n\r\n        if (options.showIds)\r\n            Render.bodyIds(render, bodies, context);\r\n\r\n        if (options.showSeparations)\r\n            Render.separations(render, engine.pairs.list, context);\r\n\r\n        if (options.showCollisions)\r\n            Render.collisions(render, engine.pairs.list, context);\r\n\r\n        if (options.showVertexNumbers)\r\n            Render.vertexNumbers(render, bodies, context);\r\n\r\n        if (options.showMousePosition)\r\n            Render.mousePosition(render, render.mouse, context);\r\n\r\n        Render.constraints(constraints, context);\r\n\r\n        if (options.hasBounds) {\r\n            // revert view transforms\r\n            Render.endViewTransform(render);\r\n        }\r\n\r\n        Events.trigger(render, 'afterRender', event);\r\n\r\n        // log the time elapsed computing this update\r\n        timing.lastElapsed = Common.now() - startTime;\r\n    };\r\n\r\n    /**\r\n     * Renders statistics about the engine and world useful for debugging.\r\n     * @private\r\n     * @method stats\r\n     * @param {render} render\r\n     * @param {RenderingContext} context\r\n     * @param {Number} time\r\n     */\r\n    Render.stats = function(render, context, time) {\r\n        var engine = render.engine,\r\n            world = engine.world,\r\n            bodies = Composite.allBodies(world),\r\n            parts = 0,\r\n            width = 55,\r\n            height = 44,\r\n            x = 0,\r\n            y = 0;\r\n        \r\n        // count parts\r\n        for (var i = 0; i < bodies.length; i += 1) {\r\n            parts += bodies[i].parts.length;\r\n        }\r\n\r\n        // sections\r\n        var sections = {\r\n            'Part': parts,\r\n            'Body': bodies.length,\r\n            'Cons': Composite.allConstraints(world).length,\r\n            'Comp': Composite.allComposites(world).length,\r\n            'Pair': engine.pairs.list.length\r\n        };\r\n\r\n        // background\r\n        context.fillStyle = '#0e0f19';\r\n        context.fillRect(x, y, width * 5.5, height);\r\n\r\n        context.font = '12px Arial';\r\n        context.textBaseline = 'top';\r\n        context.textAlign = 'right';\r\n\r\n        // sections\r\n        for (var key in sections) {\r\n            var section = sections[key];\r\n            // label\r\n            context.fillStyle = '#aaa';\r\n            context.fillText(key, x + width, y + 8);\r\n\r\n            // value\r\n            context.fillStyle = '#eee';\r\n            context.fillText(section, x + width, y + 26);\r\n\r\n            x += width;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Renders engine and render performance information.\r\n     * @private\r\n     * @method performance\r\n     * @param {render} render\r\n     * @param {RenderingContext} context\r\n     */\r\n    Render.performance = function(render, context) {\r\n        var engine = render.engine,\r\n            timing = render.timing,\r\n            deltaHistory = timing.deltaHistory,\r\n            elapsedHistory = timing.elapsedHistory,\r\n            timestampElapsedHistory = timing.timestampElapsedHistory,\r\n            engineDeltaHistory = timing.engineDeltaHistory,\r\n            engineElapsedHistory = timing.engineElapsedHistory,\r\n            lastEngineDelta = engine.timing.lastDelta;\r\n        \r\n        var deltaMean = _mean(deltaHistory),\r\n            elapsedMean = _mean(elapsedHistory),\r\n            engineDeltaMean = _mean(engineDeltaHistory),\r\n            engineElapsedMean = _mean(engineElapsedHistory),\r\n            timestampElapsedMean = _mean(timestampElapsedHistory),\r\n            rateMean = (timestampElapsedMean / deltaMean) || 0,\r\n            fps = (1000 / deltaMean) || 0;\r\n\r\n        var graphHeight = 4,\r\n            gap = 12,\r\n            width = 60,\r\n            height = 34,\r\n            x = 10,\r\n            y = 69;\r\n\r\n        // background\r\n        context.fillStyle = '#0e0f19';\r\n        context.fillRect(0, 50, gap * 4 + width * 5 + 22, height);\r\n\r\n        // show FPS\r\n        Render.status(\r\n            context, x, y, width, graphHeight, deltaHistory.length, \r\n            Math.round(fps) + ' fps', \r\n            fps / Render._goodFps,\r\n            function(i) { return (deltaHistory[i] / deltaMean) - 1; }\r\n        );\r\n\r\n        // show engine delta\r\n        Render.status(\r\n            context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length,\r\n            lastEngineDelta.toFixed(2) + ' dt', \r\n            Render._goodDelta / lastEngineDelta,\r\n            function(i) { return (engineDeltaHistory[i] / engineDeltaMean) - 1; }\r\n        );\r\n\r\n        // show engine update time\r\n        Render.status(\r\n            context, x + (gap + width) * 2, y, width, graphHeight, engineElapsedHistory.length,\r\n            engineElapsedMean.toFixed(2) + ' ut', \r\n            1 - (engineElapsedMean / Render._goodFps),\r\n            function(i) { return (engineElapsedHistory[i] / engineElapsedMean) - 1; }\r\n        );\r\n\r\n        // show render time\r\n        Render.status(\r\n            context, x + (gap + width) * 3, y, width, graphHeight, elapsedHistory.length,\r\n            elapsedMean.toFixed(2) + ' rt', \r\n            1 - (elapsedMean / Render._goodFps),\r\n            function(i) { return (elapsedHistory[i] / elapsedMean) - 1; }\r\n        );\r\n\r\n        // show effective speed\r\n        Render.status(\r\n            context, x + (gap + width) * 4, y, width, graphHeight, timestampElapsedHistory.length, \r\n            rateMean.toFixed(2) + ' x', \r\n            rateMean * rateMean * rateMean,\r\n            function(i) { return (((timestampElapsedHistory[i] / deltaHistory[i]) / rateMean) || 0) - 1; }\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Renders a label, indicator and a chart.\r\n     * @private\r\n     * @method status\r\n     * @param {RenderingContext} context\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} width\r\n     * @param {number} height\r\n     * @param {number} count\r\n     * @param {string} label\r\n     * @param {string} indicator\r\n     * @param {function} plotY\r\n     */\r\n    Render.status = function(context, x, y, width, height, count, label, indicator, plotY) {\r\n        // background\r\n        context.strokeStyle = '#888';\r\n        context.fillStyle = '#444';\r\n        context.lineWidth = 1;\r\n        context.fillRect(x, y + 7, width, 1);\r\n\r\n        // chart\r\n        context.beginPath();\r\n        context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\r\n        for (var i = 0; i < width; i += 1) {\r\n            context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\r\n        }\r\n        context.stroke();\r\n\r\n        // indicator\r\n        context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\r\n        context.fillRect(x, y - 7, 4, 4);\r\n\r\n        // label\r\n        context.font = '12px Arial';\r\n        context.textBaseline = 'middle';\r\n        context.textAlign = 'right';\r\n        context.fillStyle = '#eee';\r\n        context.fillText(label, x + width, y - 5);\r\n    };\r\n\r\n    /**\r\n     * Description\r\n     * @private\r\n     * @method constraints\r\n     * @param {constraint[]} constraints\r\n     * @param {RenderingContext} context\r\n     */\r\n    Render.constraints = function(constraints, context) {\r\n        var c = context;\r\n\r\n        for (var i = 0; i < constraints.length; i++) {\r\n            var constraint = constraints[i];\r\n\r\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\r\n                continue;\r\n\r\n            var bodyA = constraint.bodyA,\r\n                bodyB = constraint.bodyB,\r\n                start,\r\n                end;\r\n\r\n            if (bodyA) {\r\n                start = Vector.add(bodyA.position, constraint.pointA);\r\n            } else {\r\n                start = constraint.pointA;\r\n            }\r\n\r\n            if (constraint.render.type === 'pin') {\r\n                c.beginPath();\r\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\r\n                c.closePath();\r\n            } else {\r\n                if (bodyB) {\r\n                    end = Vector.add(bodyB.position, constraint.pointB);\r\n                } else {\r\n                    end = constraint.pointB;\r\n                }\r\n\r\n                c.beginPath();\r\n                c.moveTo(start.x, start.y);\r\n\r\n                if (constraint.render.type === 'spring') {\r\n                    var delta = Vector.sub(end, start),\r\n                        normal = Vector.perp(Vector.normalise(delta)),\r\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\r\n                        offset;\r\n\r\n                    for (var j = 1; j < coils; j += 1) {\r\n                        offset = j % 2 === 0 ? 1 : -1;\r\n\r\n                        c.lineTo(\r\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\r\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\r\n                        );\r\n                    }\r\n                }\r\n\r\n                c.lineTo(end.x, end.y);\r\n            }\r\n\r\n            if (constraint.render.lineWidth) {\r\n                c.lineWidth = constraint.render.lineWidth;\r\n                c.strokeStyle = constraint.render.strokeStyle;\r\n                c.stroke();\r\n            }\r\n\r\n            if (constraint.render.anchors) {\r\n                c.fillStyle = constraint.render.strokeStyle;\r\n                c.beginPath();\r\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\r\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\r\n                c.closePath();\r\n                c.fill();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Description\r\n     * @private\r\n     * @method bodies\r\n     * @param {render} render\r\n     * @param {body[]} bodies\r\n     * @param {RenderingContext} context\r\n     */\r\n    Render.bodies = function(render, bodies, context) {\r\n        var c = context,\r\n            engine = render.engine,\r\n            options = render.options,\r\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\r\n            body,\r\n            part,\r\n            i,\r\n            k;\r\n\r\n        for (i = 0; i < bodies.length; i++) {\r\n            body = bodies[i];\r\n\r\n            if (!body.render.visible)\r\n                continue;\r\n\r\n            // handle compound parts\r\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\r\n                part = body.parts[k];\r\n\r\n                if (!part.render.visible)\r\n                    continue;\r\n\r\n                if (options.showSleeping && body.isSleeping) {\r\n                    c.globalAlpha = 0.5 * part.render.opacity;\r\n                } else if (part.render.opacity !== 1) {\r\n                    c.globalAlpha = part.render.opacity;\r\n                }\r\n\r\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\r\n                    // part sprite\r\n                    var sprite = part.render.sprite,\r\n                        texture = _getTexture(render, sprite.texture);\r\n\r\n                    c.translate(part.position.x, part.position.y);\r\n                    c.rotate(part.angle);\r\n\r\n                    c.drawImage(\r\n                        texture,\r\n                        texture.width * -sprite.xOffset * sprite.xScale,\r\n                        texture.height * -sprite.yOffset * sprite.yScale,\r\n                        texture.width * sprite.xScale,\r\n                        texture.height * sprite.yScale\r\n                    );\r\n\r\n                    // revert translation, hopefully faster than save / restore\r\n                    c.rotate(-part.angle);\r\n                    c.translate(-part.position.x, -part.position.y);\r\n                } else {\r\n                    // part polygon\r\n                    if (part.circleRadius) {\r\n                        c.beginPath();\r\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\r\n                    } else {\r\n                        c.beginPath();\r\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\r\n\r\n                        for (var j = 1; j < part.vertices.length; j++) {\r\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\r\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\r\n                            } else {\r\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\r\n                            }\r\n\r\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\r\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\r\n                            }\r\n                        }\r\n\r\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\r\n                        c.closePath();\r\n                    }\r\n\r\n                    if (!options.wireframes) {\r\n                        c.fillStyle = part.render.fillStyle;\r\n\r\n                        if (part.render.lineWidth) {\r\n                            c.lineWidth = part.render.lineWidth;\r\n                            c.strokeStyle = part.render.strokeStyle;\r\n                            c.stroke();\r\n                        }\r\n\r\n                        c.fill();\r\n                    } else {\r\n                        c.lineWidth = 1;\r\n                        c.strokeStyle = '#bbb';\r\n                        c.stroke();\r\n                    }\r\n                }\r\n\r\n                c.globalAlpha = 1;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Optimised method for drawing body wireframes in one pass\r\n     * @private\r\n     * @method bodyWireframes\r\n     * @param {render} render\r\n     * @param {body[]} bodies\r\n     * @param {RenderingContext} context\r\n     */\r\n    Render.bodyWireframes = function(render, bodies, context) {\r\n        var c = context,\r\n            showInternalEdges = render.options.showInternalEdges,\r\n            body,\r\n            part,\r\n            i,\r\n            j,\r\n            k;\r\n\r\n        c.beginPath();\r\n\r\n        // render all bodies\r\n        for (i = 0; i < bodies.length; i++) {\r\n            body = bodies[i];\r\n\r\n            if (!body.render.visible)\r\n                continue;\r\n\r\n            // handle compound parts\r\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\r\n                part = body.parts[k];\r\n\r\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\r\n\r\n                for (j = 1; j < part.vertices.length; j++) {\r\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\r\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\r\n                    } else {\r\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\r\n                    }\r\n\r\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\r\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\r\n                    }\r\n                }\r\n\r\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\r\n            }\r\n        }\r\n\r\n        c.lineWidth = 1;\r\n        c.strokeStyle = '#bbb';\r\n        c.stroke();\r\n    };\r\n\r\n    /**\r\n     * Optimised method for drawing body convex hull wireframes in one pass\r\n     * @private\r\n     * @method bodyConvexHulls\r\n     * @param {render} render\r\n     * @param {body[]} bodies\r\n     * @param {RenderingContext} context\r\n     */\r\n    Render.bodyConvexHulls = function(render, bodies, context) {\r\n        var c = context,\r\n            body,\r\n            part,\r\n            i,\r\n            j,\r\n            k;\r\n\r\n        c.beginPath();\r\n\r\n        // render convex hulls\r\n        for (i = 0; i < bodies.length; i++) {\r\n            body = bodies[i];\r\n\r\n            if (!body.render.visible || body.parts.length === 1)\r\n                continue;\r\n\r\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\r\n\r\n            for (j = 1; j < body.vertices.length; j++) {\r\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\r\n            }\r\n\r\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\r\n        }\r\n\r\n        c.lineWidth = 1;\r\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\r\n        c.stroke();\r\n    };\r\n\r\n    /**\r\n     * Renders body vertex numbers.\r\n     * @private\r\n     * @method vertexNumbers\r\n     * @param {render} render\r\n     * @param {body[]} bodies\r\n     * @param {RenderingContext} context\r\n     */\r\n    Render.vertexNumbers = function(render, bodies, context) {\r\n        var c = context,\r\n            i,\r\n            j,\r\n            k;\r\n\r\n        for (i = 0; i < bodies.length; i++) {\r\n            var parts = bodies[i].parts;\r\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\r\n                var part = parts[k];\r\n                for (j = 0; j < part.vertices.length; j++) {\r\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\r\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Renders mouse position.\r\n     * @private\r\n     * @method mousePosition\r\n     * @param {render} render\r\n     * @param {mouse} mouse\r\n     * @param {RenderingContext} context\r\n     */\r\n    Render.mousePosition = function(render, mouse, context) {\r\n        var c = context;\r\n        c.fillStyle = 'rgba(255,255,255,0.8)';\r\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\r\n    };\r\n\r\n    /**\r\n     * Draws body bounds\r\n     * @private\r\n     * @method bodyBounds\r\n     * @param {render} render\r\n     * @param {body[]} bodies\r\n     * @param {RenderingContext} context\r\n     */\r\n    Render.bodyBounds = function(render, bodies, context) {\r\n        var c = context,\r\n            engine = render.engine,\r\n            options = render.options;\r\n\r\n        c.beginPath();\r\n\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i];\r\n\r\n            if (body.render.visible) {\r\n                var parts = bodies[i].parts;\r\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\r\n                    var part = parts[j];\r\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (options.wireframes) {\r\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\r\n        } else {\r\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\r\n        }\r\n\r\n        c.lineWidth = 1;\r\n        c.stroke();\r\n    };\r\n\r\n    /**\r\n     * Draws body angle indicators and axes\r\n     * @private\r\n     * @method bodyAxes\r\n     * @param {render} render\r\n     * @param {body[]} bodies\r\n     * @param {RenderingContext} context\r\n     */\r\n    Render.bodyAxes = function(render, bodies, context) {\r\n        var c = context,\r\n            engine = render.engine,\r\n            options = render.options,\r\n            part,\r\n            i,\r\n            j,\r\n            k;\r\n\r\n        c.beginPath();\r\n\r\n        for (i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i],\r\n                parts = body.parts;\r\n\r\n            if (!body.render.visible)\r\n                continue;\r\n\r\n            if (options.showAxes) {\r\n                // render all axes\r\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\r\n                    part = parts[j];\r\n                    for (k = 0; k < part.axes.length; k++) {\r\n                        var axis = part.axes[k];\r\n                        c.moveTo(part.position.x, part.position.y);\r\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\r\n                    }\r\n                }\r\n            } else {\r\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\r\n                    part = parts[j];\r\n                    for (k = 0; k < part.axes.length; k++) {\r\n                        // render a single axis indicator\r\n                        c.moveTo(part.position.x, part.position.y);\r\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\r\n                            (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (options.wireframes) {\r\n            c.strokeStyle = 'indianred';\r\n            c.lineWidth = 1;\r\n        } else {\r\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\r\n            c.globalCompositeOperation = 'overlay';\r\n            c.lineWidth = 2;\r\n        }\r\n\r\n        c.stroke();\r\n        c.globalCompositeOperation = 'source-over';\r\n    };\r\n\r\n    /**\r\n     * Draws body positions\r\n     * @private\r\n     * @method bodyPositions\r\n     * @param {render} render\r\n     * @param {body[]} bodies\r\n     * @param {RenderingContext} context\r\n     */\r\n    Render.bodyPositions = function(render, bodies, context) {\r\n        var c = context,\r\n            engine = render.engine,\r\n            options = render.options,\r\n            body,\r\n            part,\r\n            i,\r\n            k;\r\n\r\n        c.beginPath();\r\n\r\n        // render current positions\r\n        for (i = 0; i < bodies.length; i++) {\r\n            body = bodies[i];\r\n\r\n            if (!body.render.visible)\r\n                continue;\r\n\r\n            // handle compound parts\r\n            for (k = 0; k < body.parts.length; k++) {\r\n                part = body.parts[k];\r\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\r\n                c.closePath();\r\n            }\r\n        }\r\n\r\n        if (options.wireframes) {\r\n            c.fillStyle = 'indianred';\r\n        } else {\r\n            c.fillStyle = 'rgba(0,0,0,0.5)';\r\n        }\r\n        c.fill();\r\n\r\n        c.beginPath();\r\n\r\n        // render previous positions\r\n        for (i = 0; i < bodies.length; i++) {\r\n            body = bodies[i];\r\n            if (body.render.visible) {\r\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\r\n                c.closePath();\r\n            }\r\n        }\r\n\r\n        c.fillStyle = 'rgba(255,165,0,0.8)';\r\n        c.fill();\r\n    };\r\n\r\n    /**\r\n     * Draws body velocity\r\n     * @private\r\n     * @method bodyVelocity\r\n     * @param {render} render\r\n     * @param {body[]} bodies\r\n     * @param {RenderingContext} context\r\n     */\r\n    Render.bodyVelocity = function(render, bodies, context) {\r\n        var c = context;\r\n\r\n        c.beginPath();\r\n\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i];\r\n\r\n            if (!body.render.visible)\r\n                continue;\r\n\r\n            var velocity = Body.getVelocity(body);\r\n\r\n            c.moveTo(body.position.x, body.position.y);\r\n            c.lineTo(body.position.x + velocity.x, body.position.y + velocity.y);\r\n        }\r\n\r\n        c.lineWidth = 3;\r\n        c.strokeStyle = 'cornflowerblue';\r\n        c.stroke();\r\n    };\r\n\r\n    /**\r\n     * Draws body ids\r\n     * @private\r\n     * @method bodyIds\r\n     * @param {render} render\r\n     * @param {body[]} bodies\r\n     * @param {RenderingContext} context\r\n     */\r\n    Render.bodyIds = function(render, bodies, context) {\r\n        var c = context,\r\n            i,\r\n            j;\r\n\r\n        for (i = 0; i < bodies.length; i++) {\r\n            if (!bodies[i].render.visible)\r\n                continue;\r\n\r\n            var parts = bodies[i].parts;\r\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\r\n                var part = parts[j];\r\n                c.font = \"12px Arial\";\r\n                c.fillStyle = 'rgba(255,255,255,0.5)';\r\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Description\r\n     * @private\r\n     * @method collisions\r\n     * @param {render} render\r\n     * @param {pair[]} pairs\r\n     * @param {RenderingContext} context\r\n     */\r\n    Render.collisions = function(render, pairs, context) {\r\n        var c = context,\r\n            options = render.options,\r\n            pair,\r\n            collision,\r\n            corrected,\r\n            bodyA,\r\n            bodyB,\r\n            i,\r\n            j;\r\n\r\n        c.beginPath();\r\n\r\n        // render collision positions\r\n        for (i = 0; i < pairs.length; i++) {\r\n            pair = pairs[i];\r\n\r\n            if (!pair.isActive)\r\n                continue;\r\n\r\n            collision = pair.collision;\r\n            for (j = 0; j < pair.activeContacts.length; j++) {\r\n                var contact = pair.activeContacts[j],\r\n                    vertex = contact.vertex;\r\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\r\n            }\r\n        }\r\n\r\n        if (options.wireframes) {\r\n            c.fillStyle = 'rgba(255,255,255,0.7)';\r\n        } else {\r\n            c.fillStyle = 'orange';\r\n        }\r\n        c.fill();\r\n\r\n        c.beginPath();\r\n\r\n        // render collision normals\r\n        for (i = 0; i < pairs.length; i++) {\r\n            pair = pairs[i];\r\n\r\n            if (!pair.isActive)\r\n                continue;\r\n\r\n            collision = pair.collision;\r\n\r\n            if (pair.activeContacts.length > 0) {\r\n                var normalPosX = pair.activeContacts[0].vertex.x,\r\n                    normalPosY = pair.activeContacts[0].vertex.y;\r\n\r\n                if (pair.activeContacts.length === 2) {\r\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\r\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\r\n                }\r\n\r\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\r\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\r\n                } else {\r\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\r\n                }\r\n\r\n                c.lineTo(normalPosX, normalPosY);\r\n            }\r\n        }\r\n\r\n        if (options.wireframes) {\r\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\r\n        } else {\r\n            c.strokeStyle = 'orange';\r\n        }\r\n\r\n        c.lineWidth = 1;\r\n        c.stroke();\r\n    };\r\n\r\n    /**\r\n     * Description\r\n     * @private\r\n     * @method separations\r\n     * @param {render} render\r\n     * @param {pair[]} pairs\r\n     * @param {RenderingContext} context\r\n     */\r\n    Render.separations = function(render, pairs, context) {\r\n        var c = context,\r\n            options = render.options,\r\n            pair,\r\n            collision,\r\n            corrected,\r\n            bodyA,\r\n            bodyB,\r\n            i,\r\n            j;\r\n\r\n        c.beginPath();\r\n\r\n        // render separations\r\n        for (i = 0; i < pairs.length; i++) {\r\n            pair = pairs[i];\r\n\r\n            if (!pair.isActive)\r\n                continue;\r\n\r\n            collision = pair.collision;\r\n            bodyA = collision.bodyA;\r\n            bodyB = collision.bodyB;\r\n\r\n            var k = 1;\r\n\r\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\r\n            if (bodyB.isStatic) k = 0;\r\n\r\n            c.moveTo(bodyB.position.x, bodyB.position.y);\r\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\r\n\r\n            k = 1;\r\n\r\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\r\n            if (bodyA.isStatic) k = 0;\r\n\r\n            c.moveTo(bodyA.position.x, bodyA.position.y);\r\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\r\n        }\r\n\r\n        if (options.wireframes) {\r\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\r\n        } else {\r\n            c.strokeStyle = 'orange';\r\n        }\r\n        c.stroke();\r\n    };\r\n\r\n    /**\r\n     * Description\r\n     * @private\r\n     * @method inspector\r\n     * @param {inspector} inspector\r\n     * @param {RenderingContext} context\r\n     */\r\n    Render.inspector = function(inspector, context) {\r\n        var engine = inspector.engine,\r\n            selected = inspector.selected,\r\n            render = inspector.render,\r\n            options = render.options,\r\n            bounds;\r\n\r\n        if (options.hasBounds) {\r\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\r\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\r\n                boundsScaleX = boundsWidth / render.options.width,\r\n                boundsScaleY = boundsHeight / render.options.height;\r\n\r\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\r\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\r\n        }\r\n\r\n        for (var i = 0; i < selected.length; i++) {\r\n            var item = selected[i].data;\r\n\r\n            context.translate(0.5, 0.5);\r\n            context.lineWidth = 1;\r\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\r\n            context.setLineDash([1,2]);\r\n\r\n            switch (item.type) {\r\n\r\n            case 'body':\r\n\r\n                // render body selections\r\n                bounds = item.bounds;\r\n                context.beginPath();\r\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\r\n                    Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\r\n                context.closePath();\r\n                context.stroke();\r\n\r\n                break;\r\n\r\n            case 'constraint':\r\n\r\n                // render constraint selections\r\n                var point = item.pointA;\r\n                if (item.bodyA)\r\n                    point = item.pointB;\r\n                context.beginPath();\r\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\r\n                context.closePath();\r\n                context.stroke();\r\n\r\n                break;\r\n\r\n            }\r\n\r\n            context.setLineDash([]);\r\n            context.translate(-0.5, -0.5);\r\n        }\r\n\r\n        // render selection region\r\n        if (inspector.selectStart !== null) {\r\n            context.translate(0.5, 0.5);\r\n            context.lineWidth = 1;\r\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\r\n            context.fillStyle = 'rgba(255,165,0,0.1)';\r\n            bounds = inspector.selectBounds;\r\n            context.beginPath();\r\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\r\n                Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\r\n            context.closePath();\r\n            context.stroke();\r\n            context.fill();\r\n            context.translate(-0.5, -0.5);\r\n        }\r\n\r\n        if (options.hasBounds)\r\n            context.setTransform(1, 0, 0, 1, 0, 0);\r\n    };\r\n\r\n    /**\r\n     * Updates render timing.\r\n     * @method _updateTiming\r\n     * @private\r\n     * @param {render} render\r\n     * @param {number} time\r\n     */\r\n    var _updateTiming = function(render, time) {\r\n        var engine = render.engine,\r\n            timing = render.timing,\r\n            historySize = timing.historySize,\r\n            timestamp = engine.timing.timestamp;\r\n\r\n        timing.delta = time - timing.lastTime || Render._goodDelta;\r\n        timing.lastTime = time;\r\n\r\n        timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\r\n        timing.lastTimestamp = timestamp;\r\n\r\n        timing.deltaHistory.unshift(timing.delta);\r\n        timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\r\n\r\n        timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\r\n        timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\r\n\r\n        timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\r\n        timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\r\n\r\n        timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\r\n        timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\r\n\r\n        timing.elapsedHistory.unshift(timing.lastElapsed);\r\n        timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\r\n    };\r\n\r\n    /**\r\n     * Returns the mean value of the given numbers.\r\n     * @method _mean\r\n     * @private\r\n     * @param {Number[]} values\r\n     * @return {Number} the mean of given values\r\n     */\r\n    var _mean = function(values) {\r\n        var result = 0;\r\n        for (var i = 0; i < values.length; i += 1) {\r\n            result += values[i];\r\n        }\r\n        return (result / values.length) || 0;\r\n    };\r\n\r\n    /**\r\n     * @method _createCanvas\r\n     * @private\r\n     * @param {} width\r\n     * @param {} height\r\n     * @return canvas\r\n     */\r\n    var _createCanvas = function(width, height) {\r\n        var canvas = document.createElement('canvas');\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        canvas.oncontextmenu = function() { return false; };\r\n        canvas.onselectstart = function() { return false; };\r\n        return canvas;\r\n    };\r\n\r\n    /**\r\n     * Gets the pixel ratio of the canvas.\r\n     * @method _getPixelRatio\r\n     * @private\r\n     * @param {HTMLElement} canvas\r\n     * @return {Number} pixel ratio\r\n     */\r\n    var _getPixelRatio = function(canvas) {\r\n        var context = canvas.getContext('2d'),\r\n            devicePixelRatio = window.devicePixelRatio || 1,\r\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\r\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\r\n                                      || context.backingStorePixelRatio || 1;\r\n\r\n        return devicePixelRatio / backingStorePixelRatio;\r\n    };\r\n\r\n    /**\r\n     * Gets the requested texture (an Image) via its path\r\n     * @method _getTexture\r\n     * @private\r\n     * @param {render} render\r\n     * @param {string} imagePath\r\n     * @return {Image} texture\r\n     */\r\n    var _getTexture = function(render, imagePath) {\r\n        var image = render.textures[imagePath];\r\n\r\n        if (image)\r\n            return image;\r\n\r\n        image = render.textures[imagePath] = new Image();\r\n        image.src = imagePath;\r\n\r\n        return image;\r\n    };\r\n\r\n    /**\r\n     * Applies the background to the canvas using CSS.\r\n     * @method applyBackground\r\n     * @private\r\n     * @param {render} render\r\n     * @param {string} background\r\n     */\r\n    var _applyBackground = function(render, background) {\r\n        var cssBackground = background;\r\n\r\n        if (/(jpg|gif|png)$/.test(background))\r\n            cssBackground = 'url(' + background + ')';\r\n\r\n        render.canvas.style.background = cssBackground;\r\n        render.canvas.style.backgroundSize = \"contain\";\r\n        render.currentBackground = background;\r\n    };\r\n\r\n    /*\r\n    *\r\n    *  Events Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n    * Fired before rendering\r\n    *\r\n    * @event beforeRender\r\n    * @param {} event An event object\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired after rendering\r\n    *\r\n    * @event afterRender\r\n    * @param {} event An event object\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /*\r\n    *\r\n    *  Properties Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n     * A back-reference to the `Matter.Render` module.\r\n     *\r\n     * @deprecated\r\n     * @property controller\r\n     * @type render\r\n     */\r\n\r\n    /**\r\n     * A reference to the `Matter.Engine` instance to be used.\r\n     *\r\n     * @property engine\r\n     * @type engine\r\n     */\r\n\r\n    /**\r\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\r\n     *\r\n     * @property element\r\n     * @type HTMLElement\r\n     * @default null\r\n     */\r\n\r\n    /**\r\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\r\n     *\r\n     * @property canvas\r\n     * @type HTMLCanvasElement\r\n     * @default null\r\n     */\r\n\r\n    /**\r\n     * A `Bounds` object that specifies the drawing view region.\r\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\r\n     * This allows for creating views that can pan or zoom around the scene.\r\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\r\n     *\r\n     * @property bounds\r\n     * @type bounds\r\n     */\r\n\r\n    /**\r\n     * The 2d rendering context from the `render.canvas` element.\r\n     *\r\n     * @property context\r\n     * @type CanvasRenderingContext2D\r\n     */\r\n\r\n    /**\r\n     * The sprite texture cache.\r\n     *\r\n     * @property textures\r\n     * @type {}\r\n     */\r\n\r\n    /**\r\n     * The mouse to render if `render.options.showMousePosition` is enabled.\r\n     *\r\n     * @property mouse\r\n     * @type mouse\r\n     * @default null\r\n     */\r\n\r\n    /**\r\n     * The configuration options of the renderer.\r\n     *\r\n     * @property options\r\n     * @type {}\r\n     */\r\n\r\n    /**\r\n     * The target width in pixels of the `render.canvas` to be created.\r\n     * See also the `options.pixelRatio` property to change render quality.\r\n     *\r\n     * @property options.width\r\n     * @type number\r\n     * @default 800\r\n     */\r\n\r\n    /**\r\n     * The target height in pixels of the `render.canvas` to be created.\r\n     * See also the `options.pixelRatio` property to change render quality.\r\n     *\r\n     * @property options.height\r\n     * @type number\r\n     * @default 600\r\n     */\r\n\r\n    /**\r\n     * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\r\n     *\r\n     * @property options.pixelRatio\r\n     * @type number\r\n     * @default 1\r\n     */\r\n\r\n    /**\r\n     * A CSS background color string to use when `render.options.wireframes` is disabled.\r\n     * This may be also set to `'transparent'` or equivalent.\r\n     *\r\n     * @property options.background\r\n     * @type string\r\n     * @default '#14151f'\r\n     */\r\n\r\n    /**\r\n     * A CSS background color string to use when `render.options.wireframes` is enabled.\r\n     * This may be also set to `'transparent'` or equivalent.\r\n     *\r\n     * @property options.wireframeBackground\r\n     * @type string\r\n     * @default '#14151f'\r\n     */\r\n\r\n    /**\r\n     * A flag that specifies if `render.bounds` should be used when rendering.\r\n     *\r\n     * @property options.hasBounds\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag to enable or disable all debug information overlays together.  \r\n     * This includes and has priority over the values of:\r\n     *\r\n     * - `render.options.showStats`\r\n     * - `render.options.showPerformance`\r\n     *\r\n     * @property options.showDebug\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag to enable or disable the engine stats info overlay.  \r\n     * From left to right, the values shown are:\r\n     *\r\n     * - body parts total\r\n     * - body total\r\n     * - constraints total\r\n     * - composites total\r\n     * - collision pairs total\r\n     *\r\n     * @property options.showStats\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag to enable or disable performance charts.  \r\n     * From left to right, the values shown are:\r\n     *\r\n     * - average render frequency (e.g. 60 fps)\r\n     * - exact engine delta time used for last update (e.g. 16.66ms)\r\n     * - average engine execution duration (e.g. 5.00ms)\r\n     * - average render execution duration (e.g. 0.40ms)\r\n     * - average effective play speed (e.g. '1.00x' is 'real-time')\r\n     *\r\n     * Each value is recorded over a fixed sample of past frames (60 frames).\r\n     *\r\n     * A chart shown below each value indicates the variance from the average over the sample.\r\n     * The more stable or fixed the value is the flatter the chart will appear.\r\n     *\r\n     * @property options.showPerformance\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n    \r\n    /**\r\n     * A flag to enable or disable rendering entirely.\r\n     *\r\n     * @property options.enabled\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\r\n     *\r\n     * @property options.wireframes\r\n     * @type boolean\r\n     * @default true\r\n     */\r\n\r\n    /**\r\n     * A flag to enable or disable sleeping bodies indicators.\r\n     *\r\n     * @property options.showSleeping\r\n     * @type boolean\r\n     * @default true\r\n     */\r\n\r\n    /**\r\n     * A flag to enable or disable the debug information overlay.\r\n     *\r\n     * @property options.showDebug\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag to enable or disable the collision broadphase debug overlay.\r\n     *\r\n     * @deprecated no longer implemented\r\n     * @property options.showBroadphase\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag to enable or disable the body bounds debug overlay.\r\n     *\r\n     * @property options.showBounds\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag to enable or disable the body velocity debug overlay.\r\n     *\r\n     * @property options.showVelocity\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag to enable or disable the body collisions debug overlay.\r\n     *\r\n     * @property options.showCollisions\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag to enable or disable the collision resolver separations debug overlay.\r\n     *\r\n     * @property options.showSeparations\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag to enable or disable the body axes debug overlay.\r\n     *\r\n     * @property options.showAxes\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag to enable or disable the body positions debug overlay.\r\n     *\r\n     * @property options.showPositions\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag to enable or disable the body angle debug overlay.\r\n     *\r\n     * @property options.showAngleIndicator\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag to enable or disable the body and part ids debug overlay.\r\n     *\r\n     * @property options.showIds\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag to enable or disable the body vertex numbers debug overlay.\r\n     *\r\n     * @property options.showVertexNumbers\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag to enable or disable the body convex hulls debug overlay.\r\n     *\r\n     * @property options.showConvexHulls\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag to enable or disable the body internal edges debug overlay.\r\n     *\r\n     * @property options.showInternalEdges\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A flag to enable or disable the mouse position debug overlay.\r\n     *\r\n     * @property options.showMousePosition\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 27 */\r\n/***/ (function(module, exports, __nested_webpack_require_349813__) {\r\n\r\n/**\r\n* The `Matter.Runner` module is an optional utility which provides a game loop, \r\n* that handles continuously updating a `Matter.Engine` for you within a browser.\r\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\r\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\r\n* Instead just call `Engine.update(engine, delta)` in your own loop.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Runner\r\n*/\r\n\r\nvar Runner = {};\r\n\r\nmodule.exports = Runner;\r\n\r\nvar Events = __nested_webpack_require_349813__(5);\r\nvar Engine = __nested_webpack_require_349813__(17);\r\nvar Common = __nested_webpack_require_349813__(0);\r\n\r\n(function() {\r\n\r\n    var _requestAnimationFrame,\r\n        _cancelAnimationFrame;\r\n\r\n    if (typeof window !== 'undefined') {\r\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\r\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\r\n   \r\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \r\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\r\n    }\r\n\r\n    if (!_requestAnimationFrame) {\r\n        var _frameTimeout;\r\n\r\n        _requestAnimationFrame = function(callback){ \r\n            _frameTimeout = setTimeout(function() { \r\n                callback(Common.now()); \r\n            }, 1000 / 60);\r\n        };\r\n\r\n        _cancelAnimationFrame = function() {\r\n            clearTimeout(_frameTimeout);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\r\n     * @method create\r\n     * @param {} options\r\n     */\r\n    Runner.create = function(options) {\r\n        var defaults = {\r\n            fps: 60,\r\n            deltaSampleSize: 60,\r\n            counterTimestamp: 0,\r\n            frameCounter: 0,\r\n            deltaHistory: [],\r\n            timePrev: null,\r\n            frameRequestId: null,\r\n            isFixed: false,\r\n            enabled: true\r\n        };\r\n\r\n        var runner = Common.extend(defaults, options);\r\n\r\n        runner.delta = runner.delta || 1000 / runner.fps;\r\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\r\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\r\n        runner.fps = 1000 / runner.delta;\r\n\r\n        return runner;\r\n    };\r\n\r\n    /**\r\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\r\n     * @method run\r\n     * @param {engine} engine\r\n     */\r\n    Runner.run = function(runner, engine) {\r\n        // create runner if engine is first argument\r\n        if (typeof runner.positionIterations !== 'undefined') {\r\n            engine = runner;\r\n            runner = Runner.create();\r\n        }\r\n\r\n        (function run(time){\r\n            runner.frameRequestId = _requestAnimationFrame(run);\r\n\r\n            if (time && runner.enabled) {\r\n                Runner.tick(runner, engine, time);\r\n            }\r\n        })();\r\n\r\n        return runner;\r\n    };\r\n\r\n    /**\r\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\r\n     * Features delta smoothing, time correction and fixed or dynamic timing.\r\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\r\n     * @method tick\r\n     * @param {runner} runner\r\n     * @param {engine} engine\r\n     * @param {number} time\r\n     */\r\n    Runner.tick = function(runner, engine, time) {\r\n        var timing = engine.timing,\r\n            delta;\r\n\r\n        if (runner.isFixed) {\r\n            // fixed timestep\r\n            delta = runner.delta;\r\n        } else {\r\n            // dynamic timestep based on wall clock between calls\r\n            delta = (time - runner.timePrev) || runner.delta;\r\n            runner.timePrev = time;\r\n\r\n            // optimistically filter delta over a few frames, to improve stability\r\n            runner.deltaHistory.push(delta);\r\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\r\n            delta = Math.min.apply(null, runner.deltaHistory);\r\n\r\n            // limit delta\r\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\r\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\r\n\r\n            // update engine timing object\r\n            runner.delta = delta;\r\n        }\r\n\r\n        // create an event object\r\n        var event = {\r\n            timestamp: timing.timestamp\r\n        };\r\n\r\n        Events.trigger(runner, 'beforeTick', event);\r\n\r\n        // fps counter\r\n        runner.frameCounter += 1;\r\n        if (time - runner.counterTimestamp >= 1000) {\r\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\r\n            runner.counterTimestamp = time;\r\n            runner.frameCounter = 0;\r\n        }\r\n\r\n        Events.trigger(runner, 'tick', event);\r\n\r\n        // update\r\n        Events.trigger(runner, 'beforeUpdate', event);\r\n\r\n        Engine.update(engine, delta);\r\n\r\n        Events.trigger(runner, 'afterUpdate', event);\r\n\r\n        Events.trigger(runner, 'afterTick', event);\r\n    };\r\n\r\n    /**\r\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\r\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\r\n     * @method stop\r\n     * @param {runner} runner\r\n     */\r\n    Runner.stop = function(runner) {\r\n        _cancelAnimationFrame(runner.frameRequestId);\r\n    };\r\n\r\n    /**\r\n     * Alias for `Runner.run`.\r\n     * @method start\r\n     * @param {runner} runner\r\n     * @param {engine} engine\r\n     */\r\n    Runner.start = function(runner, engine) {\r\n        Runner.run(runner, engine);\r\n    };\r\n\r\n    /*\r\n    *\r\n    *  Events Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n    * Fired at the start of a tick, before any updates to the engine or timing\r\n    *\r\n    * @event beforeTick\r\n    * @param {} event An event object\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired after engine timing updated, but just before update\r\n    *\r\n    * @event tick\r\n    * @param {} event An event object\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired at the end of a tick, after engine update and after rendering\r\n    *\r\n    * @event afterTick\r\n    * @param {} event An event object\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired before update\r\n    *\r\n    * @event beforeUpdate\r\n    * @param {} event An event object\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /**\r\n    * Fired after update\r\n    *\r\n    * @event afterUpdate\r\n    * @param {} event An event object\r\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\r\n    * @param {} event.source The source object of the event\r\n    * @param {} event.name The name of the event\r\n    */\r\n\r\n    /*\r\n    *\r\n    *  Properties Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n     * A flag that specifies whether the runner is running or not.\r\n     *\r\n     * @property enabled\r\n     * @type boolean\r\n     * @default true\r\n     */\r\n\r\n    /**\r\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\r\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\r\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\r\n     *\r\n     * @property isFixed\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies the time step between updates in milliseconds.\r\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\r\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\r\n     *\r\n     * @property delta\r\n     * @type number\r\n     * @default 1000 / 60\r\n     */\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 28 */\r\n/***/ (function(module, exports, __nested_webpack_require_358628__) {\r\n\r\n/**\r\n* This module has now been replaced by `Matter.Collision`.\r\n*\r\n* All usage should be migrated to `Matter.Collision`.\r\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\r\n*\r\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\r\n*\r\n* @class SAT\r\n* @deprecated\r\n*/\r\n\r\nvar SAT = {};\r\n\r\nmodule.exports = SAT;\r\n\r\nvar Collision = __nested_webpack_require_358628__(8);\r\nvar Common = __nested_webpack_require_358628__(0);\r\nvar deprecated = Common.deprecated;\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Detect collision between two bodies using the Separating Axis Theorem.\r\n     * @deprecated replaced by Collision.collides\r\n     * @method collides\r\n     * @param {body} bodyA\r\n     * @param {body} bodyB\r\n     * @return {collision} collision\r\n     */\r\n    SAT.collides = function(bodyA, bodyB) {\r\n        return Collision.collides(bodyA, bodyB);\r\n    };\r\n\r\n    deprecated(SAT, 'collides', 'SAT.collides ➤ replaced by Collision.collides');\r\n\r\n})();\r\n\r\n\r\n/***/ }),\r\n/* 29 */\r\n/***/ (function(module, exports, __nested_webpack_require_359741__) {\r\n\r\n/**\r\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\r\n*\r\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Svg\r\n*/\r\n\r\nvar Svg = {};\r\n\r\nmodule.exports = Svg;\r\n\r\nvar Bounds = __nested_webpack_require_359741__(1);\r\nvar Common = __nested_webpack_require_359741__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Converts an SVG path into an array of vector points.\r\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\r\n     * See `Bodies.fromVertices` which provides support for this.\r\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\r\n     * You must load the `pathseg.js` polyfill on newer browsers.\r\n     * @method pathToVertices\r\n     * @param {SVGPathElement} path\r\n     * @param {Number} [sampleLength=15]\r\n     * @return {Vector[]} points\r\n     */\r\n    Svg.pathToVertices = function(path, sampleLength) {\r\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\r\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\r\n        }\r\n\r\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\r\n        var i, il, total, point, segment, segments, \r\n            segmentsQueue, lastSegment, \r\n            lastPoint, segmentIndex, points = [],\r\n            lx, ly, length = 0, x = 0, y = 0;\r\n\r\n        sampleLength = sampleLength || 15;\r\n\r\n        var addPoint = function(px, py, pathSegType) {\r\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\r\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\r\n\r\n            // when the last point doesn't equal the current point add the current point\r\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\r\n                if (lastPoint && isRelative) {\r\n                    lx = lastPoint.x;\r\n                    ly = lastPoint.y;\r\n                } else {\r\n                    lx = 0;\r\n                    ly = 0;\r\n                }\r\n\r\n                var point = {\r\n                    x: lx + px,\r\n                    y: ly + py\r\n                };\r\n\r\n                // set last point\r\n                if (isRelative || !lastPoint) {\r\n                    lastPoint = point;\r\n                }\r\n\r\n                points.push(point);\r\n\r\n                x = lx + px;\r\n                y = ly + py;\r\n            }\r\n        };\r\n\r\n        var addSegmentPoint = function(segment) {\r\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\r\n\r\n            // skip path ends\r\n            if (segType === 'Z') \r\n                return;\r\n\r\n            // map segment to x and y\r\n            switch (segType) {\r\n\r\n            case 'M':\r\n            case 'L':\r\n            case 'T':\r\n            case 'C':\r\n            case 'S':\r\n            case 'Q':\r\n                x = segment.x;\r\n                y = segment.y;\r\n                break;\r\n            case 'H':\r\n                x = segment.x;\r\n                break;\r\n            case 'V':\r\n                y = segment.y;\r\n                break;\r\n            }\r\n\r\n            addPoint(x, y, segment.pathSegType);\r\n        };\r\n\r\n        // ensure path is absolute\r\n        Svg._svgPathToAbsolute(path);\r\n\r\n        // get total length\r\n        total = path.getTotalLength();\r\n\r\n        // queue segments\r\n        segments = [];\r\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\r\n            segments.push(path.pathSegList.getItem(i));\r\n\r\n        segmentsQueue = segments.concat();\r\n\r\n        // sample through path\r\n        while (length < total) {\r\n            // get segment at position\r\n            segmentIndex = path.getPathSegAtLength(length);\r\n            segment = segments[segmentIndex];\r\n\r\n            // new segment\r\n            if (segment != lastSegment) {\r\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\r\n                    addSegmentPoint(segmentsQueue.shift());\r\n\r\n                lastSegment = segment;\r\n            }\r\n\r\n            // add points in between when curving\r\n            // TODO: adaptive sampling\r\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\r\n\r\n            case 'C':\r\n            case 'T':\r\n            case 'S':\r\n            case 'Q':\r\n            case 'A':\r\n                point = path.getPointAtLength(length);\r\n                addPoint(point.x, point.y, 0);\r\n                break;\r\n\r\n            }\r\n\r\n            // increment by sample value\r\n            length += sampleLength;\r\n        }\r\n\r\n        // add remaining segments not passed by sampling\r\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\r\n            addSegmentPoint(segmentsQueue[i]);\r\n\r\n        return points;\r\n    };\r\n\r\n    Svg._svgPathToAbsolute = function(path) {\r\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\r\n        // Copyright (c) Gavin Kistner\r\n        // http://phrogz.net/js/_ReuseLicense.txt\r\n        // Modifications: tidy formatting and naming\r\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\r\n            x = 0, y = 0, len = segs.numberOfItems;\r\n\r\n        for (var i = 0; i < len; ++i) {\r\n            var seg = segs.getItem(i),\r\n                segType = seg.pathSegTypeAsLetter;\r\n\r\n            if (/[MLHVCSQTA]/.test(segType)) {\r\n                if ('x' in seg) x = seg.x;\r\n                if ('y' in seg) y = seg.y;\r\n            } else {\r\n                if ('x1' in seg) x1 = x + seg.x1;\r\n                if ('x2' in seg) x2 = x + seg.x2;\r\n                if ('y1' in seg) y1 = y + seg.y1;\r\n                if ('y2' in seg) y2 = y + seg.y2;\r\n                if ('x' in seg) x += seg.x;\r\n                if ('y' in seg) y += seg.y;\r\n\r\n                switch (segType) {\r\n\r\n                case 'm':\r\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\r\n                    break;\r\n                case 'l':\r\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\r\n                    break;\r\n                case 'h':\r\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\r\n                    break;\r\n                case 'v':\r\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\r\n                    break;\r\n                case 'c':\r\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\r\n                    break;\r\n                case 's':\r\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\r\n                    break;\r\n                case 'q':\r\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\r\n                    break;\r\n                case 't':\r\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\r\n                    break;\r\n                case 'a':\r\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\r\n                    break;\r\n                case 'z':\r\n                case 'Z':\r\n                    x = x0;\r\n                    y = y0;\r\n                    break;\r\n\r\n                }\r\n            }\r\n\r\n            if (segType == 'M' || segType == 'm') {\r\n                x0 = x;\r\n                y0 = y;\r\n            }\r\n        }\r\n    };\r\n\r\n})();\r\n\r\n/***/ }),\r\n/* 30 */\r\n/***/ (function(module, exports, __nested_webpack_require_367433__) {\r\n\r\n/**\r\n* This module has now been replaced by `Matter.Composite`.\r\n*\r\n* All usage should be migrated to the equivalent functions found on `Matter.Composite`.\r\n* For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\r\n*\r\n* The property `world.gravity` has been moved to `engine.gravity`.\r\n*\r\n* For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\r\n* Eventually this alias module will be marked as deprecated and then later removed in a future release.\r\n*\r\n* @class World\r\n*/\r\n\r\nvar World = {};\r\n\r\nmodule.exports = World;\r\n\r\nvar Composite = __nested_webpack_require_367433__(6);\r\nvar Common = __nested_webpack_require_367433__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * See above, aliases for back compatibility only\r\n     */\r\n    World.create = Composite.create;\r\n    World.add = Composite.add;\r\n    World.remove = Composite.remove;\r\n    World.clear = Composite.clear;\r\n    World.addComposite = Composite.addComposite;\r\n    World.addBody = Composite.addBody;\r\n    World.addConstraint = Composite.addConstraint;\r\n\r\n})();\r\n\r\n\r\n/***/ })\r\n/******/ ]);\r\n});\n\n//# sourceURL=webpack://watermelon-io/./node_modules/matter-js/build/matter.js?");

/***/ }),

/***/ "./src/BubbleGenerator.ts":
/*!********************************!*\
  !*** ./src/BubbleGenerator.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BubbleGenerator = void 0;\nvar Matter = __importStar(__webpack_require__(/*! matter-js */ \"./node_modules/matter-js/build/matter.js\"));\nvar MatterEnvironment_1 = __webpack_require__(/*! ./modules/MatterEnvironment */ \"./src/modules/MatterEnvironment.ts\");\nvar Bubble_Lv1_1 = __webpack_require__(/*! ./modules/Bubbles/Bubble_Lv1 */ \"./src/modules/Bubbles/Bubble_Lv1.ts\");\nvar Bubble_Lv2_1 = __webpack_require__(/*! ./modules/Bubbles/Bubble_Lv2 */ \"./src/modules/Bubbles/Bubble_Lv2.ts\");\nvar Bubble_Lv3_1 = __webpack_require__(/*! ./modules/Bubbles/Bubble_Lv3 */ \"./src/modules/Bubbles/Bubble_Lv3.ts\");\nvar Bubble_Lv4_1 = __webpack_require__(/*! ./modules/Bubbles/Bubble_Lv4 */ \"./src/modules/Bubbles/Bubble_Lv4.ts\");\nvar Bubble_Lv5_1 = __webpack_require__(/*! ./modules/Bubbles/Bubble_Lv5 */ \"./src/modules/Bubbles/Bubble_Lv5.ts\");\nvar Bubble_Lv6_1 = __webpack_require__(/*! ./modules/Bubbles/Bubble_Lv6 */ \"./src/modules/Bubbles/Bubble_Lv6.ts\");\nvar Bubble_Lv7_1 = __webpack_require__(/*! ./modules/Bubbles/Bubble_Lv7 */ \"./src/modules/Bubbles/Bubble_Lv7.ts\");\nvar Bubble_Lv8_1 = __webpack_require__(/*! ./modules/Bubbles/Bubble_Lv8 */ \"./src/modules/Bubbles/Bubble_Lv8.ts\");\nvar Tasks_1 = __webpack_require__(/*! ./modules/Tasks */ \"./src/modules/Tasks.ts\");\nvar BubbleController_1 = __webpack_require__(/*! ./modules/BubbleController */ \"./src/modules/BubbleController.ts\");\nvar Next_1 = __webpack_require__(/*! ./Next */ \"./src/Next.ts\");\nvar preController = /** @class */ (function () {\n    function preController() {\n        var _this = this;\n        this.container = document.querySelector(\".container\");\n        if (this.container == null)\n            return;\n        this.container.addEventListener(\"click\", function (retBubble) {\n            _this.Clicked();\n        });\n    }\n    preController.prototype.UpdateBubble = function (bubble, drop) {\n        this.bubble = bubble;\n        this.drop = drop;\n        if (this.container == null)\n            return;\n        this.container.addEventListener(\"click\", this.Clicked);\n    };\n    preController.prototype.Clicked = function () {\n        if (this.bubble === undefined || this.drop === undefined)\n            return;\n        this.drop(this.bubble);\n        if (this.container == null)\n            return;\n        this.container.removeEventListener(\"click\", this.Clicked);\n    };\n    return preController;\n}());\nvar NextBubbles = /** @class */ (function () {\n    //NextGUIをコンストラクタ―の引数でもらう\n    function NextBubbles() {\n        var bubbles = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            bubbles[_i] = arguments[_i];\n        }\n        var _this = this;\n        this._nextBubbles = new Array();\n        this.NEXT = new Next_1.Next();\n        bubbles.forEach(function (bubble) {\n            _this._nextBubbles.push(bubble);\n        });\n        //NextGUIの更新処理を行う\n        this.NEXT.Display(true);\n        this.NEXT.UpdateNext(this._nextImagePathes);\n    }\n    Object.defineProperty(NextBubbles.prototype, \"nextBubbles\", {\n        //_nextBubblesのgetter\n        get: function () {\n            return this._nextBubbles;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NextBubbles.prototype, \"_nextImagePathes\", {\n        //NEXTのバブルのテクスチャパスを返す\n        get: function () {\n            var ret = new Array();\n            this._nextBubbles.forEach(function (element) {\n                var _a;\n                ret.push((_a = element.Body.render.sprite) === null || _a === void 0 ? void 0 : _a.texture);\n            });\n            return ret;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    //Nextの内容物を更新する\n    NextBubbles.prototype.Switch = function (bubble) {\n        var result = this._nextBubbles.shift();\n        this._nextBubbles.push(bubble);\n        //NextGUIの更新処理を行う\n        this.NEXT.UpdateNext(this._nextImagePathes);\n        return result;\n    };\n    //中身を全てconsole.log()で出力する\n    NextBubbles.prototype.Log = function () {\n        var lab = \"\";\n        this._nextBubbles.forEach(function (elem) {\n            lab += elem.Body.label + \", \";\n        });\n        console.log(\"NextBubbles : \" + lab);\n    };\n    return NextBubbles;\n}());\nvar BubbleGenerator = /** @class */ (function () {\n    ///----------\n    ///メソッド\n    ///----------\n    function BubbleGenerator() {\n        var _this = this;\n        ///----------\n        ///定数\n        ///----------\n        //バブルの生成確立\n        //index=0 : Lv1\n        this.BUBBLE_ESTABLISH = [0.5, 0.3, 0.15, 0.05, 0.0, 0.0, 0.0, 0.0];\n        //バブルを落としてから、次のバブルが生成されるまでの時間(ms)\n        this.BUBBLE_GENE_INTERVAL = 200;\n        //変数の初期化を行う\n        this._bubbleController = new BubbleController_1.BubbleController(); //TODO: 捜査機関を変えられるようにしておく\n        this._nextBubbles = new NextBubbles(this._GenerateRandomBubble(), this._GenerateRandomBubble(), this._GenerateRandomBubble(), this._GenerateRandomBubble(), this._GenerateRandomBubble());\n        //イベントの登録を行う\n        Matter.Events.on(MatterEnvironment_1.MatterEnvironment.engine, \"collisionStart\", function (ev) { return _this._GetCollision(ev); });\n    }\n    Object.defineProperty(BubbleGenerator.prototype, \"NextBubble\", {\n        ///----------\n        ///プロパティ\n        ///----------\n        get: function () {\n            return this._nextBubbles.Switch(this._GenerateRandomBubble());\n        },\n        enumerable: false,\n        configurable: true\n    });\n    //「上位クラス」「操作機関からのコールバック」\n    //によって、この処理が呼ばれることを想定している\n    //バブルを操作機関に送るだけ\n    BubbleGenerator.prototype.SendController = function (bubble) {\n        var _this = this;\n        //渡されたbubbleがundefinedだったら、例外処理を行う\n        if (bubble == undefined) {\n            this._bubbleController.UpdateBubble(bubble, function () { });\n            return;\n        }\n        //NextBubblesの内容物を確認する\n        this._nextBubbles.Log();\n        //バブルを生成する\n        bubble.SetStatic(true);\n        MatterEnvironment_1.MatterEnvironment.Instantiate(bubble.Body);\n        //操作機関にバブルを送る\n        this._bubbleController.UpdateBubble(bubble, function (retBubble) { return __awaiter(_this, void 0, void 0, function () {\n            var bubble;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        //バブルを落とす\n                        retBubble.SetStatic(false);\n                        bubble = this.NextBubble;\n                        if (bubble === undefined) {\n                            //undefinedだったら、エラーを吐く\n                            throw new Error(\"NextBubbles.Switch() returns undefined.\");\n                        }\n                        return [4 /*yield*/, Tasks_1.Tasks.sleep(this.BUBBLE_GENE_INTERVAL)];\n                    case 1:\n                        _a.sent();\n                        //操作機関にバブルを送る\n                        this.SendController(bubble);\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    //「通信」「接触判定」\n    //によって、この処理が呼ばれることを想定している\n    //バブルを絶対位置で配置するだけ\n    BubbleGenerator.prototype.SetAbsolutePos = function (bubble, x, y, isStatic) {\n        //バブルを絶対位置に設定する\n        bubble.SetPosition(x, y);\n        bubble.Body.isStatic = isStatic;\n        //バブルを環境に生成する\n        MatterEnvironment_1.MatterEnvironment.Instantiate(bubble.Body);\n    };\n    //接触判定を取る\n    BubbleGenerator.prototype._GetCollision = function (event) {\n        var _this = this;\n        // 衝突したペアを取得\n        var pairs = event.pairs;\n        pairs.forEach(function (pair) {\n            var bodyA = pair.bodyA, bodyB = pair.bodyB;\n            if (bodyA.label === bodyB.label && bodyA.label.startsWith(\"bubble_\")) {\n                var currentBubbleLevel = Number(bodyA.label.replace(\"bubble_\", ''));\n                var newLevel = currentBubbleLevel + 1;\n                var newX = (bodyA.position.x + bodyB.position.x) / 2;\n                var newY = (bodyA.position.y + bodyB.position.y) / 2 - 50;\n                // 2つのバブルを破壊\n                MatterEnvironment_1.MatterEnvironment.Destroy(bodyA);\n                MatterEnvironment_1.MatterEnvironment.Destroy(bodyB);\n                //次のバブルのレベルが上限を超えていなければ、バブルを生成する\n                if (newLevel >= _this.BUBBLE_ESTABLISH.length)\n                    return;\n                _this.SetAbsolutePos(_this._GenerateBubble(newLevel - 1), newX, newY, false);\n                //接書したバブルのラベルと、新しく生成したバブルのラベルを出力する\n                //console.log(bodyA.label + \" is collided with \" + bodyB.label);\n                //console.log(\"New bubble is \" + \"bubble_\" + newLevel);\n            }\n        });\n    };\n    //バブルをランダムで生成する\n    BubbleGenerator.prototype._GenerateRandomBubble = function () {\n        var random = Math.random();\n        //BUBBLE_ESTABLISHの確率に従って、indexを決定する\n        var index = 0;\n        for (var i = 0; i < this.BUBBLE_ESTABLISH.length; i++) {\n            var sum = 0;\n            for (var j = 0; j <= i; j++) {\n                sum += this.BUBBLE_ESTABLISH[j];\n            }\n            if (random <= sum) {\n                index = i;\n                break;\n            }\n        }\n        return this._GenerateBubble(index);\n    };\n    //任意のレベルのバブルを返す\n    BubbleGenerator.prototype._GenerateBubble = function (level) {\n        var result;\n        switch (level) {\n            case 0:\n                result = new Bubble_Lv1_1.Bubble_Lv1(MatterEnvironment_1.MatterEnvironment.width / 2, 5);\n                break;\n            case 1:\n                result = new Bubble_Lv2_1.Bubble_Lv2(MatterEnvironment_1.MatterEnvironment.width / 2, 5);\n                break;\n            case 2:\n                result = new Bubble_Lv3_1.Bubble_Lv3(MatterEnvironment_1.MatterEnvironment.width / 2, 5);\n                break;\n            case 3:\n                result = new Bubble_Lv4_1.Bubble_Lv4(MatterEnvironment_1.MatterEnvironment.width / 2, 5);\n                break;\n            case 4:\n                result = new Bubble_Lv5_1.Bubble_Lv5(MatterEnvironment_1.MatterEnvironment.width / 2, 5);\n                break;\n            case 5:\n                result = new Bubble_Lv6_1.Bubble_Lv6(MatterEnvironment_1.MatterEnvironment.width / 2, 5);\n                break;\n            case 6:\n                result = new Bubble_Lv7_1.Bubble_Lv7(MatterEnvironment_1.MatterEnvironment.width / 2, 5);\n                break;\n            case 7:\n                result = new Bubble_Lv8_1.Bubble_Lv8(MatterEnvironment_1.MatterEnvironment.width / 2, 5);\n                break;\n            default:\n                //エラーを吐く\n                throw new Error(\"BubbleGenerator._GenerateBubble() : level is out of range.\");\n        }\n        //console.log(result.Body.label + \" is generated.\");\n        return result;\n    };\n    return BubbleGenerator;\n}());\nexports.BubbleGenerator = BubbleGenerator;\n\n\n//# sourceURL=webpack://watermelon-io/./src/BubbleGenerator.ts?");

/***/ }),

/***/ "./src/Gauge.ts":
/*!**********************!*\
  !*** ./src/Gauge.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Gauge = void 0;\nvar Gauge = /** @class */ (function () {\n    function Gauge() {\n        this.fillAmount = 0;\n        this.display = false;\n        this.width = 100;\n        this.height = 10;\n        this.borderWidth = 2;\n        this.drawGauge();\n    }\n    Gauge.prototype.Display = function (display) {\n        this.display = display;\n        this.drawGauge();\n    };\n    Object.defineProperty(Gauge.prototype, \"FillAmount\", {\n        set: function (value) {\n            this.fillAmount = Math.max(0, Math.min(1, value));\n            this.drawGauge();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Gauge.prototype.setGaugeSize = function (width, height) {\n        this.width = width;\n        this.height = height;\n        this.drawGauge();\n    };\n    //ここで描画\n    Gauge.prototype.drawGauge = function () {\n        var gaugeElement = document.querySelector('.Cgauge');\n        if (gaugeElement) {\n            if (this.display) {\n                //可視状態を変更する\n                gaugeElement.style.visibility = \"visible\";\n                gaugeElement.style.width = \"\".concat(this.width, \"px\");\n                gaugeElement.style.height = \"\".concat(this.height, \"px\");\n                gaugeElement.style.position = 'relative';\n                gaugeElement.style.border = \"\".concat(this.borderWidth, \"px solid black\");\n                var fillHeight = this.fillAmount * (this.height - 2 * this.borderWidth);\n                var fillElement = document.createElement('div');\n                fillElement.style.width = \"\".concat(this.width - 2 * this.borderWidth, \"px\");\n                fillElement.style.height = \"\".concat(fillHeight, \"px\");\n                fillElement.style.position = 'absolute';\n                fillElement.style.left = \"\".concat(this.borderWidth, \"px\");\n                fillElement.style.bottom = \"\".concat(this.borderWidth, \"px\");\n                // ゲージの色をFillAmountに応じて変化させるクラスを追加\n                fillElement.classList.add('fill');\n                gaugeElement.innerHTML = '';\n                gaugeElement.appendChild(fillElement);\n            }\n            else {\n                //可視状態を変更する\n                gaugeElement.style.visibility = \"hidden\";\n            }\n        }\n    };\n    return Gauge;\n}());\nexports.Gauge = Gauge;\n\n\n//# sourceURL=webpack://watermelon-io/./src/Gauge.ts?");

/***/ }),

/***/ "./src/Next.ts":
/*!*********************!*\
  !*** ./src/Next.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Next = void 0;\nvar Next = /** @class */ (function () {\n    // コンストラクタ\n    function Next() {\n        // container プロパティが未定義の場合、初期化を行う\n        if (!Next.container) {\n            // 新しい div 要素を作成し、\"next-container\" クラスを追加\n            Next.container = document.createElement(\"div\");\n            Next.container.classList.add(\"next-container\");\n            // 5つの窓を作成\n            for (var i = 0; i < 5; i++) {\n                var windowDiv = document.createElement(\"div\");\n                windowDiv.classList.add(\"window\");\n                // 一番上の窓は \"large\" クラスを追加\n                if (i === 0) {\n                    windowDiv.classList.add(\"large\");\n                }\n                // それぞれの窓に対応するバブル（画像要素）を作成し、\"bubble\" クラスを追加\n                var bubble = document.createElement(\"img\");\n                bubble.classList.add(\"bubble\");\n                windowDiv.appendChild(bubble);\n                // 作成した窓とバブルを container に追加\n                Next.container.appendChild(windowDiv);\n            }\n            // container を body 要素に追加\n            document.body.appendChild(Next.container);\n        }\n    }\n    // 画面を描写するかを切り替えるメソッド\n    Next.prototype.Display = function (display) {\n        // container の表示・非表示を切り替え\n        Next.container.style.display = display ? \"flex\" : \"none\";\n    };\n    // Next のオブジェクトを表示するメソッド\n    Next.prototype.UpdateNext = function (nexts) {\n        // container 内のすべての窓を取得\n        var windows = Next.container.getElementsByClassName(\"window\");\n        // 各窓に対して処理を行う\n        for (var i = 0; i < 5; i++) {\n            var windowDiv = windows[i];\n            var imagePath = nexts[i];\n            // 各窓内のバブル（画像要素）を取得\n            var bubble = windowDiv.querySelector(\".bubble\");\n            // バブルに画像のパスを設定\n            bubble.src = imagePath;\n            // 一番上の窓の場合、バブルのサイズを大きくする\n            if (i === 0) {\n                bubble.style.width = \"60px\";\n                bubble.style.height = \"60px\";\n            }\n            else {\n                // それ以外の窓の場合、バブルのサイズを小さくする\n                bubble.style.width = \"30px\";\n                bubble.style.height = \"30px\";\n            }\n            bubble.classList.remove(\"hidden\");\n        }\n    };\n    return Next;\n}());\nexports.Next = Next;\n\n\n//# sourceURL=webpack://watermelon-io/./src/Next.ts?");

/***/ }),

/***/ "./src/WatermelonGame.ts":
/*!*******************************!*\
  !*** ./src/WatermelonGame.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WatermelonGame = void 0;\nvar BubbleGenerator_1 = __webpack_require__(/*! ./BubbleGenerator */ \"./src/BubbleGenerator.ts\");\nvar Gauge_1 = __webpack_require__(/*! ./Gauge */ \"./src/Gauge.ts\");\nvar GameoverJudge_1 = __webpack_require__(/*! ./modules/GameoverJudge */ \"./src/modules/GameoverJudge.ts\");\nvar MatterEnvironment_1 = __webpack_require__(/*! ./modules/MatterEnvironment */ \"./src/modules/MatterEnvironment.ts\");\nvar Walls_1 = __webpack_require__(/*! ./modules/Walls */ \"./src/modules/Walls.ts\");\nvar WatermelonGame = /** @class */ (function () {\n    ///----------\n    /// メソッド\n    ///----------\n    function WatermelonGame() {\n        this.BUBBLE_GENERATOR = new BubbleGenerator_1.BubbleGenerator();\n        //壁の生成\n        var walls = new Walls_1.Walls(); //TODO: 生成位置を変えられるようにする\n        walls.objects.forEach(function (element) {\n            MatterEnvironment_1.MatterEnvironment.Instantiate(element);\n        });\n        //ゲームオーバーエリアの生成\n        this.GAMEOVER_AREA = new GameoverJudge_1.GameoverArea(MatterEnvironment_1.MatterEnvironment.width / 2, 100, MatterEnvironment_1.MatterEnvironment.width, 70);\n        MatterEnvironment_1.MatterEnvironment.Instantiate(this.GAMEOVER_AREA.boundary);\n        //ゲージの生成\n        this.GAUGE = new Gauge_1.Gauge();\n        this.GAUGE.setGaugeSize(50, 700); //ゲージサイズの変更\n        this.GAUGE.Display(true);\n        this.GAUGE.FillAmount = 0.5;\n    }\n    /**\n     * ゲームをスタートする\n     */\n    WatermelonGame.prototype.Play = function (gameOver) {\n        var _this = this;\n        this._gameOver = gameOver;\n        //ゲームの初期化\n        var nextBubble = this.BUBBLE_GENERATOR.NextBubble;\n        if (nextBubble != undefined)\n            this.BUBBLE_GENERATOR.SendController(nextBubble);\n        this.GAMEOVER_AREA.SetCallBack(function () {\n            console.log(\"ゲームオーバー\");\n            _this.Stop();\n        });\n    };\n    /**\n     * ゲームをストップする\n     */\n    WatermelonGame.prototype.Stop = function () {\n        this.BUBBLE_GENERATOR.SendController(undefined);\n        this.GAMEOVER_AREA.SetCallBack(undefined);\n    };\n    return WatermelonGame;\n}());\nexports.WatermelonGame = WatermelonGame;\n\n\n//# sourceURL=webpack://watermelon-io/./src/WatermelonGame.ts?");

/***/ }),

/***/ "./src/modules/BubbleController.ts":
/*!*****************************************!*\
  !*** ./src/modules/BubbleController.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BubbleController = void 0;\nvar MatterEnvironment_1 = __webpack_require__(/*! ./MatterEnvironment */ \"./src/modules/MatterEnvironment.ts\");\nvar Mouseinput = /** @class */ (function () {\n    function Mouseinput() {\n    }\n    //マウスの右クリック入力イベントのコールバックを登録する\n    Mouseinput.prototype.RightMousePressed = function (callback) {\n        var _this = this;\n        //解除\n        MatterEnvironment_1.MatterEnvironment.canvas.htmlElement.removeEventListener(\"mousedown\", function (e) {\n            _this._RightMousePressedEvent(e.clientX, e.clientY);\n        });\n        //登録\n        this._rightMousePressed = callback;\n        MatterEnvironment_1.MatterEnvironment.canvas.htmlElement.addEventListener(\"mousedown\", function (e) {\n            _this._RightMousePressedEvent(e.clientX, e.clientY);\n        });\n    };\n    //マウスの右クリックリリースイベントのコールバックをコールバックする\n    Mouseinput.prototype.RightMouseReleased = function (callback) {\n        var _this = this;\n        //解除\n        MatterEnvironment_1.MatterEnvironment.canvas.htmlElement.removeEventListener(\"mouseup\", function (e) {\n            _this._RightMouseReleasedEvent(e.clientX, e.clientY);\n        });\n        //登録\n        this._rightMouseReleased = callback;\n        MatterEnvironment_1.MatterEnvironment.canvas.htmlElement.addEventListener(\"mouseup\", function (e) {\n            _this._RightMouseReleasedEvent(e.clientX, e.clientY);\n        });\n    };\n    //マウスのドラッグイベントのコールバックをコールバックする\n    Mouseinput.prototype.MouseDrag = function (callback) {\n        var _this = this;\n        //解除\n        MatterEnvironment_1.MatterEnvironment.canvas.htmlElement.removeEventListener(\"mousemove\", function (e) {\n            _this._MouseDragEvent(e.clientX, e.clientY);\n        });\n        //登録\n        this._MouseDrag = callback;\n        MatterEnvironment_1.MatterEnvironment.canvas.htmlElement.addEventListener(\"mousemove\", function (e) {\n            _this._MouseDragEvent(e.clientX, e.clientY);\n        });\n    };\n    Mouseinput.prototype._RightMousePressedEvent = function (x, y) {\n        if (this._rightMousePressed === undefined)\n            return;\n        this._rightMousePressed(x, y);\n    };\n    Mouseinput.prototype._RightMouseReleasedEvent = function (x, y) {\n        if (this._rightMouseReleased === undefined)\n            return;\n        this._rightMouseReleased(x, y);\n    };\n    Mouseinput.prototype._MouseDragEvent = function (x, y) {\n        if (this._MouseDrag === undefined)\n            return;\n        //x,y値の補正を行う\n        x = x - MatterEnvironment_1.MatterEnvironment.canvas.htmlElement.getBoundingClientRect().left;\n        y = y - MatterEnvironment_1.MatterEnvironment.canvas.htmlElement.getBoundingClientRect().top;\n        this._MouseDrag(x, y);\n    };\n    return Mouseinput;\n}());\nvar BubbleController = /** @class */ (function () {\n    ///----------\n    ///メソッド\n    ///----------\n    function BubbleController() {\n        this.MOUSEINPUT = new Mouseinput();\n        this.draggable = false; //ドラッグ可能かどうかを切り替える\n        this.CONTAINER = document.querySelector(\".container\");\n        if (this.CONTAINER == null)\n            return;\n        this.MOUSEINPUT = new Mouseinput();\n        this._Present();\n    }\n    //このクラスにおいては、「ボディがクリックされたかどうか」は考慮しない\n    //ボディがクリックされたかどうかは、IBubbleControllerを実装するクラスで考慮する\n    BubbleController.prototype._Present = function () {\n        var _this = this;\n        this.MOUSEINPUT.MouseDrag(function (x, y) {\n            _this._MouseDragged(x);\n        });\n        this.MOUSEINPUT.RightMousePressed(function (x, y) {\n            _this._Pressed();\n        });\n        this.MOUSEINPUT.RightMouseReleased(function (x, y) {\n            _this._Released();\n        });\n    };\n    //バブルとコールバックを外部からセットする\n    BubbleController.prototype.UpdateBubble = function (bubble, drop) {\n        var _a;\n        //古いバブルを持っている場合は、破棄する\n        if (((_a = this._bubble) === null || _a === void 0 ? void 0 : _a.Body.isStatic) == true)\n            MatterEnvironment_1.MatterEnvironment.Destroy(this._bubble.Body);\n        this._bubble = bubble;\n        this._drop = drop;\n    };\n    BubbleController.prototype._MouseDragged = function (x) {\n        //ドラッグ可能状態でなければ何もしない\n        if (!this.draggable)\n            return;\n        //console.log(x);\n        //バブルを移動させる\n        if (this._bubble === undefined)\n            return;\n        this._bubble.SetPosition(x, this._bubble.y);\n    };\n    BubbleController.prototype._Pressed = function () {\n        //console.log(\"ぷれす\");\n        //ドラッグ可能状態に切り替える\n        if (this._bubble === undefined)\n            return;\n        this.draggable = true;\n    };\n    BubbleController.prototype._Released = function () {\n        //console.log(\"りりーす\");\n        //ドラッグ可能状態を解除する\n        this.draggable = false;\n        //バブルを落とす\n        if (this._bubble === undefined || this._drop === undefined)\n            return;\n        this._drop(this._bubble);\n    };\n    return BubbleController;\n}());\nexports.BubbleController = BubbleController;\n\n\n//# sourceURL=webpack://watermelon-io/./src/modules/BubbleController.ts?");

/***/ }),

/***/ "./src/modules/Bubbles/BubbleRaw.ts":
/*!******************************************!*\
  !*** ./src/modules/Bubbles/BubbleRaw.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BubbleRaw = void 0;\nvar Matter = __importStar(__webpack_require__(/*! matter-js */ \"./node_modules/matter-js/build/matter.js\"));\nvar BubbleRaw = /** @class */ (function () {\n    ///----------\n    ///メソッド\n    ///----------\n    //バブルの定義をする\n    function BubbleRaw(x, y, r, definition) {\n        if (definition) {\n            this.body = Matter.Bodies.circle(x, y, r, definition);\n        }\n        else {\n            this.body = Matter.Bodies.circle(x, y, r, {\n                label: \"bubble_\",\n                render: {\n                    fillStyle: 'red',\n                }\n            });\n        }\n    }\n    Object.defineProperty(BubbleRaw.prototype, \"Body\", {\n        ///----------\n        ///プロパティ\n        ///----------\n        get: function () {\n            return this.body;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BubbleRaw.prototype, \"x\", {\n        get: function () {\n            return this.body.position.x;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BubbleRaw.prototype, \"y\", {\n        get: function () {\n            return this.body.position.y;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    //バブルの位置をセットする\n    BubbleRaw.prototype.SetPosition = function (x, y) {\n        Matter.Body.setPosition(this.body, { x: x, y: y });\n    };\n    //静的設定\n    BubbleRaw.prototype.SetStatic = function (isStatic) {\n        this.body.isStatic = isStatic;\n    };\n    return BubbleRaw;\n}());\nexports.BubbleRaw = BubbleRaw;\n\n\n//# sourceURL=webpack://watermelon-io/./src/modules/Bubbles/BubbleRaw.ts?");

/***/ }),

/***/ "./src/modules/Bubbles/Bubble_Lv1.ts":
/*!*******************************************!*\
  !*** ./src/modules/Bubbles/Bubble_Lv1.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Bubble_Lv1 = void 0;\nvar BubbleRaw_1 = __webpack_require__(/*! ./BubbleRaw */ \"./src/modules/Bubbles/BubbleRaw.ts\");\nvar Bubble_Lv1 = /** @class */ (function (_super) {\n    __extends(Bubble_Lv1, _super);\n    //バブルの定義をする\n    function Bubble_Lv1(x, y) {\n        return _super.call(this, x, y, 15, {\n            label: \"bubble_1\",\n            render: {\n                sprite: {\n                    texture: 'img/NextTest2/lv1.png',\n                    xScale: 2,\n                    yScale: 2\n                }\n            }\n        }) || this;\n    }\n    return Bubble_Lv1;\n}(BubbleRaw_1.BubbleRaw));\nexports.Bubble_Lv1 = Bubble_Lv1;\n\n\n//# sourceURL=webpack://watermelon-io/./src/modules/Bubbles/Bubble_Lv1.ts?");

/***/ }),

/***/ "./src/modules/Bubbles/Bubble_Lv2.ts":
/*!*******************************************!*\
  !*** ./src/modules/Bubbles/Bubble_Lv2.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Bubble_Lv2 = void 0;\nvar BubbleRaw_1 = __webpack_require__(/*! ./BubbleRaw */ \"./src/modules/Bubbles/BubbleRaw.ts\");\nvar Bubble_Lv2 = /** @class */ (function (_super) {\n    __extends(Bubble_Lv2, _super);\n    //バブルの定義をする\n    function Bubble_Lv2(x, y) {\n        return _super.call(this, x, y, 25, {\n            label: \"bubble_2\",\n            render: {\n                sprite: {\n                    texture: 'img/NextTest2/lv2.png',\n                    xScale: 2,\n                    yScale: 2\n                }\n            }\n        }) || this;\n    }\n    return Bubble_Lv2;\n}(BubbleRaw_1.BubbleRaw));\nexports.Bubble_Lv2 = Bubble_Lv2;\n\n\n//# sourceURL=webpack://watermelon-io/./src/modules/Bubbles/Bubble_Lv2.ts?");

/***/ }),

/***/ "./src/modules/Bubbles/Bubble_Lv3.ts":
/*!*******************************************!*\
  !*** ./src/modules/Bubbles/Bubble_Lv3.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Bubble_Lv3 = void 0;\nvar BubbleRaw_1 = __webpack_require__(/*! ./BubbleRaw */ \"./src/modules/Bubbles/BubbleRaw.ts\");\nvar Bubble_Lv3 = /** @class */ (function (_super) {\n    __extends(Bubble_Lv3, _super);\n    //バブルの定義をする\n    function Bubble_Lv3(x, y) {\n        return _super.call(this, x, y, 35, {\n            label: \"bubble_3\",\n            render: {\n                sprite: {\n                    texture: 'img/NextTest2/lv3.png',\n                    xScale: 2,\n                    yScale: 2\n                }\n            }\n        }) || this;\n    }\n    return Bubble_Lv3;\n}(BubbleRaw_1.BubbleRaw));\nexports.Bubble_Lv3 = Bubble_Lv3;\n\n\n//# sourceURL=webpack://watermelon-io/./src/modules/Bubbles/Bubble_Lv3.ts?");

/***/ }),

/***/ "./src/modules/Bubbles/Bubble_Lv4.ts":
/*!*******************************************!*\
  !*** ./src/modules/Bubbles/Bubble_Lv4.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Bubble_Lv4 = void 0;\nvar BubbleRaw_1 = __webpack_require__(/*! ./BubbleRaw */ \"./src/modules/Bubbles/BubbleRaw.ts\");\nvar Bubble_Lv4 = /** @class */ (function (_super) {\n    __extends(Bubble_Lv4, _super);\n    //バブルの定義をする\n    function Bubble_Lv4(x, y) {\n        return _super.call(this, x, y, 45, {\n            label: \"bubble_4\",\n            render: {\n                sprite: {\n                    texture: 'img/NextTest2/lv4.png',\n                    xScale: 2,\n                    yScale: 2\n                }\n            }\n        }) || this;\n    }\n    return Bubble_Lv4;\n}(BubbleRaw_1.BubbleRaw));\nexports.Bubble_Lv4 = Bubble_Lv4;\n\n\n//# sourceURL=webpack://watermelon-io/./src/modules/Bubbles/Bubble_Lv4.ts?");

/***/ }),

/***/ "./src/modules/Bubbles/Bubble_Lv5.ts":
/*!*******************************************!*\
  !*** ./src/modules/Bubbles/Bubble_Lv5.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Bubble_Lv5 = void 0;\nvar BubbleRaw_1 = __webpack_require__(/*! ./BubbleRaw */ \"./src/modules/Bubbles/BubbleRaw.ts\");\nvar Bubble_Lv5 = /** @class */ (function (_super) {\n    __extends(Bubble_Lv5, _super);\n    //バブルの定義をする\n    function Bubble_Lv5(x, y) {\n        return _super.call(this, x, y, 55, {\n            label: \"bubble_5\",\n            render: {\n                sprite: {\n                    texture: 'img/NextTest2/lv5.png',\n                    xScale: 2,\n                    yScale: 2\n                }\n            }\n        }) || this;\n    }\n    return Bubble_Lv5;\n}(BubbleRaw_1.BubbleRaw));\nexports.Bubble_Lv5 = Bubble_Lv5;\n\n\n//# sourceURL=webpack://watermelon-io/./src/modules/Bubbles/Bubble_Lv5.ts?");

/***/ }),

/***/ "./src/modules/Bubbles/Bubble_Lv6.ts":
/*!*******************************************!*\
  !*** ./src/modules/Bubbles/Bubble_Lv6.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Bubble_Lv6 = void 0;\nvar BubbleRaw_1 = __webpack_require__(/*! ./BubbleRaw */ \"./src/modules/Bubbles/BubbleRaw.ts\");\nvar Bubble_Lv6 = /** @class */ (function (_super) {\n    __extends(Bubble_Lv6, _super);\n    //バブルの定義をする\n    function Bubble_Lv6(x, y) {\n        return _super.call(this, x, y, 65, {\n            label: \"bubble_6\",\n            render: {\n                sprite: {\n                    texture: 'img/NextTest2/lv6.png',\n                    xScale: 2,\n                    yScale: 2\n                }\n            }\n        }) || this;\n    }\n    return Bubble_Lv6;\n}(BubbleRaw_1.BubbleRaw));\nexports.Bubble_Lv6 = Bubble_Lv6;\n\n\n//# sourceURL=webpack://watermelon-io/./src/modules/Bubbles/Bubble_Lv6.ts?");

/***/ }),

/***/ "./src/modules/Bubbles/Bubble_Lv7.ts":
/*!*******************************************!*\
  !*** ./src/modules/Bubbles/Bubble_Lv7.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Bubble_Lv7 = void 0;\nvar BubbleRaw_1 = __webpack_require__(/*! ./BubbleRaw */ \"./src/modules/Bubbles/BubbleRaw.ts\");\nvar Bubble_Lv7 = /** @class */ (function (_super) {\n    __extends(Bubble_Lv7, _super);\n    //バブルの定義をする\n    function Bubble_Lv7(x, y) {\n        return _super.call(this, x, y, 75, {\n            label: \"bubble_7\",\n            render: {\n                sprite: {\n                    texture: 'img/NextTest2/lv7.png',\n                    xScale: 2,\n                    yScale: 2\n                }\n            }\n        }) || this;\n    }\n    return Bubble_Lv7;\n}(BubbleRaw_1.BubbleRaw));\nexports.Bubble_Lv7 = Bubble_Lv7;\n\n\n//# sourceURL=webpack://watermelon-io/./src/modules/Bubbles/Bubble_Lv7.ts?");

/***/ }),

/***/ "./src/modules/Bubbles/Bubble_Lv8.ts":
/*!*******************************************!*\
  !*** ./src/modules/Bubbles/Bubble_Lv8.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Bubble_Lv8 = void 0;\nvar BubbleRaw_1 = __webpack_require__(/*! ./BubbleRaw */ \"./src/modules/Bubbles/BubbleRaw.ts\");\nvar Bubble_Lv8 = /** @class */ (function (_super) {\n    __extends(Bubble_Lv8, _super);\n    //バブルの定義をする\n    function Bubble_Lv8(x, y) {\n        return _super.call(this, x, y, 85, {\n            label: \"bubble_8\",\n            render: {\n                sprite: {\n                    texture: 'img/NextTest2/lv8.png',\n                    xScale: 2,\n                    yScale: 2\n                }\n            }\n        }) || this;\n    }\n    return Bubble_Lv8;\n}(BubbleRaw_1.BubbleRaw));\nexports.Bubble_Lv8 = Bubble_Lv8;\n\n\n//# sourceURL=webpack://watermelon-io/./src/modules/Bubbles/Bubble_Lv8.ts?");

/***/ }),

/***/ "./src/modules/GameoverJudge.ts":
/*!**************************************!*\
  !*** ./src/modules/GameoverJudge.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GameoverArea = void 0;\nvar matter_js_1 = __importDefault(__webpack_require__(/*! matter-js */ \"./node_modules/matter-js/build/matter.js\"));\nvar MatterEnvironment_1 = __webpack_require__(/*! ./MatterEnvironment */ \"./src/modules/MatterEnvironment.ts\");\nvar GameoverArea = /** @class */ (function () {\n    ///----------\n    /// メソッド\n    ///----------\n    function GameoverArea(x, y, width, height) {\n        ///----------\n        ///定数\n        ///----------\n        this.GAMEOVER_TIME = 3000; //ゲームオーバーになるまでの時間(ms)\n        this.TICKRATE = 10; //ゲームオーバーになるまでの時間(ms)\n        this._tickCounter = 0;\n        this._gameOver = function () { };\n        //ゲームオーバー判定範囲の生成\n        this._boundary = matter_js_1.default.Bodies.rectangle(x, y, width, height, {\n            isStatic: true,\n            render: {\n                fillStyle: 'rgba(255, 0, 0, 0.3)', // 赤色の半透明な塗りつぶし\n                strokeStyle: 'transparent', // 枠線を透明に設定\n                lineWidth: 0, // 枠線の幅を0に設定\n            },\n        });\n        this._boundary.collisionFilter = {\n            group: -1, // 物体同士が衝突しないようにするために、同じgroupを指定します\n        };\n    }\n    Object.defineProperty(GameoverArea.prototype, \"boundary\", {\n        ///----------\n        ///プロパティ\n        ///----------\n        get: function () {\n            return this._boundary;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    GameoverArea.prototype.SetCallBack = function (gameOver) {\n        var _this = this;\n        matter_js_1.default.Events.off(MatterEnvironment_1.MatterEnvironment.engine, 'afterUpdate', function () { _this._ObserveEntryBody(); });\n        this._tickCounter = 0;\n        //コールバックが渡されている場合は、イベントの登録を行う\n        if (gameOver != undefined) {\n            this._gameOver = gameOver;\n            matter_js_1.default.Events.on(MatterEnvironment_1.MatterEnvironment.engine, 'afterUpdate', function () { _this._ObserveEntryBody(); });\n        }\n    };\n    GameoverArea.prototype._ObserveEntryBody = function () {\n        //計算回数を減らす\n        this._tickCounter++;\n        if (this._tickCounter < this.TICKRATE)\n            return;\n        this._tickCounter = 0;\n        // World内のすべてのバブルを取得\n        var bodies = MatterEnvironment_1.MatterEnvironment.FindByTag(\"bubble_\");\n        // 各バブルに対して範囲内かどうかを確認\n        for (var _i = 0, bodies_1 = bodies; _i < bodies_1.length; _i++) {\n            var body = bodies_1[_i];\n            if (matter_js_1.default.Bounds.overlaps(body.bounds, this._boundary.bounds)) {\n                // 特定の範囲内にボディが入った場合の処理\n                this._EntryBubble(body);\n            }\n        }\n    };\n    //ここすげー雑\n    GameoverArea.prototype._EntryBubble = function (bubble) {\n        //console.log(\"enter\");\n        var _this = this;\n        //n秒経過しても範囲内にbodyが存在するなら、ゲームオーバーにする\n        var entryID = setTimeout(function () {\n            if (matter_js_1.default.Bounds.overlaps(bubble.bounds, _this._boundary.bounds)) {\n                _this._gameOver();\n            }\n            else {\n            }\n        }, this.GAMEOVER_TIME);\n    };\n    return GameoverArea;\n}());\nexports.GameoverArea = GameoverArea;\n\n\n//# sourceURL=webpack://watermelon-io/./src/modules/GameoverJudge.ts?");

/***/ }),

/***/ "./src/modules/MatterEnvironment.ts":
/*!******************************************!*\
  !*** ./src/modules/MatterEnvironment.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MatterEnvironment = exports.Canvas = void 0;\nvar Matter = __importStar(__webpack_require__(/*! matter-js */ \"./node_modules/matter-js/build/matter.js\"));\n//キャンバスを構成する要素のクラス\nvar Canvas = /** @class */ (function () {\n    ///----------\n    ///メソッド\n    ///----------\n    //コンストラクタ―\n    function Canvas(htmlElement, width, height) {\n        this._htmlElement = htmlElement;\n        this._width = width;\n        this._height = height;\n    }\n    Object.defineProperty(Canvas.prototype, \"htmlElement\", {\n        ///----------\n        ///プロパティ\n        ///----------\n        get: function () {\n            return this._htmlElement;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Canvas.prototype, \"width\", {\n        get: function () {\n            return this._width;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Canvas.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Canvas;\n}());\nexports.Canvas = Canvas;\nvar MatterEnvironment = /** @class */ (function () {\n    function MatterEnvironment() {\n    }\n    Object.defineProperty(MatterEnvironment, \"width\", {\n        ///----------\n        ///プロパティ\n        ///----------\n        get: function () {\n            return this._canvas.width;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MatterEnvironment, \"height\", {\n        get: function () {\n            return this._canvas.height;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MatterEnvironment, \"engine\", {\n        get: function () {\n            return this._engine;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MatterEnvironment, \"canvas\", {\n        get: function () {\n            return this._canvas;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ///----------\n    ///メソッド\n    ///----------\n    //初期化を行う\n    MatterEnvironment.Init = function (canvas) {\n        //必要なコンポーネントの初期化を行う\n        this._engine = Matter.Engine.create();\n        this._render = Matter.Render.create({\n            element: canvas.htmlElement,\n            engine: this._engine,\n            options: {\n                width: canvas.width,\n                height: canvas.height,\n                background: 'transparent',\n                wireframes: false\n            }\n        });\n        this._runner = Matter.Runner.create();\n        Matter.Render.run(this._render);\n        Matter.Runner.run(this._runner, this._engine);\n        //キャンバスをローカル変数にも保存する\n        this._canvas = canvas;\n        //初期化したことを保存する\n        this._isInited = true;\n    };\n    //オブジェクトの生成を行う\n    MatterEnvironment.Instantiate = function (body) {\n        //初期化されているかどうかの確認を行う\n        if (!this._isInited) {\n            this._IsntInited();\n            return;\n        }\n        //オブジェクトの生成をする\n        Matter.World.add(this._engine.world, body);\n    };\n    //オブジェクトの削除を行う\n    MatterEnvironment.Destroy = function (body) {\n        //初期化されているかどうかの確認を行う\n        if (!this._isInited) {\n            this._IsntInited();\n            return [];\n        }\n        Matter.World.remove(this._engine.world, body);\n    };\n    //タグによってオブジェクトの検索を行う\n    MatterEnvironment.FindByTag = function (tag) {\n        //初期化されているかどうかの確認を行う\n        if (!this._isInited) {\n            this._IsntInited();\n            return [];\n        }\n        //タグによってオブジェクトの検索を行う\n        return Matter.Composite.allBodies(this._engine.world).filter(function (body) {\n            return body.label.includes(tag);\n        });\n    };\n    //初期化されていないときのエラーメッセージを表示する\n    MatterEnvironment._IsntInited = function () {\n        console.error(\"MatterEnvironmentは初期化されていません\");\n    };\n    MatterEnvironment._isInited = false;\n    return MatterEnvironment;\n}());\nexports.MatterEnvironment = MatterEnvironment;\n\n\n//# sourceURL=webpack://watermelon-io/./src/modules/MatterEnvironment.ts?");

/***/ }),

/***/ "./src/modules/Tasks.ts":
/*!******************************!*\
  !*** ./src/modules/Tasks.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Tasks = void 0;\nvar Tasks = /** @class */ (function () {\n    function Tasks() {\n    }\n    Tasks.sleep = function (ms) { return new Promise(function (res) { return setTimeout(res, ms); }); };\n    return Tasks;\n}());\nexports.Tasks = Tasks;\n\n\n//# sourceURL=webpack://watermelon-io/./src/modules/Tasks.ts?");

/***/ }),

/***/ "./src/modules/Walls.ts":
/*!******************************!*\
  !*** ./src/modules/Walls.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Walls = void 0;\nvar Matter = __importStar(__webpack_require__(/*! matter-js */ \"./node_modules/matter-js/build/matter.js\"));\nvar MatterEnvironment_1 = __webpack_require__(/*! ./MatterEnvironment */ \"./src/modules/MatterEnvironment.ts\");\nvar Walls = /** @class */ (function () {\n    ///----------\n    ///メソッド\n    ///----------\n    function Walls() {\n        ///----------\n        ///定数\n        ///----------\n        this.WALL_T = 10; //壁の厚さ \n        ///----------\n        ///ローカル変数\n        ///----------\n        this._walls = [];\n        var ground = Matter.Bodies.rectangle(MatterEnvironment_1.MatterEnvironment.width / 2, MatterEnvironment_1.MatterEnvironment.height - this.WALL_T / 2, MatterEnvironment_1.MatterEnvironment.width, this.WALL_T, {\n            isStatic: true,\n            label: \"ground\",\n        });\n        ground.render.fillStyle = \"gray\";\n        var leftWall = Matter.Bodies.rectangle(this.WALL_T / 2, MatterEnvironment_1.MatterEnvironment.height / 2, this.WALL_T, MatterEnvironment_1.MatterEnvironment.height, {\n            isStatic: true,\n            label: \"leftWall\",\n        });\n        leftWall.render.fillStyle = \"gray\";\n        var rightWall = Matter.Bodies.rectangle(MatterEnvironment_1.MatterEnvironment.width - this.WALL_T / 2, MatterEnvironment_1.MatterEnvironment.height / 2, this.WALL_T, MatterEnvironment_1.MatterEnvironment.height, {\n            isStatic: true,\n            label: \"rightWall\",\n        });\n        rightWall.render.fillStyle = \"gray\";\n        this._walls.push(ground, leftWall, rightWall);\n    }\n    Object.defineProperty(Walls.prototype, \"objects\", {\n        ///----------\n        ///プロパティ\n        ///----------\n        get: function () {\n            return this._walls;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Walls;\n}());\nexports.Walls = Walls;\n\n\n//# sourceURL=webpack://watermelon-io/./src/modules/Walls.ts?");

/***/ }),

/***/ "./src/test.ts":
/*!*********************!*\
  !*** ./src/test.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar MatterEnvironment_1 = __webpack_require__(/*! ./modules/MatterEnvironment */ \"./src/modules/MatterEnvironment.ts\");\nvar WatermelonGame_1 = __webpack_require__(/*! ./WatermelonGame */ \"./src/WatermelonGame.ts\");\nwindow.onload = function () {\n    var container = document.querySelector(\".container\");\n    if (container == null)\n        return;\n    var canvas = new MatterEnvironment_1.Canvas(container, 420, 700);\n    MatterEnvironment_1.MatterEnvironment.Init(canvas);\n    //ゲームの初期化\n    var watermelonGame = new WatermelonGame_1.WatermelonGame();\n    //クリック\n    container.addEventListener(\"click\", function () {\n        //let bubble: Matter.Body = Matter.Bodies.circle(MatterEnvironment.width/2, 5, 10);\n        //const bubble: BubbleRaw = new Bubble_Lv1(MatterEnvironment.width/2, 300);\n        //const bubble2: BubbleRaw = new Bubble_Lv1(MatterEnvironment.width/2-5, 30);\n        //MatterEnvironment.Instantiate(bubble.Body);\n        //ubbleGenerator.SetAbsolutePos(new Bubble_Lv1(MatterEnvironment.width / 4, 5), MatterEnvironment.width / 4, 5, false);\n        //MatterEnvironment.Instantiate(bubble.Body);\n        //bubble.SetPosition(MatterEnvironment.width/2, 50);\n    });\n    //キー入力\n    document.addEventListener('keydown', function (event) {\n        if (event.code === 'Space') {\n            console.log(\"スペースが押された\");\n            watermelonGame.Play(function () { });\n        }\n        if (event.code === 'Enter') {\n            console.log(\"エンターが押された\");\n            watermelonGame.Stop();\n        }\n    });\n};\n\n\n//# sourceURL=webpack://watermelon-io/./src/test.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/test.ts");
/******/ 	
/******/ })()
;